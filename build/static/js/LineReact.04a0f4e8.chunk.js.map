{"version":3,"sources":["../static/js/LineReact.04a0f4e8.chunk.js","../node_modules/echarts/lib/view/Chart.js","../node_modules/echarts/lib/data/DataDiffer.js","../node_modules/echarts/lib/scale/Scale.js","../node_modules/echarts/lib/component/axisPointer/modelHelper.js","../node_modules/echarts/lib/model/mixin/makeStyleMapper.js","../node_modules/echarts/lib/coord/Axis.js","../node_modules/echarts/lib/chart/helper/createListFromArray.js","../node_modules/zrender/lib/graphic/Displayable.js","../node_modules/zrender/lib/graphic/Gradient.js","../node_modules/echarts/lib/util/throttle.js","../node_modules/echarts/lib/scale/Interval.js","../node_modules/echarts/lib/component/axis/AxisBuilder.js","../node_modules/echarts/lib/component/axis/AxisView.js","../node_modules/zrender/lib/graphic/helper/image.js","../node_modules/echarts/lib/util/component.js","../node_modules/zrender/lib/core/timsort.js","../node_modules/echarts/lib/coord/axisModelCommonMixin.js","../node_modules/echarts/lib/component/dataZoom/DataZoomModel.js","../node_modules/echarts/lib/component/dataZoom/helper.js","../node_modules/echarts/lib/component/dataZoom/DataZoomView.js","../node_modules/echarts/lib/component/axisPointer.js","../node_modules/echarts/lib/component/axisPointer/viewHelper.js","../node_modules/zrender/lib/mixin/Transformable.js","../node_modules/zrender/lib/core/log.js","../node_modules/zrender/lib/graphic/helper/text.js","../node_modules/zrender/lib/graphic/Image.js","../node_modules/echarts/lib/view/Component.js","../node_modules/echarts/lib/component/helper/sliderMove.js","../node_modules/zrender/lib/core/LRU.js","../node_modules/zrender/lib/graphic/Style.js","../node_modules/zrender/lib/Element.js","../node_modules/zrender/lib/core/guid.js","../node_modules/zrender/lib/animation/Animator.js","../node_modules/zrender/lib/graphic/helper/roundRect.js","../node_modules/zrender/lib/contain/util.js","../node_modules/zrender/lib/graphic/Pattern.js","../node_modules/zrender/lib/graphic/helper/poly.js","../node_modules/echarts/lib/model/mixin/colorPalette.js","../node_modules/zrender/lib/animation/requestAnimationFrame.js","../node_modules/echarts/lib/scale/helper.js","../node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js","../node_modules/echarts/lib/component/axisPointer/globalListener.js","../node_modules/echarts/lib/component/helper/listComponent.js","../node_modules/echarts/lib/component/dataZoom/history.js","../node_modules/echarts/lib/visual/symbol.js","../node_modules/echarts/lib/component/gridSimple.js","../node_modules/zrender/lib/core/bbox.js","../node_modules/zrender/lib/graphic/helper/fixClipWithShadow.js","../node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js","../node_modules/echarts/lib/component/axisPointer/BaseAxisPointer.js","../node_modules/echarts/lib/component/axis/cartesianAxisHelper.js","../node_modules/echarts/lib/component/legend/LegendModel.js","../node_modules/echarts/lib/component/legend/LegendView.js","../node_modules/echarts/lib/component/helper/BrushController.js","../node_modules/echarts/lib/component/helper/cursorHelper.js","../node_modules/echarts/lib/chart/helper/SymbolDraw.js","../node_modules/zrender/lib/graphic/mixin/RectText.js","../node_modules/zrender/lib/contain/line.js","../node_modules/zrender/lib/contain/quadratic.js","../node_modules/zrender/lib/contain/windingLine.js","../node_modules/zrender/lib/graphic/Text.js","../node_modules/zrender/lib/graphic/LinearGradient.js","../node_modules/zrender/lib/zrender.js","../node_modules/echarts/lib/component/tooltip.js","../node_modules/echarts/lib/component/legend.js","../node_modules/echarts/lib/component/toolbox.js","../node_modules/echarts/lib/component/helper/interactionMutex.js","../node_modules/echarts/lib/component/helper/BrushTargetManager.js","../node_modules/echarts/lib/component/helper/brushHelper.js","../node_modules/echarts/lib/component/dataZoom/typeDefaulter.js","../node_modules/echarts/lib/component/dataZoom/dataZoomProcessor.js","../node_modules/echarts/lib/component/dataZoom/dataZoomAction.js","../node_modules/echarts/lib/chart/helper/Symbol.js","../node_modules/echarts/lib/coord/axisModelCreator.js","../node_modules/echarts/lib/model/Global.js","../node_modules/echarts/lib/model/mixin/lineStyle.js","../node_modules/echarts/lib/model/mixin/areaStyle.js","../node_modules/echarts/lib/model/mixin/textStyle.js","../node_modules/zrender/lib/tool/path.js","../node_modules/zrender/lib/mixin/Animatable.js","../node_modules/zrender/lib/animation/Clip.js","../node_modules/zrender/lib/animation/easing.js","../node_modules/zrender/lib/contain/path.js","../node_modules/zrender/lib/contain/cubic.js","../node_modules/zrender/lib/contain/arc.js","../node_modules/zrender/lib/tool/transformPath.js","../node_modules/zrender/lib/graphic/shape/Circle.js","../node_modules/zrender/lib/graphic/shape/Sector.js","../node_modules/zrender/lib/graphic/shape/Ring.js","../node_modules/zrender/lib/graphic/shape/Polygon.js","../node_modules/zrender/lib/graphic/helper/smoothSpline.js","../node_modules/zrender/lib/graphic/helper/smoothBezier.js","../node_modules/zrender/lib/graphic/shape/Polyline.js","../node_modules/zrender/lib/graphic/shape/Rect.js","../node_modules/zrender/lib/graphic/shape/Line.js","../node_modules/zrender/lib/graphic/shape/BezierCurve.js","../node_modules/zrender/lib/graphic/shape/Arc.js","../node_modules/zrender/lib/graphic/CompoundPath.js","../node_modules/zrender/lib/graphic/RadialGradient.js","../node_modules/echarts/lib/model/mixin/itemStyle.js","../node_modules/echarts/lib/model/mixin/boxLayout.js","../node_modules/echarts/lib/model/globalDefault.js","../node_modules/echarts/lib/ExtensionAPI.js","../node_modules/echarts/lib/model/OptionManager.js","../node_modules/echarts/lib/preprocessor/backwardCompat.js","../node_modules/echarts/lib/preprocessor/helper/compatStyle.js","../node_modules/zrender/lib/Handler.js","../node_modules/zrender/lib/mixin/Draggable.js","../node_modules/zrender/lib/Storage.js","../node_modules/zrender/lib/animation/Animation.js","../node_modules/zrender/lib/dom/HandlerProxy.js","../node_modules/zrender/lib/core/GestureMgr.js","../node_modules/zrender/lib/Painter.js","../node_modules/zrender/lib/Layer.js","../node_modules/echarts/lib/visual/seriesColor.js","../node_modules/echarts/lib/loading/default.js","../node_modules/echarts/lib/scale/Ordinal.js","../node_modules/echarts/lib/scale/Time.js","../node_modules/echarts/lib/scale/Log.js","../node_modules/echarts/lib/helper.js","../node_modules/echarts/lib/component/axisPointer/axisTrigger.js","../node_modules/echarts/lib/component/axisPointer/AxisPointerModel.js","../node_modules/echarts/lib/component/axisPointer/AxisPointerView.js","../node_modules/echarts/lib/component/tooltip/TooltipModel.js","../node_modules/echarts/lib/component/tooltip/TooltipView.js","../node_modules/echarts/lib/component/tooltip/TooltipContent.js","../node_modules/echarts/lib/component/legend/legendAction.js","../node_modules/echarts/lib/component/legend/legendFilter.js","../node_modules/echarts/lib/component/toolbox/ToolboxModel.js","../node_modules/echarts/lib/component/toolbox/ToolboxView.js","../node_modules/echarts/lib/component/toolbox/feature/SaveAsImage.js","../node_modules/echarts/lib/component/toolbox/feature/MagicType.js","../node_modules/echarts/lib/component/toolbox/feature/DataView.js","../node_modules/echarts/lib/component/toolbox/feature/DataZoom.js","../node_modules/echarts/lib/component/dataZoomSelect.js","../node_modules/echarts/lib/component/dataZoom/AxisProxy.js","../node_modules/echarts/lib/component/dataZoom/SelectZoomModel.js","../node_modules/echarts/lib/component/dataZoom/SelectZoomView.js","../node_modules/echarts/lib/component/toolbox/feature/Restore.js","../node_modules/echarts/lib/layout/points.js","../node_modules/echarts/lib/coord/cartesian/Grid.js","../node_modules/echarts/lib/coord/cartesian/AxisModel.js","../node_modules/echarts/lib/chart/helper/labelHelper.js","../node_modules/echarts/lib/chart/line/poly.js","../node_modules/echarts/lib/coord/axisDefault.js","../node_modules/echarts/lib/chart/line.js","../node_modules/echarts/lib/chart/line/LineSeries.js","../node_modules/echarts/lib/chart/line/LineView.js","../node_modules/echarts/lib/chart/line/lineAnimationDiff.js","../node_modules/echarts/lib/processor/dataSample.js","../node_modules/echarts/lib/coord/cartesian/Cartesian2D.js","../node_modules/echarts/lib/coord/cartesian/Cartesian.js","../node_modules/echarts/lib/coord/cartesian/Axis2D.js","../node_modules/echarts/lib/coord/cartesian/GridModel.js","../node_modules/echarts/lib/component/axis.js","../node_modules/echarts/lib/component/axis/CartesianAxisView.js","../node_modules/echarts/lib/component/grid.js","../node_modules/echarts/lib/component/legendScroll.js","../node_modules/echarts/lib/component/legend/ScrollableLegendModel.js","../node_modules/echarts/lib/component/legend/ScrollableLegendView.js","../node_modules/echarts/lib/component/legend/scrollableLegendAction.js","Echarts/LineReact.js","../node_modules/zrender/lib/core/util.js","../node_modules/echarts/lib/echarts.js","../node_modules/echarts/lib/util/graphic.js","../node_modules/echarts/lib/util/number.js","../node_modules/echarts/lib/util/model.js","../node_modules/zrender/lib/core/vector.js","../node_modules/echarts/lib/util/format.js","../node_modules/zrender/lib/core/env.js","../node_modules/echarts/lib/model/Model.js","../node_modules/zrender/lib/graphic/Path.js","../node_modules/echarts/lib/util/layout.js","../node_modules/zrender/lib/core/BoundingRect.js","../node_modules/echarts/lib/model/Component.js","../node_modules/echarts/lib/util/clazz.js","../node_modules/zrender/lib/contain/text.js","../node_modules/zrender/lib/core/matrix.js","../node_modules/echarts/lib/data/List.js","../node_modules/echarts/lib/coord/axisHelper.js","../node_modules/echarts/lib/component/toolbox/featureManager.js","../node_modules/zrender/lib/core/event.js","../node_modules/zrender/lib/core/curve.js","../node_modules/zrender/lib/mixin/Eventful.js","../node_modules/zrender/lib/tool/color.js","../node_modules/echarts/lib/model/Series.js","../node_modules/echarts/lib/data/helper/completeDimensions.js","../node_modules/echarts/lib/util/symbol.js","../node_modules/echarts/lib/lang.js","../node_modules/echarts/lib/CoordinateSystem.js","../node_modules/zrender/lib/core/PathProxy.js","../node_modules/zrender/lib/config.js","../node_modules/zrender/lib/container/Group.js"],"names":["webpackJsonp","1000","module","exports","__webpack_require__","Chart","this","group","Group","uid","componentUtil","getUID","elSetState","el","state","trigger","type","i","childCount","childAt","toggleHighlight","data","payload","dataIndex","modelUtil","queryDataIndex","zrUtil","each","normalizeToArray","dataIdx","getItemGraphicEl","eachItemGraphicEl","clazzUtil","prototype","init","ecModel","api","render","seriesModel","highlight","getData","downplay","remove","removeAll","dispose","chartProto","updateView","updateLayout","updateVisual","enableClassExtend","enableClassManagement","registerWhenExtend","1001","defaultKeyGetter","item","DataDiffer","oldArr","newArr","oldKeyGetter","newKeyGetter","context","_old","_new","_oldKeyGetter","_newKeyGetter","initIndexMap","arr","map","keyArr","keyGetterName","dataDiffer","length","key","existence","push","constructor","add","func","_add","update","_update","_remove","execute","oldDataIndexMap","newDataIndexMap","oldDataKeyArr","newDataKeyArr","idx","len","unshift","hasOwnProperty","j","1002","Scale","setting","_setting","_extent","Infinity","_interval","apply","arguments","scaleProto","parse","val","getSetting","name","contain","extent","normalize","scale","unionExtent","other","unionExtentFromData","dim","getDataExtent","getExtent","slice","setExtent","start","end","thisExtent","isNaN","getTicksLabels","labels","ticks","getTicks","getLabel","isBlank","_isBlank","setBlank","1003","collectAxesInfo","result","globalTooltipModel","getComponent","globalAxisPointerModel","linksOption","get","linkGroups","getCoordinateSystems","coordSys","saveTooltipAxisInfo","fromTooltip","triggerTooltip","axis","axisPointerModel","model","getModel","axisPointerShow","isHandleTrigger","makeAxisPointerModel","baseTooltipModel","snap","makeKey","involveSeries","axisInfo","axesInfo","useHandle","seriesModels","axesInfoInCoordSys","seriesInvolved","groupIndex","getLinkGroupIndex","linkGroup","mapper","axisPointerEnabled","coordSysKey","coordSysAxesInfo","coordSysMap","coordSysModel","getAxes","curry","getTooltipAxes","triggerAxis","cross","tooltipAxes","baseAxes","otherAxes","tooltipAxisPointerModel","volatileOption","field","clone","labelOption","label","show","crossStyle","lineStyle","defaults","textStyle","Model","collectSeriesInfo","eachSeries","coordinateSystem","seriesTooltipTrigger","seriesTooltipShow","getAxis","seriesDataCount","count","axisModel","linkOption","checkPropInLink","id","componentIndex","linkPropValue","axisPropValue","isArray","indexOf","helper","collect","fixValue","getAxisInfo","option","status","value","reverse","getAxisPointerModel","1004","properties","excludes","includes","style","propName","getShallow","1005","fixExtentWithBands","nTick","size","margin","numberUtil","linearMap","axisHelper","normalizedExtent","Axis","inverse","onBand","_labelInterval","coord","min","Math","max","containData","dataToCoord","getPixelPrecision","dataExtent","clamp","coordToData","t","pointToData","point","getTicksCoords","alignWithLabel","bands","getBands","coords","getLabelsCoords","span","getBandWidth","axisExtent","abs","getLabelInterval","labelInterval","labelModel","interval","isHorizontal","getAxisLabelInterval","getFormattedLabels","getFont","1006","firstDataNotNull","ifNeedCompleteOrdinalData","sampleItem","getDataItemValue","createListFromArray","__DEV__","Error","coordSysName","creator","creators","registeredCoordSys","CoordinateSystem","completeDimOpt","encodeDef","dimsDef","dimensions","getDimensionsInfo","completeDimensions","categoryIndex","list","List","nameList","createNameList","categories","dimValueGetter","itemOpt","dimName","dimIndex","isDataItemOption","hasItemOption","converDataValue","categoryAxesModels","getCategories","initData","isStackable","axisType","getDimTypeByAxis","categoryAxisModel","categoryDim","dataLen","cartesian2d","axesModels","queryComponents","mainType","index","xAxisModel","yAxisModel","retrieve","xAxisType","yAxisType","stackable","isXAxisCateogry","isYAxisCategory","x","y","singleAxis","singleAxisModel","singleAxisType","isCategory","single","polar","polarModel","angleAxisModel","findAxisModel","radiusAxisModel","radiusAxisType","angleAxisType","isAngleAxisCateogry","isRadiusAxisCateogry","radius","angle","geo","1007","Displayable","opts","Element","call","Style","_rect","__clipPaths","RectText","__dirty","invisible","z","z2","zlevel","draggable","dragging","silent","culling","cursor","rectHover","progressive","beforeBrush","ctx","afterBrush","brush","prevEl","getBoundingRect","rectContain","traverse","cb","transformCoordToLocal","dirty","__zr","refresh","animateStyle","loop","animate","attrKV","set","setStyle","useStyle","obj","inherits","mixin","1008","Gradient","colorStops","addColorStop","offset","color","1009","lib","ORIGIN_METHOD","RATE","throttle","fn","delay","debounce","exec","lastExec","Date","getTime","timer","scope","args","currCall","diff","debounceNextCall","lastCall","thisDelay","thisDebounce","clearTimeout","setTimeout","clear","debounceDelay","createOrUpdate","fnAttr","rate","throttleType","originFn","lastThrottleType","1010","formatUtil","roundNumber","round","IntervalScale","extend","_intervalPrecision","parseFloat","getInterval","setInterval","_niceExtent","getIntervalPrecision","intervalScaleGetTicks","opt","precision","getPrecisionSafe","addCommas","niceTicks","splitNumber","minInterval","maxInterval","isFinite","intervalScaleNiceTicks","intervalPrecision","niceTickExtent","niceExtent","expandSize","fixMax","fixMin","floor","ceil","create","1011","makeAxisEventDataBase","eventData","componentType","endTextLayout","textPosition","textRotate","textAlign","textVerticalAlign","rotationDiff","remRadian","rotation","onLeft","isRadianAroundZero","PI","isSilent","tooltipOpt","fixMinMaxLabelShow","labelEls","tickEls","showMinLabel","showMaxLabel","firstLabel","nextLabel","lastLabel","prevLabel","firstTick","nextTick","lastTick","prevTick","ignoreEl","isTwoLabelOverlapped","ignore","current","next","labelLayout","firstRect","nextRect","mRotationBack","matrix","identity","rotate","applyTransform","mul","getLocalTransform","intersect","isNameLocationCenter","nameLocation","buildAxisTick","axisBuilder","tickModel","lineStyleModel","tickLen","tickInterval","ticksCoords","pt1","pt2","_transform","ticksCnt","ifIgnoreOnTick","tickCoord","tickDirection","v2ApplyTransform","tickEl","graphic","Line","subPixelOptimizeLine","anid","shape","x1","y1","x2","y2","getLineStyle","stroke","buildAxisLabel","axisLabelShow","labelMargin","labelRotation","labelRotate","innerTextLayout","labelDirection","categoryData","triggerEvent","tickVal","itemLabelModel","textColor","getTextColor","pos","labelOffset","labelStr","textEl","Text","position","setTextStyle","text","textFill","targetType","_dumbGroup","updateTransform","decomposeTransform","vec2","AxisBuilder","nameDirection","dumbGroup","transform","hasBuilder","builders","getGroup","axisLine","lineCap","strokeContainThreshold","axisTickLabel","axisName","textStyleModel","gap","gapSignal","nameRotation","axisNameAvailableWidth","sin","textFont","truncateOpt","ellipsis","maxWidth","nameTruncateMaxWidth","truncatedText","truncateText","minChar","placeholder","formatterParams","$vars","__fullText","__truncatedText","tooltip","content","formatter","axisRotation","textRotation","direction","rawTick","1012","updateAxisPointer","axisView","forceRender","Clazz","AxisView","getAxisPointerClass","axisPointerClass","axisPointerModelHelper","_axisPointer","disposeAxisPointer","axisPointer","extendComponentView","superApply","force","axisPointerClazz","registerAxisPointerClass","clazz","1013","imageOnLoad","cachedImgObj","__cachedImgObj","onload","pending","pendingWrap","cbPayload","hostEl","LRU","globalImageCache","findExistImage","newImageOrSrc","image","createOrUpdateImage","__zrImageSrc","isImageReady","Image","put","src","width","height","1014","parseClassType","base","random","join","enableSubTypeDefaulter","entity","subTypeDefaulters","registerSubTypeDefaulter","defaulter","main","determineSubType","componentTypeMain","hasSubTypes","enableTopologicalTravel","dependencyGetter","makeDepndencyGraph","fullNameList","graph","noEntryList","thisItem","createDependencyGraphItem","originalDeps","availableDeps","getAvailableDependencies","entryCount","dependentName","predecessor","thatItem","successor","dep","topologicalTravel","targetNameList","callback","removeEdge","succComponentType","stack","removeEdgeAndAdd","targetNameSet","currComponentType","pop","currVertex","isInTargetNameSet","1015","minRunLength","n","r","DEFAULT_MIN_MERGE","makeAscendingRun","array","lo","hi","compare","runHi","reverseRun","binaryInsertionSort","mid","pivot","left","right","gallopLeft","hint","lastOffset","maxOffset","tmp","m","gallopRight","TimSort","pushRun","_runStart","_runLength","runStart","stackSize","runLength","mergeRuns","mergeAt","forceMergeRuns","start1","length1","start2","length2","k","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","_minGallop","minGallop","DEFAULT_MIN_GALLOPING","customCursor","customDest","sort","remaining","ts","minRun","1016","getName","isObject","getMin","origin","rangeStart","eqNaN","getMax","rangeEnd","getNeedCrossZero","getCoordSysModel","noop","setRange","resetRange","1017","retrieveRaw","ret","updateRangeUse","dataZoomModel","rawOption","rangePropMode","_rangePropMode","rangeModeInOption","names","percentSpecified","valueSpecified","env","echarts","AxisProxy","eachAxisDim","DataZoomModel","extendComponentModel","dependencies","defaultOption","orient","xAxisIndex","yAxisIndex","filterMode","startValue","endValue","minSpan","maxSpan","minValueSpan","maxValueSpan","rangeMode","parentModel","_dataIntervalByAxis","_dataInfo","_axisProxies","_autoThrottle","mergeDefaultAndTheme","doInit","mergeOption","newOption","merge","thisOption","canvasSupported","realtime","_setDefaultThrottle","_resetTarget","_giveAxisProxies","axisProxies","eachTargetAxis","dimNames","axisIndex","dependentModels","axisProxy","__dzAxisProxy","autoMode","_judgeAutoMode","axisIndexName","_autoSetAxisIndex","_autoSetOrient","hasIndexSpecified","autoAxisIndex","singleAxisIndex","axisIndices","axisModels","_isSeriesHasAllAxesTypeOf","axisId","is","seriesAxisIndex","globalOption","animation","animationDurationUpdate","getFirstTargetAxisModel","firstAxisModel","indices","getAxisProxy","getAxisModel","setRawRange","ignoreUpdateRangeUsg","getPercentRange","findRepresentativeAxisProxy","getDataPercentWindow","getValueRange","axisDimName","getDataValueWindow","hostedBy","getRangePropMode","1018","AXIS_DIMS","COORDS","isCoordSupported","coordType","createNameEach","attrs","capitalNames","capitalFirst","capitalAttrs","nameObj","capital","createLinkedNodesFinder","forEachNode","forEachEdgeType","edgeIdGetter","isNodeAbsorded","node","nodes","isLinked","hasLink","edgeType","edgeId","records","absorb","sourceNode","processSingleNode","existsLink","1019","ComponentView","getTargetCoordInfo","save","coordModel","store","coordIndex","coordSysLists","1020","axisTrigger","registerPreprocessor","link","registerProcessor","PRIORITY","PROCESSOR","STATISTIC","registerAction","event","1021","confineInContainer","viewWidth","getWidth","viewHeight","getHeight","textContain","buildElStyle","axisPointerType","styleModel","fill","getAreaStyle","buildLabelElOption","elOption","labelPos","getValueLabel","paddings","normalizeCssArray","font","textRect","align","verticalAlign","bgColor","lineWidth","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","seriesDataIndices","params","getAxisRawValue","seriesData","idxItem","series","getSeriesByIndex","seriesIndex","dataIndexInside","dataParams","getDataParams","isString","replace","isFunction","getTransformedPosition","layoutInfo","translate","buildCartesianSingleLabelElOption","textLayout","makeLineShape","p1","p2","xDimIndex","makeRectShape","xy","wh","makeSectorShape","cx","cy","r0","startAngle","endAngle","clockwise","1022","isNotAroundZero","EPSILON","vector","mIdentity","Transformable","transformableProto","needLocalTransform","parent","parentHasTransform","copy","invTransform","invert","setTransform","dpr","restoreTransform","tmpTransform","sx","sy","sqrt","atan2","getGlobalScale","v2","transformCoordToGlobal","target","1023","config","debugMode","console","log","1024","normalizeStyle","makeFont","VALID_TEXT_ALIGN","textBaseline","VALID_TEXT_VERTICAL_ALIGN","textPadding","util","renderPlainText","rect","setCtx","DEFAULT_FONT","contentBlock","__textCotentBlock","parsePlainText","truncate","outerHeight","textLines","lines","lineHeight","boxPos","getBoxPosition","baseX","baseY","applyTextRotation","boxY","adjustTextY","textX","textY","needDrawBg","needDrawBackground","textWidth","outerWidth","boxX","adjustTextX","drawBackground","getTextXForPadding","textShadowBlur","textShadowColor","textShadowOffsetX","textShadowOffsetY","textStrokeWidth","textStroke","getStroke","getFill","strokeText","fillText","renderRichText","parseRichText","drawRichText","contentWidth","xLeft","lineTop","xRight","token","line","tokens","tokenCount","usedWidth","leftIndex","lineXLeft","lineXRight","rightIndex","placeToken","textOrigin","tokenStyle","rich","styleName","isLineHolder","textHeight","retrieve3","retrieve2","textBackgroundColor","textBorderWidth","textBorderColor","isPlainBg","textBoxShadowBlur","textBoxShadowColor","textBoxShadowOffsetX","textBoxShadowOffsetY","beginPath","textBorderRadius","roundRectHelper","buildPath","closePath","imageHelper","onBgImageLoaded","drawImage","blockHeiht","Array","parsePercent","res","adjustTextPositionOnRect","textDistance","textOffset","prop","maxValue","lastIndexOf","center","top","bottom","middle","normalizeTextStyle","renderText","needDrawText","1025","ZImage","BoundingRect","bind","_image","aspect","sWidth","sHeight","drawRectText","1026","Component","componentModel","componentProto","1027","getSpanSign","handleEnds","handleIndex","dist","sign","restrict","delta","extentSpan","originalDistSign","extentMinSpan","realExtent","currDistSign","1028","LinkedList","head","tail","_len","linkedListProto","insert","entry","Entry","insertEntry","prev","maxSize","_list","_map","_maxSize","_lastRemovedEntry","LRUProto","removed","leastUsedEntry","1029","createLinearGradient","global","createRadialGradient","STYLE_COMMON_PROPS","host","extendFrom","opacity","lineDash","lineDashOffset","strokeNoScale","fontStyle","fontWeight","fontSize","fontFamily","textTag","textLineHeight","transformText","blend","prevStyle","firstDraw","fillStyle","strokeStyle","globalAlpha","globalCompositeOperation","hasStroke","getLineScale","hasFill","otherStyle","overwrite","newStyle","getGradient","method","canvasGradient","styleProto","1030","guid","Eventful","Animatable","clipPath","drift","dx","dy","beforeUpdate","afterUpdate","hide","attr","setClipPath","zr","addSelfToZr","removeClipPath","__clipTarget","removeSelfFromZr","animators","addAnimator","removeAnimator","1031","idStart","1032","defaultGetter","defaultSetter","interpolateNumber","p0","percent","interpolateString","interpolateArray","out","arrDim","len2","fillArr","arr0","arr1","arr0Len","arr1Len","arraySlice","isArraySame","catmullRomInterpolateArray","p3","t2","t3","catmullRomInterpolate","v0","v1","cloneValue","isArrayLike","rgba2String","rgba","getArrayDim","keyframes","lastValue","createTrackClip","animator","easing","oneTrackDone","forceAnimate","getter","_getter","setter","_setter","useSpline","trackLen","trackMaxTime","firstVal","isValueArray","isValueColor","isValueString","a","b","time","kfPercents","kfValues","prevValue","isAllValueEqual","colorArray","_target","w","lastFrame","lastFramePercent","onframe","frame","range","clip","Clip","life","_loop","_delay","ondestroy","Animator","_tracks","_clipCount","_doneList","_onframeList","_clipList","when","props","tracks","during","pause","_paused","resume","isPaused","_doneCallback","doneList","lastClip","self","clipCount","addClip","oldOnFrame","stop","forwardToLast","clipList","removeClip","done","getClips","1033","r1","r2","r3","r4","total","moveTo","lineTo","quadraticCurveTo","1034","PI2","normalizeRadian","1035","Pattern","repeat","getCanvasPattern","createPattern","1036","smoothSpline","smoothBezier","points","smooth","controlPoints","smoothConstraint","cp1","cp2","p","bezierCurveTo","l","1037","classUtil","clearColorPalette","getColorFromPalette","colorIdx","colorNameMap","colorPalette","1038","window","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","1039","nice","fixExtent","tick","1040","finder","getTooltipPosition","dataToPoint","getValues","coordDimToDataDim","1041","initGlobalListeners","useHandler","eventType","on","e","dis","makeDispatchAction","record","dispatchAction","dispatchTooltipFinally","pendings","initialized","doEnter","onLeave","actuallyPayload","showLen","showTip","hideLen","hideTip","handler","currTrigger","pendingList","makeGetter","globalListener","register","getZr","unregister","1042","layout","boxLayoutParams","getBoxLayoutParams","padding","viewportSize","getLayoutRect","box","positionElement","makeBackground","getItemStyle","Rect","1043","giveStore","ATTR","history","newSnapshot","batchItem","dataZoomId","subType","percentRange","snapshot","1044","seriesType","defaultSymbolType","legendSymbol","eachRawSeriesByType","symbolType","symbolSize","setVisual","symbol","isSeriesFiltered","rawValue","getRawValue","setItemVisual","itemModel","getItemModel","itemSymbolType","itemSymbolSize","1045","gridModel","getRect","xAxis","yAxis","grid","1046","curve","bbox","mathMin","mathMax","mathSin","mathCos","cos","extremity","fromPoints","fromLine","x0","y0","xDim","yDim","fromCubic","x3","y3","cubicExtrema","cubicAt","fromQuadratic","quadraticExtremum","quadraticAt","tx","ty","fromArc","rx","ry","anticlockwise","vec2Min","vec2Max","1047","shadowTemp","orignalBrush","browser","ie","version","modified","clipPaths","1048","getCartesian","getAxisDimIndex","BaseAxisPointer","viewHelper","cartesianAxisHelper","CartesianAxisPointer","makeElOption","otherExtent","getOtherAxis","getGlobalExtent","pixelValue","toGlobalCoord","elStyle","pointerOption","pointerShapeBuilder","graphicKey","pointer","getHandleTransform","labelInside","updateHandleTransform","currPosition","cursorOtherValue","cursorPoint","tooltipOptions","tooltipOption","targetShape","shadow","bandWidth","1049","updateProps","animationModel","moveAnimation","propsEqual","lastProp","stopAnimation","lastProps","newProps","equals","updateLabelShowHide","labelEl","getHandleTransProps","trans","updateMandatoryProps","eventTool","_group","_lastGraphicKey","_handle","_dragging","_lastValue","_lastStatus","_payloadInfo","animationThreshold","_axisModel","_axisPointerModel","_api","handle","_moveAnimation","determineAnimation","doUpdateProps","updatePointerEl","updateLabelEl","createPointerEl","createLabelEl","_renderHandle","isCategoryAxis","useSnap","pointerEl","handleModel","isInit","createIcon","onmousemove","onmousedown","_onHandleDragMove","ondragend","_onHandleDragEnd","includeStyles","handleSize","_moveHandleToValue","_doDispatchAxisPointer","payloadInfo","axisDim","doClear","buildLabel","1050","rawAxisPosition","axisPosition","onZero","rectBound","axisOffset","posBound","otherAxis","onZeroAxisIndex","onZeroCoord","dirMap","1051","LegendModel","layoutMode","ignoreSize","selected","superCall","optionUpdated","_updateData","legendData","_data","hasSelected","isSelected","select","dataItem","availableNames","getSeries","legendDataProvider","concat","mapArray","_availableNames","unSelect","toggleSelected","backgroundColor","borderColor","borderRadius","borderWidth","itemGap","itemWidth","itemHeight","inactiveColor","selectedMode","1052","dispatchSelectAction","dispatchHighlightAction","dataName","storage","getDisplayList","useHoverLayer","seriesName","dispatchDownplayAction","symbolCreator","listComponentHelper","layoutUtil","newlineDisabled","_contentGroup","_backgroundEl","getContentGroup","legendModel","resetInner","itemAlign","renderInner","positionInfo","mainRect","layoutInner","layoutRect","contentGroup","legendDrawnMap","createHashMap","selectMode","newline","getSeriesByName","getVisual","legendSymbolType","_createItem","eachRawSeries","indexOfName","getItemVisual","warn","itemGroup","itemIcon","tooltipModel","legendGlobalTooltipModel","createSymbol","hitRect","legendIndex","eachChild","child","setHoverStyle","__legendDataIndex","contentRect","1053","BrushController","assert","_zr","_brushType","_brushOption","_panels","_track","_covers","_creatingCover","_creatingPanel","_enableGlobalPan","_mounted","_uid","baseUID","_handlers","mouseHandlers","eventName","doEnableBrush","controller","brushOption","interactionMutex","take","MUTEX_RESOURCE_KEY","brushType","DEFAULT_BRUSH_OPT","doDisableBrush","release","off","createCover","cover","coverRenderers","__brushOption","updateZ","endCreating","creatingCover","coverRenderer","getCoverRenderer","updateCoverShape","COVER_Z","updateCoverAfterCreation","updateCommon","getPanelByPoint","localCursorPoint","panels","panel","pn","isTargetByCursor","getPanelByCover","panelId","clearCovers","covers","originalLength","areas","isEnd","removeOnClick","shouldShowCover","track","mathPow","UNSELECT_THRESHOLD","getTrackEnds","createBaseRectCover","doDrift","edgeNames","makeStyle","updateBaseRect","localRange","brushStyle","MIN_RESIZE_LINE_WIDTH","xa","ya","x2a","y2a","widtha","heighta","updateRectShape","transformable","mainEl","childOfName","globalDir","getGlobalDirection","CURSOR_MAP","h","setShape","pointsToRect","clipByPanel","formatRectRange","getTransform","localDirection","split","s","inverseMap","transformDirection","driftRect","toRectRange","fromRectRange","rectRange","localDelta","toLocalDelta","namePart","ind","DIRECTION_MAP","driftPolygon","thisGroup","localD","localZero","xmin","ymin","resetCursor","currPanel","setCursorStyle","preventDefault","rawE","mainShapeContain","updateCoverByMouse","eventParams","thisBrushOption","brushMode","determineBrushType","getCreatingRange","defaultBrushType","handleDragEnd","offsetX","offsetY","getLineRenderer","xyIndex","localTrack","ends","getLinearBrushOtherExtent","pow","ne","sw","nw","se","enableBrush","setPanels","panelOpts","mount","enableGlobalPan","eachCover","updateCovers","brushOptionList","getKey","tmpIdPrefix","oldGetKey","addOrUpdate","newIndex","oldIndex","newBrushOption","oldCovers","newCovers","unmount","mousedown","mousemove","mouseup","lineX","lineY","polygon","Polyline","Polygon","1054","IRRELEVANT_EXCLUDES","onIrrelevantElement","targetCoordSysModel","getComponentByElement","topTarget","1055","SymbolDraw","symbolCtor","_symbolCtor","Symbol","symbolNeedsDraw","isIgnore","getItemLayout","symbolDrawProto","updateData","hostModel","oldData","SymbolCtor","seriesScope","itemStyle","hoverItemStyle","symbolRotate","symbolOffset","hoverAnimation","hoverLabelModel","cursorStyle","newIdx","symbolEl","setItemGraphicEl","oldIdx","fadeOut","enableAnimation","1057","textHelper","tmpRect","restore","1058","containStroke","_l","_a","_b","1059","quadraticProjectPoint","1060","dir","1061","1062","LinearGradient","globalCoord","1063","delInstance","instances","Handler","Storage","Animation","HandlerProxy","useVML","painterCtors","canvas","zrender","dom","ZRender","getInstance","registerPainter","Ctor","rendererType","renderer","vml","painter","handerProxy","getViewportRoot","root","stage","flush","_needsRefresh","oldDelFromStorage","delFromStorage","oldAddToStorage","addToStorage","getId","addRoot","delRoot","configLayer","zLevel","refreshImmediately","_needsRefreshHover","refreshHoverImmediately","addHover","refreshHover","removeHover","clearHover","resize","clearAnimation","pathToImage","findHover","eventHandler","1064","1065","1067","1068","getStore","resourceKey","userKey","isTaken","1069","BrushTargetManager","targetInfoList","_targetInfoList","info","foundCpts","parseFinder","targetInfoBuilders","builder","include","formatMinMax","minMax","includeMainTypes","INCLUDE_FINDER_MAIN_TYPES","axisConvert","axisNameIndex","to","rangeOrCoordRange","values","toLocalCoord","xyMinMax","NaN","axisDiffProcessor","refer","scales","getScales","xyMinMaxCurr","xyMinMaxOrigin","sizeCurr","getSize","sizeOrigin","brushHelper","COORD_CONVERTS","proto","setOutputRanges","matchOutputRanges","area","coordRange","coordRanges","coordConvert","__rangeOffset","diffProcessor","targetInfo","findTargetInfo","coordSyses","setInputRanges","rangeOffset","makePanelOpts","getDefaultBrushType","getPanelRect","makeRectPanelClipPath","makeRectIsTargetByCursor","makeLinearBrushOtherExtent","controlSeries","areaPanelId","targetInfoMatchers","xAxisModels","yAxisModels","gridModels","gridModelMap","xAxesHas","yAxesHas","cartesians","getCartesians","cartesian","panelRectBuilder","xAxisDeclared","yAxisDeclared","geoModels","geoModel","xminymin","xmaxymax","1070","normalizeRect","cursorHelper","graphicUtil","localPoints","clipPointsByRect","specifiedXYIndex","brushWidth","targetModel","1071","1072","resetSingleAxis","reset","filterSingleAxis","filterData","eachComponent","valueRange","1073","linkedNodesFinder","effectedModels","query","1074","getSymbolSize","getScale","driftSymbol","symbolUtil","labelHelper","symbolProto","_createSymbol","symbolPath","initProps","_symbolType","stopSymbolAnimation","toLastFrame","getSymbolPath","setZ","setDraggable","_updateCommon","_seriesModel","normalStyleAccessPath","emphasisStyleAccessPath","normalLabelAccessPath","emphasisLabelAccessPath","setColor","valueDim","findLabelValueDim","setLabelStyle","labelFetcher","labelDataIndex","defaultText","isRectText","autoColor","hoverStyle","isAnimationEnabled","onEmphasis","ratio","animateTo","onNormal","1075","axisDefault","ComponentModel","AXIS_TYPES","BaseAxisModelClass","axisTypeDefaulter","extraDefaultOption","inputPositionParams","getLayoutParams","themeModel","getTheme","getDefaultOption","mergeLayoutParam","mergeAll","1077","mergeTheme","theme","themeItem","hasClass","initBase","baseOption","OPTION_INNER_KEY","_componentsMap","_seriesIndices","_theme","globalDefault","getComponentsByTypes","componentsMap","types","newCptOption","existComponent","createSeriesIndices","filterBySubType","components","condition","filter","cpt","assertSeriesInitialized","GlobalModel","optionManager","_optionManager","setOption","optionPreprocessorFuncs","resetOption","optionChanged","mountOption","restoreData","timelineOption","getTimelineOption","mediaOptions","getMediaOption","mediaOption","visitComponent","newCptOptionList","mapResult","mappingToExists","makeIdAndName","keyInfo","exist","resultItem","ComponentModelClass","getClass","extraOpt","newCptTypes","componentOption","getAllClassMainTypes","getOption","isIdInner","splice","cpts","isIdArray","isNameArray","findComponents","queryCond","q","indexAttr","idAttr","nameAttr","component","queryResult","oneSeries","getSeriesByType","rawSeriesIndex","eachSeriesByType","getCurrentSeriesIndices","filterSeries","filteredSeries","componentTypes","1078","getLineDash","lineType","dotSize","dashSize","1079","1080","PATH_COLOR","isEmphasis","getTextRect","1081","processArc","fa","fs","psiDeg","cmd","path","psi","xp","yp","lambda","mathSqrt","f","cxp","cyp","theta","vAngle","u","v","dTheta","vRatio","addData","createPathProxyFromString","cs","cc","RegExp","prevCmd","cpx","cpy","PathProxy","CMD","str","c","charAt","shift","ctlPtx","ctlPty","L","M","C","pathData","Q","A","Z","toStatic","createPathOptions","pathProxy","setData","getContext","rebuildPath","transformPath","Path","vMag","acos","createFromString","extendFromString","mergePath","pathEls","pathList","pathEl","createPathProxy","__dirtyPath","pathBundle","appendPath","1082","animatingShape","pathSplitted","_animateToShallow","source","objShallow","propertyCount","1083","options","_life","_initialized","onrestart","_pausedTime","easingFuncs","step","globalTime","deltaTime","_startTime","easingFunc","schedule","fire","restart","_needsRemove","remainder","arg","1084","linear","quadraticIn","quadraticOut","quadraticInOut","cubicIn","cubicOut","cubicInOut","quarticIn","quarticOut","quarticInOut","quinticIn","quinticOut","quinticInOut","sinusoidalIn","sinusoidalOut","sinusoidalInOut","exponentialIn","exponentialOut","exponentialInOut","circularIn","circularOut","circularInOut","elasticIn","asin","elasticOut","elasticInOut","backIn","backOut","backInOut","bounceIn","bounceOut","bounceInOut","1085","isAroundEqual","swapExtrema","extrema","windingCubic","nRoots","cubicRootAt","roots","y0_","y1_","nExtrema","unit","windingQuadratic","quadraticRootAt","y_","x_","windingArc","containPath","isStroke","xi","yi","windingLine","cubic","quadratic","_x","arc","R","1086","cubicProjectPoint","1087","d","1088","nPoint","mathAtan2","1089","inBundle","1090","fixClipWithShadow","unitX","unitY","1091","1092","polyHelper","1093","interpolate","isLoop","distance","segs","w2","w3","1094","v2Min","v2Max","v2Scale","v2Distance","v2Add","constraint","prevPoint","nextPoint","cps","sub","d0","d1","sum","cp0","1095","1096","1097","pointAt","1098","someVectorAt","isTangent","cpx2","cpy2","cubicDerivativeAt","cpx1","cpy1","quadraticDerivativeAt","curveTool","quadraticSubdivide","cubicSubdivide","tangentAt","1099","1100","paths","_updatePathDirty","dirtyPath","setScale","1101","RadialGradient","1102","getBorderLineDash","1103","1104","platform","navigator","match","blendMode","animationDuration","animationEasing","animationEasingUpdate","progressiveThreshold","hoverLayerThreshold","useUTC","1105","ExtensionAPI","chartInstance","echartsAPIList","1106","OptionManager","_timelineOptions","_mediaList","_mediaDefault","_currentMediaIndices","_optionBackup","_newBaseOption","parseRawOption","isNew","mediaDefault","timelineOptions","mediaList","timelineOpt","timeline","media","singleMedia","preProcess","applyMediaQuery","ecWidth","ecHeight","realMap","aspectratio","applicatable","matched","QUERY_REG","operator","realAttr","toLowerCase","real","expect","indicesEquals","indices1","indices2","oldOption","newCptOpt","oldCptOpt","oldOptionBackup","newParsedOption","isRecreate","optionBackup","timelineModel","getCurrentIndex","1107","compatLayoutProperties","LAYOUT_PROPERTIES","compatStyle","COMPATITABLE_COMPONENTS","COMPATITABLE_SERIES","isTheme","seriesOpt","clockWise","pointerColor","dataRange","visualMap","componentName","1108","compatItemStyle","itemStyleOpt","POSSIBLE_STYLES","normalItemStyleOpt","normal","emphasisItemStyleOpt","emphasis","compatTextStyle","labelOptSingle","TEXT_STYLE_OPTIONS","compatLabelTextStyle","labelOpt","processSeries","upperLabel","edgeLabel","markPoint","markLine","markArea","mpData","mlData","toArr","o","toObj","axes","axisOpt","parallel","parallelOpt","parallelAxisDefault","calendar","calendarOpt","radar","radarOpt","geoOpt","regions","regionObj","1109","makeEventPacket","eveType","cancelBubble","zrX","zrY","gestureEvent","pinchX","pinchY","pinchScale","wheelDelta","zrDelta","zrByTouch","which","EmptyProxy","isHover","displayable","SILENT","Draggable","handlerNames","proxy","painterRoot","_hovered","_lastTouchMoment","_lastX","_lastY","lastHovered","lastHoveredTarget","hovered","hoveredTarget","setCursor","dispatchToElement","mouseout","innerDom","element","toElement","relatedTarget","parentNode","nodeType","dispatch","eventArgs","eventPacket","eachOtherLayer","layer","exclude","hoverCheckResult","_downEl","_downPoint","_upEl","1110","_dragStart","_drag","_dragEnd","param","draggingTarget","_draggingTarget","_y","dropTarget","lastDropTarget","_dropTarget","1111","shapeCompareFunc","timsort","_roots","_displayList","_displayListLen","includeIgnore","updateDisplayList","displayList","_updateAndAddDisplayable","userSetClipPath","currentClipPath","parentClipPath","isGroup","children","_children","__storage","addChildrenToStorage","delChildrenFromStorage","_renderList","displayableSortFunc","1112","Dispatcher","_clips","_running","_time","_pauseStart","clips","deferredEvents","deferredClips","_startLoop","1113","eventNameFix","firefox","processGesture","gestureMgr","_gestureMgr","gestureInfo","recognize","setTouchTimer","instance","_touching","_touchTimer","isPointerFromTouch","pointerType","initDomHandler","makeMouseHandler","touchHandlerNames","domHandlers","pointerHandlerNames","mouseHandlerNames","HandlerDomProxy","mountHandlers","addEventListener","GestureMgr","pointerEventsSupported","touchEventsSupported","removeEventListener","normalizeEvent","pointerEventNames","pointerdown","pointerup","pointermove","pointerout","nm","touchstart","touchmove","touchend","click","handlerDomProxyProto","1114","pointPair","eventUtil","_doTrack","_recognize","touches","trackItem","touch","clientToLocal","recognizers","pinch","pinchEnd","pinchPre","pinchCenter","1115","parseInt10","parseInt","isLayerValid","__builtin__","preProcessLayer","__unusedCount","postProcessLayer","isDisplayableCulled","viewRect","isClipPathChanged","prevClipPaths","doClip","createRoot","domRoot","document","createElement","cssText","Layer","Painter","singleCanvas","nodeName","toUpperCase","_opts","devicePixelRatio","_singleCanvas","rootStyle","innerHTML","zlevelList","_zlevelList","layers","_layers","_layerConfig","_width","_height","mainLayer","initContext","_domRoot","_getSize","appendChild","_progressiveLayers","_hoverlayer","_hoverElements","getType","isSingleCanvas","getViewportRootOffset","viewportRoot","offsetLeft","offsetTop","paintAll","_paintList","_startProgessive","__hoverMir","elMirror","__from","hoverElements","from","hoverLayer","getLayer","originalEl","_doPaintEl","_progressiveToken","_doPaintList","_furtherProgressive","_progress","_clearProgressive","_updateLayerStatus","eachBuiltinLayer","flushProgressiveLayer","currentLayer","currentZLevel","currentProgressiveLayer","layerProgress","progressiveLayerIdx","elZLevel","elFrame","__frame","MAX_PROGRESSIVE_LAYER_NUMBER","renderScope","__progress","__maxProgress","__nextIdxNotProg","forcePaint","prevClipLayer","prevElClipPaths","insertLayer","layersMap","prevLayer","virtual","prevDom","nextSibling","insertBefore","firstChild","eachLayer","getLayers","progressiveLayers","elCountsLastFrame","progressiveElCountsLastFrame","elCount","lastProgressiveKey","progressiveLayerCount","frameCount","elProgress","_clearLayer","layerConfig","delLayer","removeChild","display","clearLayer","getRenderedCanvas","findAndDrawOtherLayer","smaller","larger","intermediateLayer","renderToCanvas","imageLayer","pixelRatio","clearColor","whIdx","cwh","plt","prb","stl","defaultView","getComputedStyle","shadowBlurSize","leftMargin","rightMargin","topMargin","bottomMargin","clearRect","pathTransform","ImageShape","imgShape","1116","returnFalse","createDom","newDom","newDomStyle","setAttribute","domStyle","onselectstart","domBack","ctxBack","motionBlur","lastFrameAlpha","__currentValues","createBackBuffer","clearAll","haveMotionBLur","clearColorGradientOrPattern","__canvasGradient","fillRect","1117","encodeColor","colorAccessPath","visualColorAccessPath","1118","maskColor","mask","Arc","labelRect","animateShape","1119","OrdinalScale","rank","1120","scaleHelper","intervalScaleProto","mathCeil","mathFloor","bisect","TimeScale","stepLvl","_stepLvl","date","formatTime","ONE_HOUR","getFullYear","getMonth","getDate","approxTickNum","approxInterval","scaleLevelsLen","scaleLevels","level","yearSpan","timezoneOffset","getTimezoneOffset","parseDate","methodName","ONE_SECOND","ONE_MINUTE","ONE_DAY","1121","fixRoundingError","originalVal","roundingErrorFix","mathLog","LogScale","$constructor","_originalScale","originalScale","originalExtent","powVal","__fixMin","__fixMax","quantity","err","1122","axisModelCommonMixin","createList","createScale","createScaleByModel","niceScaleExtent","mixinAxisModelCommonMethods","1123","illegalPoint","findPointFromSeries","isIllegalPoint","inputAxesInfo","shouldHide","outputFinder","showValueMap","dataByCoordSys","updaters","showPointer","showTooltip","coordSysContainsPoint","containPoint","inputAxisInfo","findInputAxisInfo","processOnAxis","linkTriggers","tarAxisInfo","tarKey","srcAxisInfo","srcKey","srcValItem","makeMapperParam","updateModelActually","dispatchTooltipActually","dispatchHighDownActually","newValue","dontSnap","buildPayloadsBySeries","payloadBatch","snapToValue","minDist","Number","MAX_VALUE","minDiff","seriesNestestValue","dataIndices","dataDim","getAxisTooltipData","nestestValue","indicesOfNearest","getRawIndex","modelHelper","coordSysItem","coordSysId","coordSysIndex","coordSysType","coordSysMainType","dataByAxis","valueLabelOpt","outputAxesInfo","valItem","escapeConnect","lastHighlights","newHighlights","toHighlight","toDownplay","batch","1124","AxisPointerModel","triggerOn","shadowStyle","icon","1125","AxisPonterView","disopse","_model","1126","showContent","alwaysShowContent","displayMode","confine","showDelay","hideDelay","transitionDuration","enterable","extraCssText","1127","buildTooltipModel","modelCascade","resultModel","refixTooltipPosition","gapH","gapV","getOuterSize","confineTooltipPosition","clientWidth","clientHeight","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","calcTooltipPosition","contentSize","domWidth","domHeight","rectWidth","rectHeight","isCenterAlign","TooltipContent","axisPointerViewHelper","proxyRect","tooltipContent","getDom","_tooltipContent","_tooltipModel","_ecModel","_lastDataByCoordSys","_alwaysShowContent","setEnterable","_initGlobalListener","_keepShow","_tryShow","_hide","_refreshUpdateTimeout","manuallyShowTip","_ticket","_manuallyAxisShowTip","pointInfo","manuallyHideTip","hideLater","_showAxisTooltip","_showSeriesItemTooltip","_showComponentItemTooltip","_showOrMove","_showTimout","singleDefaultHTML","singleParamsList","singleTooltipModel","itemCoordSys","axisValue","seriesDefaultHTML","valueLabel","axisValueLabel","formatTooltip","firstLine","encodeHTML","positionExpr","_updateContentNotChangedOnAxis","_updatePosition","_showTooltipContent","dataModel","dataType","tooltipTrigger","defaultHtml","asyncTicket","subTooltipModel","html","formatTpl","cbTicket","setContent","vAlign","viewSize","lastCoordSys","contentNotChanged","lastItemCoordSys","indexCoordSys","lastDataByAxis","thisItemCoordSys","thisDataByAxis","lastItem","indexAxis","lastIndices","newIndices","lastIdxItem","newIdxItem","1128","assembleTransition","duration","transitionText","vendors","vendorPrefix","assembleFont","assembleCssText","zrColor","toHex","borderName","camelCase","toCamelCase","container","_container","_show","_hideTimeout","onmouseenter","_enterable","_inContent","onmouseleave","_hideDelay","currentStyle","viewportRootOffset","isShow","1129","legendSelectActionHandler","selectedMap","isToggleSelect","isItemSelected","1130","legendModels","1133","featureManager","ToolboxModel","feature","featureOpt","featureName","Feature","itemSize","showTitle","iconStyle","1134","isUserFeatureName","toolboxModel","process","featureNames","oldName","featureOpts","featureModel","onclick","features","unusable","createIconPaths","setIconStatus","iconName","iconPaths","iconStatus","iconStyleModel","icons","getIcons","titles","title","iconStr","__title","_features","_featureNames","titleText","needPutOnTop","topOffset","1135","SaveAsImage","lang","toolbox","saveAsImage","excludeComponents","$a","download","url","getConnectedDataURL","href","MouseEvent","edge","msSaveOrOpenBlob","bstr","atob","u8arr","Uint8Array","charCodeAt","blob","Blob","tab","open","write","evt","view","bubbles","cancelable","dispatchEvent","1136","MagicType","magicType","bar","tiled","availableIcons","seriesOptGenreator","seriesId","radioTypes","generateNewSeriesTypes","newSeriesOpt","categoryAxis","getAxesByScale","boundaryGap","radio","currentType","1137","groupSeries","seriesGroupByCategoryAxis","otherSeries","meta","baseAxis","getBaseAxis","valueAxis","assembleSeriesWithCategoryAxis","tables","valueAxisDim","headers","columns","getRawData","ITEM_SPLITER","items","BLOCK_SPLITER","assembleOtherSeries","vals","argLen","getContentFromModel","trim","isTSVFormat","block","parseTSVContents","tsv","tsvLines","itemSplitRegex","header","parseListContents","hasName","parseContents","blockMetaList","blocks","blockMeta","axisKey","DataView","_dom","tryMergeDataOption","newData","originalData","newVal","original","dataView","readOnly","optionToContent","contentToOption","textareaColor","textareaBorderColor","buttonColor","buttonTextColor","close","viewMain","textarea","htmlOrDom","isDom","buttonContainer","buttonStyle","closeButton","refreshButton","keyCode","selectionStart","selectionEnd","substring","newSeriesOptList","1138","DataZoom","_brushController","_onBrush","_isZoomActive","retrieveAxisSetting","updateBackBtnStatus","updateZoomBtnStatus","zoomActive","dataZoomSelectActive","brushTargetManager","sliderMove","dataZoom","DATA_ZOOM_ID_BASE","zoom","back","handlers","nextActive","_dispatchZoomAction","setBatch","findDataZoom","minMaxSpan","getMinMaxSpan","found","dzModel","addForAxis","dataZoomOpt","axisIndicesName","givenAxisIndices","forEachComponent","newOpt","$fromToolbox","dataZoomOpts","toolboxOpt","1139","1140","calculateDataExtent","seriesExtent","fixExtentByAxis","axisDataLen","setAxisModel","isRestore","percentWindow","_percentWindow","valueWindow","_valueWindow","useOrigin","toFixed","setMinMaxSpan","_minMaxSpan","_dataZoomModel","valueSpan","_dataExtent","asc","_dimName","_axisIndex","getTargetSeriesModels","getOtherAxisModel","otherAxisDim","coordSysIndexName","isCartesian","foundOtherAxisModel","otherAxisModel","calculateDataWindow","percentExtent","boundValue","boundPercent","dataWindow","isInWindow","dataDims","filterSelf","leftOut","rightOut","hasValue","thisHasValue","thisLeftOut","thisRightOut","1141","1142","1143","Restore","1144","dims","coordDims","setItemLayout","1145","isAxisUsedInTheGrid","getLabelUnionRect","axisLabelModel","labelCount","isLabelIgnored","singleRect","union","Grid","_coordsMap","_coordsList","_axesMap","_axesList","_initCartesian","fixAxisOnZero","axesMap","canNotOnZeroToAxis","ifAxisCrossZero","updateAxisTransfrom","coordBase","axisExtentSum","findAxesModels","axesTypes","getReferringComponents","isCartesian2D","Cartesian2D","Axis2D","gridProto","_updateScale","ignoreContainLabel","adjustAxes","axesList","gridRect","labelUnionRect","axesMapOnDim","coordList","convertToPixel","_findConvertTarget","convertFromPixel","coordsList","createAxisCreator","axisPositionUsed","axesCount","addAxis","grids","1146","getAxisType","axisModelCreator","AxisModel","gridIndex","gridId","extraOption","1150","labelDims","otherDimToDataDim","getDimensionInfo","1151","isPointNull","drawSegment","segLen","allLen","smoothMin","smoothMax","smoothMonotone","connectNulls","prevIdx","v2Copy","nextIdx","nextP","ratioNextSeg","prevP","lenPrevSeg","lenNextSeg","scaleAndAdd","getBoundingBox","ptMin","ptMax","pt","stackedOnPoints","stackedOnSmooth","stackedOnBBox","1152","nameRotate","nameTruncate","nameTextStyle","nameGap","axisTick","inside","axisLabel","splitLine","splitArea","areaStyle","timeAxis","logAxis","logBase","1162","registerVisual","registerLayout","1163","SeriesModel","getInitialData","legendHoverLink","clipOverflow","showSymbol","showAllSymbol","sampling","1164","isPointsSame","points1","points2","getSmooth","getAxisExtentWithGap","halfBandWidth","getStackedOnPoints","valueStart","baseDataOffset","stackedOnSameSign","stackedOn","stackedData","createGridClipShape","hasAnimation","xExtent","yExtent","createPolarClipShape","angleAxis","getAngleAxis","radiusAxis","getRadiusAxis","radiusExtent","angleExtent","RADIAN","Sector","createClipShape","turnPointsIntoStep","stepTurnAt","baseIndex","stepPoints","nextPt","stepPt","stepPt2","getVisualGradient","visualMetaList","visualMeta","dimension","stops","stopLen","outerColors","minCoord","maxCoord","coordSpan","gradient","lineAnimationDiff","ChartView","lineGroup","symbolDraw","_symbolDraw","_lineGroup","areaStyleModel","isCoordSysPolar","prevCoordSys","_coordSys","polyline","_polyline","_polygon","isAreaChart","isEmpty","isSymbolIgnore","_getSymbolIgnoreFunc","__temp","_step","_newPolygon","_stackedOnPoints","_points","_updateAnimation","_newPolyline","visualColor","lineJoin","stackedOnCurrent","stackedOnNext","__points","updatedDataInfo","diffStatus","idx1","ptIdx","1165","getStackedOnPoint","diffData","diffResult","oldStackedOnPoints","newStackedOnPoints","oldCoordSys","newCoordSys","currPoints","nextPoints","currStackedPoints","nextStackedPoints","sortedIndices","rawIndices","diffItem","pointAdded","currentPt","rawIndex","sortedCurrPoints","sortedNextPoints","sortedCurrStackedPoints","sortedNextStackedPoints","sortedStatus","1166","samplers","average","nearest","indexSampler","sampler","downSample","1167","Cartesian","axisX","axisY","1168","dimAxisMapper","_axes","_dimList","scaleType","_dataCoordConvert","input","dimList","output","1169","coordExtent","1170","containLabel","1171","1172","axisBuilderAttrs","selfBuilderAttrs","CartesianAxisView","oldAxisGroup","_axisGroup","groupTransition","_splitLine","splitLineModel","lineColors","lineInterval","lineCount","colorIndex","_splitArea","splitAreaModel","areaColors","prevX","prevY","areaInterval","1174","1175","1176","mergeAndNormalizeLayoutParams","raw","getOrient","ScrollableLegendModel","setScrollDataIndex","scrollDataIndex","pageButtonItemGap","pageButtonGap","pageButtonPosition","pageFormatter","pageIcons","horizontal","vertical","pageIconColor","pageIconInactiveColor","pageIconSize","pageTextStyle","1177","LegendView","WH","XY","ScrollableLegendView","_currentIndex","_containerGroup","_controllerGroup","__rectSize","createPageButton","iconIdx","pageDataIndexName","me","_pageGo","controllerGroup","pageTextStyleModel","containerGroup","orientIdx","hw","yx","controllerRect","showController","contentPos","containerPos","controllerPos","clipShape","pageInfo","_getPageInfo","pageIndex","contentPosition","_updatePageInfoView","legendId","canJump","pageText","pageCount","getItemRect","itemRect","pagePrevDataIndex","pageNextDataIndex","targetItemGroup","currDataIndex","containerRectSize","itemLoc","winRect","startIdx","startItem","startRect","1178","327","__webpack_exports__","_classCallCheck","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","Object","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__","__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default","__WEBPACK_IMPORTED_MODULE_2_echarts_lib_component_tooltip__","__WEBPACK_IMPORTED_MODULE_3_echarts_lib_component_grid__","__WEBPACK_IMPORTED_MODULE_4_echarts_lib_chart_line__","__WEBPACK_IMPORTED_MODULE_5_echarts_lib_component_legendScroll__","__WEBPACK_IMPORTED_MODULE_6_echarts_lib_component_toolbox__","_createClass","defineProperties","descriptor","protoProps","staticProps","LineReact","_React$Component","_this","getPrototypeOf","initPie","_props$option","undefined","myChart","ID","onresize","_this2","_props","_props$width","_props$height","ref","969","typeStr","objToString","TYPED_ARRAY","BUILTIN_OBJECT","isPrimitive","targetProp","sourceProp","isBuiltInObject","targetAndSources","overlay","createCanvas","_ctx","baseClazz","F","clazzPrototype","forEach","nativeForEach","nativeMap","reduce","memo","nativeReduce","nativeFilter","find","nativeSlice","ownerDocument","value0","value1","value2","Function","message","setAsPrimitive","primitiveKey","HashMap","[object Function]","[object RegExp]","[object Date]","[object Error]","[object CanvasGradient]","[object CanvasPattern]","[object Image]","[object Canvas]","[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","toString","arrayProto","prefixedKey","removeKey","970","createRegisterEventWithLowercaseName","MessageCenter","ECharts","prioritySortFunc","prio","themeStorage","_throttledZrFlush","backwardCompat","_chartsViews","_chartsMap","_componentsViews","_coordSysMgr","CoordinateSystemManager","createExtensionAPI","_messageCenter","_initEvents","_pendingActions","visualFuncs","dataProcessorFuncs","_onframe","doConvertPixel","coordSysList","updateDirectly","ecIns","callView","__alive","__model","__viewId","doDispatchAction","payloadType","actionWrap","actions","actionInfo","cptType","updateMethod","IN_MAIN_PROCESS","payloads","batched","eventObj","eventObjBatch","isHighDown","action","OPTION_UPDATED","updateMethods","prepareAndUpdate","flushPendingActions","pendingActions","triggerUpdatedEvent","invokeUpdateMethod","chart","updateProgressiveAndBlend","updateHoverLayerStatus","postUpdateFuncs","prepareView","isComponent","viewList","viewMap","viewId","classType","__id","__ecComponentInfo","processData","stackSeriesData","stackedDataMap","previousStack","doLayout","visual","isLayout","doVisualEncoding","excludesLayout","doRender","componentView","chartView","frameDrawNum","needProgressive","ecInstance","coordSysMgr","modelInfo","enableConnect","updateConnectedChartsStatus","charts","STATUS_KEY","eventActionMap","actionType","connectedGroups","makeActionFromEvent","otherCharts","otherChart","colorTool","ACTION_REG","one","echartsProto","notMerge","lazyUpdate","setTheme","getDevicePixelRatio","getDataURL","excludesComponentViews","toDataURL","groupId","canvasList","boundingRect","getBoundingClientRect","targetCanvas","img","containPixel","models","visualType","defaultMainType","indexOfRawIndex","getViewOfComponentModel","getViewOfSeriesModel","colorArr","stringify","background","clearAllVisual","_loadingFX","showLoading","cfg","hideLoading","loadingEffects","weChat","MOUSE_EVENT_NAMES","eveName","isDisposed","_disposed","idBase","groupIdBase","existInstance","getInstanceByDom","connect","disConnect","disconnect","getAttribute","getInstanceById","registerTheme","preprocessorFunc","priority","processorFunc","registerPostUpdate","postUpdateFunc","test","registerCoordinateSystem","getCoordinateSystemDimensions","coordSysCreator","layoutFunc","visualFunc","registerLoading","loadingFx","extendSeriesModel","extendChartView","setCanvasCreator","number","format","FILTER","VISUAL","LAYOUT","GLOBAL","CHART","COMPONENT","BRUSH","971","hasFillOrStroke","fillOrStroke","liftColor","lift","cacheElementStl","__hoverStlDirty","__hoverStl","normalStyle","__normalStl","doSingleEnterHover","__isHover","insideRollbackOpt","rollbackInsideStyle","applyInsideStyle","insideOriginalTextPosition","doSingleLeaveHover","normalStl","doEnterHover","doLeaveHover","setElementHoverStl","hoverStl","onElementMouseOver","__hoverSilentOnTouch","__isEmphasis","onElementMouseOut","enterEmphasis","leaveEmphasis","setTextStyleCommon","EMPTY_OBJ","richResult","globalTextStyle","richItemNames","getRichItemNames","richTextStyle","setTokenTextStyle","forceRich","richItemNameMap","isBlock","getAutoColor","originalTextPosition","insideRollback","disableBox","useInsideStyle","animateOrSetProps","isUpdate","animatableModel","postfix","animationDelay","getAnimationDelayParams","pathTool","Circle","Ring","BezierCurve","CompoundPath","extendShape","extendPath","makePath","resizePath","pathRect","calculateTransform","subPixelOptimize","subPixelOptimizeRect","originX","originY","originWidth","originHeight","positiveOrNegative","doubledPosition","hoverSilentOnTouch","emphasisStyle","normalModel","emphasisModel","normalSpecified","emphasisSpecified","labelDimIndex","showNormal","showEmphasis","baseText","getFormattedLabel","normalStyleText","emphasisStyleText","specifiedTextStyle","setText","defaultColor","gTextStyleModel","ancestor","mat","hBase","vBase","vertex","g1","g2","getAnimatableProps","elMap1","g","elMap","oldEl","newProp","clipRectByRect","targetRect","972","_trim","quantityExponent","LN10","domain","subDomain","subRange","all","returnStr","getPrecision","eIndex","dotIndex","pixelExtent","dataQuantity","sizeQuantity","getPercentWithPrecision","valueList","acc","digits","votesPerQuota","targetSeats","seats","votes","currentSum","NEGATIVE_INFINITY","maxId","MAX_SAFE_INTEGER","radian","pi2","TIME_REG","hour","UTC","nf","exponent","exp10","reformIntervals","littleThan","lg","curr","currClose","isNumeric","973","has","nubmerUtil","defaultEmphasis","subOpts","emphasisOpt","normalOpt","subOptName","dimInfo","dimType","createDataFormatModel","dataFormatMixin","rawDataIndex","getRawDataItem","componentSubType","marker","getTooltipMarker","labelProp","exists","newCptOptions","cptOption","idMap","existCpt","idNum","compressBatches","batchA","batchB","makeMap","sourceBatch","otherMap","otherDataIndices","lenj","mapToArray","isData","mapA","mapB","hostObj","parsedKey","queryType","queryParam","dataDimToCoordDim","getDimension","dimItem","coordDim","coordDimIndex","otherDim","otherDims","974","ArrayCtor","Float32Array","lenSquare","div","dot","distanceSquare","negate","lerp","lengthSquare","distSquare","975","upperCaseFirst","group1","String","TPL_VAR_ALIAS","wrapVar","varName","seriesIdx","tpl","paramsList","encode","seriesLen","alias","formatTplSimple","s2d","isUTC","utc","substr","976","os","ua","userAgent","977","doGet","pathArr","getParent","getParentMethod","ignoreParent","parsePath","thisParentModel","setReadOnly","customizeGetParent","978","pathContain","pathProxyForDraw","hasFillGradient","hasStrokeGradient","hasFillPattern","hasStrokePattern","_fillGradient","_strokeGradient","ctxLineDash","setLineDash","setLineDashOffset","shapeCfg","needsUpdateRect","rectWithStroke","_rectWithStroke","lineScale","localPos","Sub","defaultShape","thisShape","979","boxLayout","maxHeight","currentLineMaxSize","nextX","nextY","nextChild","nextChildRect","moveX","moveY","LOCATION_PARAMS","HV_NAMES","vbox","hbox","getAvailableSize","containerRect","containerWidth","containerHeight","verticalMargin","horizontalMargin","hv","boundingMode","elPos","sizeCalculable","hvIdx","targetOption","newParams","newValueCount","merged","mergedValueCount","hasProp","hResult","vResult","copyLayoutParams","980","lt","rb","lb","rt","maxX","maxY","ax0","ax1","ay0","ay1","bx0","bx1","by0","by1","plain","981","getDependencies","deps","getClassesByMainType","arrayPush","hasOwn","optList","Class","982","checkClassType","IS_CONTAINER","RootClass","mandatoryMethods","ExtendedClass","makeContainer","registerClass","componentMainType","throwWhenNotFound","originalExtend","983","getTextWidth","textWidthCache","measureText","textWidthCacheCounter","TEXT_CACHE_MAX","getRichTextRect","getPlainTextRect","halfHeight","prepareTruncateOptions","truncateSingleLine","maxIterations","cnCharWidth","ascCharWidth","ellipsisWidth","textLine","subLength","estimateLength","charCode","getLineHeight","truncOuterHeight","truncOuterWidth","lastIndex","STYLE_REG","matchedIndex","pushTokens","contentHeight","stlPadding","truncateWidth","truncateHeight","tokenHeight","tokenWidth","tokenWidthNotSpecified","percentWidth","bgImg","paddingW","remianTruncWidth","isEmptyStr","strs","tokensLen","984","m1","m2","out0","out1","out2","out3","out4","out5","rad","aa","ac","atx","ab","ad","aty","st","ct","vx","vy","det","985","transferProperties","TRANSFERABLE_PROPERTIES","__wrappedMethods","DefaultDataProvider","dataArray","_array","normalizeDimensions","cloneListForMapAndSample","excludeDimensions","allDimensions","_storage","originalStorage","dimStore","globalObj","Float64Array","Int32Array","dataCtors","float","int","ordinal","pure","getItem","dimensionInfos","dimensionNames","dimensionName","dimensionInfo","_dimensionInfos","_nameList","_idList","_optionModels","_visual","_layout","_itemVisuals","_itemLayouts","_graphicEls","_rawData","listProto","isDataArray","nameDimIdx","dimensionInfoMap","idList","nameRepeatCount","itemName","DataCtor","stackedValue","dimData","dimExtent","getSum","maxDistance","nearestIndices","rawIdx","dimSize","keep","tmpRetValue","retValue","sampleValue","sampleIndex","targetStorage","originalIndices","frameValues","frameIndices","frameSize","otherList","otherIdList","setLayout","getLayout","clearItemLayouts","itemVisual","setItemDataAndSeriesIndex","cloneShallow","dimensionInfoList","wrapMethod","injectFunction","originalMethod","TRANSFERABLE_METHODS","CHANGABLE_METHODS","986","getScaleExtent","tickCoords","isAxisHorizontal","textSpaceTakenRect","autoLabelInterval","accumulatedLabelInterval","labelFormatter","987","ctor","988","calculate","defaultGetZrXY","layerX","layerY","clientX","clientY","targetTouches","changedTouches","detail","button","MOUSE_EVENT_REG","isDomLevel2","attachEvent","detachEvent","notLeftMouse","stopPropagation","returnValue","989","isAroundZero","onet","B","t1","disc","K","discSqrt","Y1","Y2","ONE_THIRD","T","ASqrt","THREE_SQRT","p01","p12","p23","p012","p123","p0123","d2","_v0","_t","_v1","v2DistSquare","EPSILON_NUMERIC","_v2","divider","v2Create","990","arrySlice","_$handlers","_h","newList","triggerWithContext","991","clampCssByte","clampCssAngle","clampCssFloat","parseCssInt","parseCssFloat","cssHueToRgb","lerpNumber","setRgba","copyRgba","putToCache","colorStr","rgbaArr","lastRemovedArr","colorCache","cached","kCSSColorTable","op","ep","fname","alpha","hsla2rgba","iv","hsla","rgba2hsla","H","S","G","vMin","vMax","deltaR","deltaG","deltaB","fastLerp","normalizedValue","colors","leftColor","rightColor","dv","fullOutput","modifyHSL","modifyAlpha","arrColor","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fastMapToColor","mapToColor","992","colorPaletteMixin","themeSubType","fillDataTextStyle","newSeriesOption","getLinkedData","multipleSeries","formattedValue","setEachItem","dimIdx","valStr","vertially","tooltipName","tooltipDims","colorEl","animationEnabled","993","sysDims","applyDim","OTHER_DIMS","coordDimNameMap","genName","fromZero","dataDimNameMap","dimCount","retrieveValue","sysDimItem","sysDimItemDimsDef","dimDefItem","userDimName","resultDimIdx","availDimIdx","sysDimIndex","sysDimItemOtherDims","extra","extraPrefix","extraFromZero","isExtraCoord","guessOrdinal","994","Triangle","Diamond","Pin","tanX","tanY","cpLen","cpLen2","Arrow","symbolCtors","roundRect","square","circle","diamond","pin","arrow","triangle","symbolShapeMakers","symbolBuildProxies","proxySymbol","symbolPathSetColor","symbolStyle","symbolShape","__isEmptyBrush","995","996","_coordinateSystems","coordinateSystemCreators","coordinateSystems","creater","coordinateSystemCreator","997","min2","max2","mathAbs","hasTypedArray","notSaveData","_saveData","_xi","_yi","_x0","_y0","_ux","_uy","_lineDash","_dashOffset","_dashIdx","_dashSum","exceedUnit","_needsDash","_dashedLineTo","_dashedBezierTo","_dashedQuadraticTo","arcTo","lineDashSum","appendSize","appendPathData","_expandData","_prevCmd","dash","dashSum","nDash","bezierLen","tmpLen","ux","uy","scaleX","scaleY","isEllipse","998","999","_doAdd","addBefore","includeChildren","tmpMat","childRect"],"mappings":"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","file":"static/js/LineReact.04a0f4e8.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 1000:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(999);\n    var componentUtil = __webpack_require__(1014);\n    var clazzUtil = __webpack_require__(982);\n    var modelUtil = __webpack_require__(973);\n    var zrUtil = __webpack_require__(969);\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n/***/ }),\n\n/***/ 1001:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    /**\n     * @param {Array} oldArr\n     * @param {Array} newArr\n     * @param {Function} oldKeyGetter\n     * @param {Function} newKeyGetter\n     * @param {Object} [context] Can be visited by this.context in callback.\n     */\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n\n        this.context = context;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\n        for (var i = 0; i < arr.length; i++) {\n            // Add prefix to avoid conflict with Object.prototype.\n            var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n/***/ }),\n\n/***/ 1002:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = __webpack_require__(982);\n\n    /**\n     * @param {Object} [setting]\n     */\n    function Scale(setting) {\n        this._setting = setting || {};\n\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.getSetting = function (name) {\n        return this._setting[name];\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.isBlank = function () {\n        return this._isBlank;\n    },\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.setBlank = function (isBlank) {\n        this._isBlank = isBlank;\n    };\n\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n/***/ }),\n\n/***/ 1003:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var Model = __webpack_require__(977);\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n\n    var helper = {};\n\n    // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n    // allAxesInfo should be updated when setOption performed.\n    helper.collect = function (ecModel, api) {\n        var result = {\n            /**\n             * key: makeKey(axis.model)\n             * value: {\n             *      axis,\n             *      coordSys,\n             *      axisPointerModel,\n             *      triggerTooltip,\n             *      involveSeries,\n             *      snap,\n             *      seriesModels,\n             *      seriesDataCount\n             * }\n             */\n            axesInfo: {},\n            seriesInvolved: false,\n            /**\n             * key: makeKey(coordSys.model)\n             * value: Object: key makeKey(axis.model), value: axisInfo\n             */\n            coordSysAxesInfo: {},\n            coordSysMap: {}\n        };\n\n        collectAxesInfo(result, ecModel, api);\n\n        // Check seriesInvolved for performance, in case too many series in some chart.\n        result.seriesInvolved && collectSeriesInfo(result, ecModel);\n\n        return result;\n    };\n\n    function collectAxesInfo(result, ecModel, api) {\n        var globalTooltipModel = ecModel.getComponent('tooltip');\n        var globalAxisPointerModel = ecModel.getComponent('axisPointer');\n        // links can only be set on global.\n        var linksOption = globalAxisPointerModel.get('link', true) || [];\n        var linkGroups = [];\n\n        // Collect axes info.\n        each(api.getCoordinateSystems(), function (coordSys) {\n            // Some coordinate system do not support axes, like geo.\n            if (!coordSys.axisPointerEnabled) {\n                return;\n            }\n\n            var coordSysKey = makeKey(coordSys.model);\n            var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n            result.coordSysMap[coordSysKey] = coordSys;\n\n            // Set tooltip (like 'cross') is a convienent way to show axisPointer\n            // for user. So we enable seting tooltip on coordSys model.\n            var coordSysModel = coordSys.model;\n            var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n\n            each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null));\n\n            // If axis tooltip used, choose tooltip axis for each coordSys.\n            // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n            if (coordSys.getTooltipAxes\n                && globalTooltipModel\n                // If tooltip.showContent is set as false, tooltip will not\n                // show but axisPointer will show as normal.\n                && baseTooltipModel.get('show')\n            ) {\n                // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n                // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n                var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n                var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n                var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n                if (triggerAxis || cross) {\n                    each(tooltipAxes.baseAxes, curry(\n                        saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis\n                    ));\n                }\n                if (cross) {\n                    each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n                }\n            }\n\n            // fromTooltip: true | false | 'cross'\n            // triggerTooltip: true | false | null\n            function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n                var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n\n                var axisPointerShow = axisPointerModel.get('show');\n                if (!axisPointerShow || (\n                    axisPointerShow === 'auto'\n                    && !fromTooltip\n                    && !isHandleTrigger(axisPointerModel)\n                )) {\n                    return;\n                }\n\n                if (triggerTooltip == null) {\n                    triggerTooltip = axisPointerModel.get('triggerTooltip');\n                }\n\n                axisPointerModel = fromTooltip\n                    ? makeAxisPointerModel(\n                        axis, baseTooltipModel, globalAxisPointerModel, ecModel,\n                        fromTooltip, triggerTooltip\n                    )\n                    : axisPointerModel;\n\n                var snap = axisPointerModel.get('snap');\n                var key = makeKey(axis.model);\n                var involveSeries = triggerTooltip || snap || axis.type === 'category';\n\n                // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n                var axisInfo = result.axesInfo[key] = {\n                    key: key,\n                    axis: axis,\n                    coordSys: coordSys,\n                    axisPointerModel: axisPointerModel,\n                    triggerTooltip: triggerTooltip,\n                    involveSeries: involveSeries,\n                    snap: snap,\n                    useHandle: isHandleTrigger(axisPointerModel),\n                    seriesModels: []\n                };\n                axesInfoInCoordSys[key] = axisInfo;\n                result.seriesInvolved |= involveSeries;\n\n                var groupIndex = getLinkGroupIndex(linksOption, axis);\n                if (groupIndex != null) {\n                    var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {axesInfo: {}});\n                    linkGroup.axesInfo[key] = axisInfo;\n                    linkGroup.mapper = linksOption[groupIndex].mapper;\n                    axisInfo.linkGroup = linkGroup;\n                }\n            }\n        });\n    }\n\n    function makeAxisPointerModel(\n        axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip\n    ) {\n        var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n        var volatileOption = {};\n\n        each(\n            [\n                'type', 'snap', 'lineStyle', 'shadowStyle', 'label',\n                'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'\n            ],\n            function (field) {\n                volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n            }\n        );\n\n        // category axis do not auto snap, otherwise some tick that do not\n        // has value can not be hovered. value/time/log axis default snap if\n        // triggered from tooltip and trigger tooltip.\n        volatileOption.snap = axis.type !== 'category' && !!triggerTooltip;\n\n        // Compatibel with previous behavior, tooltip axis do not show label by default.\n        // Only these properties can be overrided from tooltip to axisPointer.\n        if (tooltipAxisPointerModel.get('type') === 'cross') {\n            volatileOption.type = 'line';\n        }\n        var labelOption = volatileOption.label || (volatileOption.label = {});\n        // Follow the convention, do not show label when triggered by tooltip by default.\n        labelOption.show == null && (labelOption.show = false);\n\n        if (fromTooltip === 'cross') {\n            // When 'cross', both axes show labels.\n            labelOption.show = true;\n            // If triggerTooltip, this is a base axis, which should better not use cross style\n            // (cross style is dashed by default)\n            if (!triggerTooltip) {\n                var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n                crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n            }\n        }\n\n        return axis.model.getModel(\n            'axisPointer',\n            new Model(volatileOption, globalAxisPointerModel, ecModel)\n        );\n    }\n\n    function collectSeriesInfo(result, ecModel) {\n        // Prepare data for axis trigger\n        ecModel.eachSeries(function (seriesModel) {\n\n            // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n            var coordSys = seriesModel.coordinateSystem;\n            var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n            var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n            if (!coordSys\n                || seriesTooltipTrigger === 'none'\n                || seriesTooltipTrigger === false\n                || seriesTooltipTrigger === 'item'\n                || seriesTooltipShow === false\n                || seriesModel.get('axisPointer.show', true) === false\n            ) {\n                return;\n            }\n\n            each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n                var axis = axisInfo.axis;\n                if (coordSys.getAxis(axis.dim) === axis) {\n                    axisInfo.seriesModels.push(seriesModel);\n                    axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n                    axisInfo.seriesDataCount += seriesModel.getData().count();\n                }\n            });\n\n        }, this);\n    }\n\n    /**\n     * For example:\n     * {\n     *     axisPointer: {\n     *         links: [{\n     *             xAxisIndex: [2, 4],\n     *             yAxisIndex: 'all'\n     *         }, {\n     *             xAxisId: ['a5', 'a7'],\n     *             xAxisName: 'xxx'\n     *         }]\n     *     }\n     * }\n     */\n    function getLinkGroupIndex(linksOption, axis) {\n        var axisModel = axis.model;\n        var dim = axis.dim;\n        for (var i = 0; i < linksOption.length; i++) {\n            var linkOption = linksOption[i] || {};\n            if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id)\n                || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex)\n                || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)\n            ) {\n                return i;\n            }\n        }\n    }\n\n    function checkPropInLink(linkPropValue, axisPropValue) {\n        return linkPropValue === 'all'\n            || (zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0)\n            || linkPropValue === axisPropValue;\n    }\n\n    helper.fixValue = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        if (!axisInfo) {\n            return;\n        }\n\n        var axisPointerModel = axisInfo.axisPointerModel;\n        var scale = axisInfo.axis.scale;\n        var option = axisPointerModel.option;\n        var status = axisPointerModel.get('status');\n        var value = axisPointerModel.get('value');\n\n        // Parse init value for category and time axis.\n        if (value != null) {\n            value = scale.parse(value);\n        }\n\n        var useHandle = isHandleTrigger(axisPointerModel);\n        // If `handle` used, `axisPointer` will always be displayed, so value\n        // and status should be initialized.\n        if (status == null) {\n            option.status = useHandle ? 'show' : 'hide';\n        }\n\n        var extent = scale.getExtent().slice();\n        extent[0] > extent[1] && extent.reverse();\n\n        if (// Pick a value on axis when initializing.\n            value == null\n            // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n            // where we should re-pick a value to keep `handle` displaying normally.\n            || value > extent[1]\n        ) {\n            // Make handle displayed on the end of the axis when init, which looks better.\n            value = extent[1];\n        }\n        if (value < extent[0]) {\n            value = extent[0];\n        }\n\n        option.value = value;\n\n        if (useHandle) {\n            option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n        }\n    };\n\n    helper.getAxisInfo = function (axisModel) {\n        var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n        return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n    };\n\n    helper.getAxisPointerModel = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        return axisInfo && axisInfo.axisPointerModel;\n    };\n\n    function isHandleTrigger(axisPointerModel) {\n        return !!axisPointerModel.get('handle.show');\n    }\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @return {string} unique key\n     */\n    var makeKey = helper.makeKey = function (model) {\n        return model.type + '||' + model.id;\n    };\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports, __webpack_require__) {\n\n// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = __webpack_require__(969);\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes, includes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if ((excludes && zrUtil.indexOf(excludes, propName) >= 0)\n                    || (includes && zrUtil.indexOf(includes, propName) < 0)\n                ) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n/***/ }),\n\n/***/ 1005:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var numberUtil = __webpack_require__(972);\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = __webpack_require__(969);\n    var axisHelper = __webpack_require__(986);\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._labelInterval;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            return this._extent.slice();\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n\n        /**\n         * Convert pixel point to data in axis\n         * @param {Array.<number>} point\n         * @param  {boolean} clamp\n         * @return {number} data\n         */\n        pointToData: function (point, clamp) {\n            // Should be implemented in derived class if necessary.\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * Get interval of the axis label.\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                var axisModel = this.model;\n                var labelModel = axisModel.getModel('axisLabel');\n                var interval = labelModel.get('interval');\n                if (!(this.type === 'category' && interval === 'auto')) {\n                    labelInterval = interval === 'auto' ? 0 : interval;\n                }\n                else if (this.isHorizontal){\n                    labelInterval = axisHelper.getAxisLabelInterval(\n                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n                        axisModel.getFormattedLabels(),\n                        labelModel.getFont(),\n                        this.isHorizontal()\n                    );\n                }\n                this._labelInterval = labelInterval;\n            }\n            return labelInterval;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n/***/ }),\n\n/***/ 1006:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var List = __webpack_require__(985);\n    var completeDimensions = __webpack_require__(993);\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var CoordinateSystem = __webpack_require__(996);\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        var completeDimOpt = {\n            encodeDef: seriesModel.get('encode'),\n            dimsDef: seriesModel.get('dimensions')\n        };\n\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel, completeDimOpt);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && (\n                registeredCoordSys.getDimensionsInfo\n                    ? registeredCoordSys.getDimensionsInfo()\n                    : registeredCoordSys.dimensions.slice()\n            )) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n        }\n\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel, completeDimOpt) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel, completeDimOpt) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, completeDimOpt)\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n/***/ }),\n\n/***/ 1007:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var Style = __webpack_require__(1029);\n\n    var Element = __webpack_require__(1030);\n    var RectText = __webpack_require__(1057);\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style, this);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj, this);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n/***/ }),\n\n/***/ 1008:\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n\n    };\n\n    module.exports = Gradient;\n\n\n/***/ }),\n\n/***/ 1009:\n/***/ (function(module, exports) {\n\n\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n        var debounceNextCall;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            var thisDelay = debounceNextCall || delay;\n            var thisDebounce = debounceNextCall || debounce;\n            debounceNextCall = null;\n            diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;\n\n            clearTimeout(timer);\n\n            if (thisDebounce) {\n                timer = setTimeout(exec, thisDelay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        /**\n         * Enable debounce once.\n         */\n        cb.debounceNextCall = function (debounceDelay) {\n            debounceNextCall = debounceDelay;\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n/***/ }),\n\n/***/ 1010:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = __webpack_require__(972);\n    var formatUtil = __webpack_require__(975);\n    var Scale = __webpack_require__(1002);\n    var helper = __webpack_require__(1039);\n\n    var roundNumber = numberUtil.round;\n\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        _intervalPrecision: 2,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n\n            this._intervalPrecision = helper.getIntervalPrecision(interval);\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            return helper.intervalScaleGetTicks(\n                this._interval, this._extent, this._niceExtent, this._intervalPrecision\n            );\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} data\n         * @param {Object} [opt]\n         * @param {number|string} [opt.precision] If 'auto', use nice presision.\n         * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n         * @return {string}\n         */\n        getLabel: function (data, opt) {\n            if (data == null) {\n                return '';\n            }\n\n            var precision = opt && opt.precision;\n\n            if (precision == null) {\n                precision = numberUtil.getPrecisionSafe(data) || 0;\n            }\n            else if (precision === 'auto') {\n                // Should be more precise then tick.\n                precision = this._intervalPrecision;\n            }\n\n            // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n            // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n            data = roundNumber(data, precision, true);\n\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         * @param {number} [minInterval]\n         * @param {number} [maxInterval]\n         */\n        niceTicks: function (splitNumber, minInterval, maxInterval) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            var result = helper.intervalScaleNiceTicks(\n                extent, splitNumber, minInterval, maxInterval\n            );\n\n            this._intervalPrecision = result.intervalPrecision;\n            this._interval = result.interval;\n            this._niceExtent = result.niceTickExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {Object} opt\n         * @param {number} [opt.splitNumber = 5] Given approx tick number\n         * @param {boolean} [opt.fixMin=false]\n         * @param {boolean} [opt.fixMax=false]\n         * @param {boolean} [opt.minInterval]\n         * @param {boolean} [opt.maxInterval]\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!opt.fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n/***/ }),\n\n/***/ 1011:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var formatUtil = __webpack_require__(975);\n    var graphic = __webpack_require__(971);\n    var Model = __webpack_require__(977);\n    var numberUtil = __webpack_require__(972);\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = __webpack_require__(974);\n    var matrix = __webpack_require__(984);\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotate] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     * @param {number} [opt.nameTruncateMaxWidth]\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTickLabel: function () {\n            var axisModel = this.axisModel;\n            var opt = this.opt;\n\n            var tickEls = buildAxisTick(this, axisModel, opt);\n            var labelEls = buildAxisLabel(this, axisModel, opt);\n\n            fixMinMaxLabelShow(axisModel, labelEls, tickEls);\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (isNameLocationCenter(nameLocation)) {\n                labelLayout = innerTextLayout(\n                    opt.rotation,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(\n                opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth\n            );\n            // FIXME\n            // truncate rich text? (consider performance)\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            graphic.setTextStyle(textEl.style, textStyleModel, {\n                text: truncatedText,\n                textFont: textFont,\n                textFill: textStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color'),\n                textAlign: labelLayout.textAlign,\n                textVerticalAlign: labelLayout.textVerticalAlign\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @public\n     * @static\n     * @param {Object} opt\n     * @param {number} axisRotation in radian\n     * @param {number} textRotation in radian\n     * @param {number} direction\n     * @return {Object} {\n     *  rotation, // according to axis\n     *  textAlign,\n     *  textVerticalAlign\n     * }\n     */\n    var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - axisRotation);\n        var textAlign;\n        var textVerticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    };\n\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var textVerticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            textVerticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            textVerticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {\n        // If min or max are user set, we need to check\n        // If the tick on min(max) are overlap on their neighbour tick\n        // If they are overlapped, we need to hide the min(max) tick label\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        // FIXME\n        // Have not consider onBand yet, where tick els is more than label els.\n\n        labelEls = labelEls || [];\n        tickEls = tickEls || [];\n\n        var firstLabel = labelEls[0];\n        var nextLabel = labelEls[1];\n        var lastLabel = labelEls[labelEls.length - 1];\n        var prevLabel = labelEls[labelEls.length - 2];\n\n        var firstTick = tickEls[0];\n        var nextTick = tickEls[1];\n        var lastTick = tickEls[tickEls.length - 1];\n        var prevTick = tickEls[tickEls.length - 2];\n\n        if (showMinLabel === false) {\n            ignoreEl(firstLabel);\n            ignoreEl(firstTick);\n        }\n        else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\n            if (showMinLabel) {\n                ignoreEl(nextLabel);\n                ignoreEl(nextTick);\n            }\n            else {\n                ignoreEl(firstLabel);\n                ignoreEl(firstTick);\n            }\n        }\n\n        if (showMaxLabel === false) {\n            ignoreEl(lastLabel);\n            ignoreEl(lastTick);\n        }\n        else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\n            if (showMaxLabel) {\n                ignoreEl(prevLabel);\n                ignoreEl(prevTick);\n            }\n            else {\n                ignoreEl(lastLabel);\n                ignoreEl(lastTick);\n            }\n        }\n    }\n\n    function ignoreEl(el) {\n        el && (el.ignore = true);\n    }\n\n    function isTwoLabelOverlapped(current, next, labelLayout) {\n        // current and next has the same rotation.\n        var firstRect = current && current.getBoundingRect().clone();\n        var nextRect = next && next.getBoundingRect().clone();\n\n        if (!firstRect || !nextRect) {\n            return;\n        }\n\n        // When checking intersect of two rotated labels, we use mRotationBack\n        // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.\n        var mRotationBack = matrix.identity([]);\n        matrix.rotate(mRotationBack, mRotationBack, -current.rotation);\n\n        firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));\n        nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));\n\n        return firstRect.intersect(nextRect);\n    }\n\n    function isNameLocationCenter(nameLocation) {\n        return nameLocation === 'middle' || nameLocation === 'center';\n    }\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (\n        axis,\n        i,\n        interval,\n        ticksCnt,\n        showMinLabel,\n        showMaxLabel\n    ) {\n        if (i === 0 && showMinLabel || i === ticksCnt - 1 && showMaxLabel) {\n            return false;\n        }\n\n        // FIXME\n        // Have not consider label overlap (if label is too long) yet.\n\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    function buildAxisTick(axisBuilder, axisModel, opt) {\n        var axis = axisModel.axis;\n\n        if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {\n            return;\n        }\n\n        var tickModel = axisModel.getModel('axisTick');\n\n        var lineStyleModel = tickModel.getModel('lineStyle');\n        var tickLen = tickModel.get('length');\n\n        var tickInterval = getInterval(tickModel, opt.labelInterval);\n        var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n        // FIXME\n        // Corresponds to ticksCoords ?\n        var ticks = axis.scale.getTicks();\n\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        var pt1 = [];\n        var pt2 = [];\n        var matrix = axisBuilder._transform;\n\n        var tickEls = [];\n\n        var ticksCnt = ticksCoords.length;\n        for (var i = 0; i < ticksCnt; i++) {\n            // Only ordinal scale support tick interval\n            if (ifIgnoreOnTick(\n                axis, i, tickInterval, ticksCnt,\n                showMinLabel, showMaxLabel\n            )) {\n                continue;\n            }\n\n            var tickCoord = ticksCoords[i];\n\n            pt1[0] = tickCoord;\n            pt1[1] = 0;\n            pt2[0] = tickCoord;\n            pt2[1] = opt.tickDirection * tickLen;\n\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n            // Tick line, Not use group transform to have better line draw\n            var tickEl = new graphic.Line(graphic.subPixelOptimizeLine({\n                // Id for animation\n                anid: 'tick_' + ticks[i],\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.defaults(\n                    lineStyleModel.getLineStyle(),\n                    {\n                        stroke: axisModel.get('axisLine.lineStyle.color')\n                    }\n                ),\n                z2: 2,\n                silent: true\n            }));\n            axisBuilder.group.add(tickEl);\n            tickEls.push(tickEl);\n        }\n\n        return tickEls;\n    }\n\n    function buildAxisLabel(axisBuilder, axisModel, opt) {\n        var axis = axisModel.axis;\n        var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n        if (!show || axis.scale.isBlank()) {\n            return;\n        }\n\n        var labelModel = axisModel.getModel('axisLabel');\n        var labelMargin = labelModel.get('margin');\n        var ticks = axis.scale.getTicks();\n        var labels = axisModel.getFormattedLabels();\n\n        // Special label rotate.\n        var labelRotation = (\n            retrieve(opt.labelRotate, labelModel.get('rotate')) || 0\n        ) * PI / 180;\n\n        var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);\n        var categoryData = axisModel.get('data');\n\n        var labelEls = [];\n        var silent = isSilent(axisModel);\n        var triggerEvent = axisModel.get('triggerEvent');\n\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        zrUtil.each(ticks, function (tickVal, index) {\n            if (ifIgnoreOnTick(\n                axis, index, opt.labelInterval, ticks.length,\n                showMinLabel, showMaxLabel\n            )) {\n                    return;\n            }\n\n            var itemLabelModel = labelModel;\n            if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                itemLabelModel = new Model(\n                    categoryData[tickVal].textStyle, labelModel, axisModel.ecModel\n                );\n            }\n\n            var textColor = itemLabelModel.getTextColor()\n                || axisModel.get('axisLine.lineStyle.color');\n\n            var tickCoord = axis.dataToCoord(tickVal);\n            var pos = [\n                tickCoord,\n                opt.labelOffset + opt.labelDirection * labelMargin\n            ];\n            var labelStr = axis.scale.getLabel(tickVal);\n\n            var textEl = new graphic.Text({\n                // Id for animation\n                anid: 'label_' + tickVal,\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: silent,\n                z2: 10\n            });\n\n            graphic.setTextStyle(textEl.style, itemLabelModel, {\n                text: labels[index],\n                textAlign: itemLabelModel.getShallow('align', true)\n                    || labelLayout.textAlign,\n                textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true)\n                    || itemLabelModel.getShallow('baseline', true)\n                    || labelLayout.textVerticalAlign,\n                textFill: typeof textColor === 'function'\n                    ? textColor(\n                        // (1) In category axis with data zoom, tick is not the original\n                        // index of axis.data. So tick should not be exposed to user\n                        // in category axis.\n                        // (2) Compatible with previous version, which always returns labelStr.\n                        // But in interval scale labelStr is like '223,445', which maked\n                        // user repalce ','. So we modify it to return original val but remain\n                        // it as 'string' to avoid error in replacing.\n                        axis.type === 'category' ? labelStr : axis.type === 'value' ? tickVal + '' : tickVal,\n                        index\n                    )\n                    : textColor\n            });\n\n            // Pack data for mouse event\n            if (triggerEvent) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisLabel';\n                textEl.eventData.value = labelStr;\n            }\n\n            // FIXME\n            axisBuilder._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            labelEls.push(textEl);\n            axisBuilder.group.add(textEl);\n\n            textEl.decomposeTransform();\n\n        });\n\n        return labelEls;\n    }\n\n\n    module.exports = AxisBuilder;\n\n\n\n/***/ }),\n\n/***/ 1012:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var axisPointerModelHelper = __webpack_require__(1003);\n\n    /**\n     * Base class of AxisView.\n     */\n    var AxisView = __webpack_require__(970).extendComponentView({\n\n        type: 'axis',\n\n        /**\n         * @private\n         */\n        _axisPointer: null,\n\n        /**\n         * @protected\n         * @type {string}\n         */\n        axisPointerClass: null,\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n            // FIXME\n            // This process should proformed after coordinate systems updated\n            // (axis scale updated), and should be performed each time update.\n            // So put it here temporarily, although it is not appropriate to\n            // put a model-writing procedure in `view`.\n            this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n\n            AxisView.superApply(this, 'render', arguments);\n\n            updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n        },\n\n        /**\n         * Action handler.\n         * @public\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} payload\n         */\n        updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n            updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            var axisPointer = this._axisPointer;\n            axisPointer && axisPointer.remove(api);\n            AxisView.superApply(this, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            disposeAxisPointer(this, api);\n            AxisView.superApply(this, 'dispose', arguments);\n        }\n\n    });\n\n    function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n        var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n        if (!Clazz) {\n            return;\n        }\n        var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n        axisPointerModel\n            ? (axisView._axisPointer || (axisView._axisPointer = new Clazz()))\n                .render(axisModel, axisPointerModel, api, forceRender)\n            : disposeAxisPointer(axisView, api);\n    }\n\n    function disposeAxisPointer(axisView, ecModel, api) {\n        var axisPointer = axisView._axisPointer;\n        axisPointer && axisPointer.dispose(ecModel, api);\n        axisView._axisPointer = null;\n    }\n\n    var axisPointerClazz = [];\n\n    AxisView.registerAxisPointerClass = function (type, clazz) {\n        if (__DEV__) {\n            if (axisPointerClazz[type]) {\n                throw new Error('axisPointer ' + type + ' exists');\n            }\n        }\n        axisPointerClazz[type] = clazz;\n    };\n\n    AxisView.getAxisPointerClass = function (type) {\n        return type && axisPointerClazz[type];\n    };\n\n    module.exports = AxisView;\n\n\n/***/ }),\n\n/***/ 1013:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var LRU = __webpack_require__(1028);\n    var globalImageCache = new LRU(50);\n\n    var helper = {};\n\n    /**\n     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n     */\n    helper.findExistImage = function (newImageOrSrc) {\n        if (typeof newImageOrSrc === 'string') {\n            var cachedImgObj = globalImageCache.get(newImageOrSrc);\n            return cachedImgObj && cachedImgObj.image;\n        }\n        else {\n            return newImageOrSrc;\n        }\n    };\n\n    /**\n     * Caution: User should cache loaded images, but not just count on LRU.\n     * Consider if required images more than LRU size, will dead loop occur?\n     *\n     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n     * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.\n     * @param {module:zrender/Element} [hostEl] For calling `dirty`.\n     * @param {Function} [cb] params: (image, cbPayload)\n     * @param {Object} [cbPayload] Payload on cb calling.\n     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n     */\n    helper.createOrUpdateImage = function (newImageOrSrc, image, hostEl, cb, cbPayload) {\n        if (!newImageOrSrc) {\n            return image;\n        }\n        else if (typeof newImageOrSrc === 'string') {\n\n            // Image should not be loaded repeatly.\n            if ((image && image.__zrImageSrc === newImageOrSrc) || !hostEl) {\n                return image;\n            }\n\n            // Only when there is no existent image or existent image src\n            // is different, this method is responsible for load.\n            var cachedImgObj = globalImageCache.get(newImageOrSrc);\n\n            var pendingWrap = {hostEl: hostEl, cb: cb, cbPayload: cbPayload};\n\n            if (cachedImgObj) {\n                image = cachedImgObj.image;\n                !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);\n            }\n            else {\n                !image && (image = new Image());\n                image.onload = imageOnLoad;\n\n                globalImageCache.put(\n                    newImageOrSrc,\n                    image.__cachedImgObj = {\n                        image: image,\n                        pending: [pendingWrap]\n                    }\n                );\n\n                image.src = image.__zrImageSrc = newImageOrSrc;\n            }\n\n            return image;\n        }\n        // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas\n        else {\n            return newImageOrSrc;\n        }\n    };\n\n    function imageOnLoad() {\n        var cachedImgObj = this.__cachedImgObj;\n        this.onload = this.__cachedImgObj = null;\n\n        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n            var pendingWrap = cachedImgObj.pending[i];\n            var cb = pendingWrap.cb;\n            cb && cb(this, pendingWrap.cbPayload);\n            pendingWrap.hostEl.dirty();\n        }\n        cachedImgObj.pending.length = 0;\n    }\n\n    var isImageReady = helper.isImageReady = function (image) {\n        return image && image.width && image.height;\n    };\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ 1014:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var clazz = __webpack_require__(982);\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n/***/ }),\n\n/***/ 1015:\n/***/ (function(module, exports) {\n\n// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n/***/ }),\n\n/***/ 1016:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var axisHelper = __webpack_require__(986);\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj + '';\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (this.axis\n                && min != null\n                && min !== 'dataMin'\n                && typeof min !== 'function'\n                && !zrUtil.eqNaN(min)\n            ) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (this.axis\n                && max != null\n                && max !== 'dataMax'\n                && typeof max !== 'function'\n                && !zrUtil.eqNaN(max)\n            ) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1017:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var env = __webpack_require__(976);\n    var echarts = __webpack_require__(970);\n    var modelUtil = __webpack_require__(973);\n    var helper = __webpack_require__(1018);\n    var AxisProxy = __webpack_require__(1140);\n    var each = zrUtil.each;\n    var eachAxisDim = helper.eachAxisDim;\n\n    var DataZoomModel = echarts.extendComponentModel({\n\n        type: 'dataZoom',\n\n        dependencies: [\n            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'\n        ],\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            zlevel: 0,\n            z: 4,                   // Higher than normal component (z: 2).\n            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\n            xAxisIndex: null,       // Default the first horizontal category axis.\n            yAxisIndex: null,       // Default the first vertical category axis.\n\n            filterMode: 'filter',   // Possible values: 'filter' or 'empty' or 'weakFilter'.\n                                    // 'filter': data items which are out of window will be removed. This option is\n                                    //          applicable when filtering outliers. For each data item, it will be\n                                    //          filtered if one of the relevant dimensions is out of the window.\n                                    // 'weakFilter': data items which are out of window will be removed. This option\n                                    //          is applicable when filtering outliers. For each data item, it will be\n                                    //          filtered only if all  of the relevant dimensions are out of the same\n                                    //          side of the window.\n                                    // 'empty': data items which are out of window will be set to empty.\n                                    //          This option is applicable when user should not neglect\n                                    //          that there are some data items out of window.\n                                    // 'none': Do not filter.\n                                    // Taking line chart as an example, line will be broken in\n                                    // the filtered points when filterModel is set to 'empty', but\n                                    // be connected when set to 'filter'.\n\n            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\n                                    // default 100. Do not throttle when use null/undefined.\n                                    // If animation === true and animationDurationUpdate > 0,\n                                    // default value is 100, otherwise 20.\n            start: 0,               // Start percent. 0 ~ 100\n            end: 100,               // End percent. 0 ~ 100\n            startValue: null,       // Start value. If startValue specified, start is ignored.\n            endValue: null,         // End value. If endValue specified, end is ignored.\n            minSpan: null,          // 0 ~ 100\n            maxSpan: null,          // 0 ~ 100\n            minValueSpan: null,     // The range of dataZoom can not be smaller than that.\n            maxValueSpan: null,     // The range of dataZoom can not be larger than that.\n            rangeMode: null         // Array, can be 'value' or 'percent'.\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * key like x_0, y_1\n             * @private\n             * @type {Object}\n             */\n            this._dataIntervalByAxis = {};\n\n            /**\n             * @private\n             */\n            this._dataInfo = {};\n\n            /**\n             * key like x_0, y_1\n             * @private\n             */\n            this._axisProxies = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * @private\n             */\n            this._autoThrottle = true;\n\n            /**\n             * 'percent' or 'value'\n             * @private\n             */\n            this._rangePropMode = ['percent', 'percent'];\n\n            var rawOption = retrieveRaw(option);\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (newOption) {\n            var rawOption = retrieveRaw(newOption);\n\n            //FIX #2591\n            zrUtil.merge(this.option, newOption, true);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @protected\n         */\n        doInit: function (rawOption) {\n            var thisOption = this.option;\n\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            this._setDefaultThrottle(rawOption);\n\n            updateRangeUse(this, rawOption);\n\n            each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n                // start/end has higher priority over startValue/endValue if they\n                // both set, but we should make chart.setOption({endValue: 1000})\n                // effective, rather than chart.setOption({endValue: 1000, end: null}).\n                if (this._rangePropMode[index] === 'value') {\n                    thisOption[names[0]] = null;\n                }\n                // Otherwise do nothing and use the merge result.\n            }, this);\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this._resetTarget();\n\n            this._giveAxisProxies();\n        },\n\n        /**\n         * @private\n         */\n        _giveAxisProxies: function () {\n            var axisProxies = this._axisProxies;\n\n            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\n                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\n\n                // If exists, share axisProxy with other dataZoomModels.\n                var axisProxy = axisModel.__dzAxisProxy || (\n                    // Use the first dataZoomModel as the main model of axisProxy.\n                    axisModel.__dzAxisProxy = new AxisProxy(\n                        dimNames.name, axisIndex, this, ecModel\n                    )\n                );\n                // FIXME\n                // dispose __dzAxisProxy\n\n                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetTarget: function () {\n            var thisOption = this.option;\n\n            var autoMode = this._judgeAutoMode();\n\n            eachAxisDim(function (dimNames) {\n                var axisIndexName = dimNames.axisIndex;\n                thisOption[axisIndexName] = modelUtil.normalizeToArray(\n                    thisOption[axisIndexName]\n                );\n            }, this);\n\n            if (autoMode === 'axisIndex') {\n                this._autoSetAxisIndex();\n            }\n            else if (autoMode === 'orient') {\n                this._autoSetOrient();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _judgeAutoMode: function () {\n            // Auto set only works for setOption at the first time.\n            // The following is user's reponsibility. So using merged\n            // option is OK.\n            var thisOption = this.option;\n\n            var hasIndexSpecified = false;\n            eachAxisDim(function (dimNames) {\n                // When user set axisIndex as a empty array, we think that user specify axisIndex\n                // but do not want use auto mode. Because empty array may be encountered when\n                // some error occured.\n                if (thisOption[dimNames.axisIndex] != null) {\n                    hasIndexSpecified = true;\n                }\n            }, this);\n\n            var orient = thisOption.orient;\n\n            if (orient == null && hasIndexSpecified) {\n                return 'orient';\n            }\n            else if (!hasIndexSpecified) {\n                if (orient == null) {\n                    thisOption.orient = 'horizontal';\n                }\n                return 'axisIndex';\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetAxisIndex: function () {\n            var autoAxisIndex = true;\n            var orient = this.get('orient', true);\n            var thisOption = this.option;\n            var dependentModels = this.dependentModels;\n\n            if (autoAxisIndex) {\n                // Find axis that parallel to dataZoom as default.\n                var dimName = orient === 'vertical' ? 'y' : 'x';\n\n                if (dependentModels[dimName + 'Axis'].length) {\n                    thisOption[dimName + 'AxisIndex'] = [0];\n                    autoAxisIndex = false;\n                }\n                else {\n                    each(dependentModels.singleAxis, function (singleAxisModel) {\n                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {\n                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];\n                            autoAxisIndex = false;\n                        }\n                    });\n                }\n            }\n\n            if (autoAxisIndex) {\n                // Find the first category axis as default. (consider polar)\n                eachAxisDim(function (dimNames) {\n                    if (!autoAxisIndex) {\n                        return;\n                    }\n                    var axisIndices = [];\n                    var axisModels = this.dependentModels[dimNames.axis];\n                    if (axisModels.length && !axisIndices.length) {\n                        for (var i = 0, len = axisModels.length; i < len; i++) {\n                            if (axisModels[i].get('type') === 'category') {\n                                axisIndices.push(i);\n                            }\n                        }\n                    }\n                    thisOption[dimNames.axisIndex] = axisIndices;\n                    if (axisIndices.length) {\n                        autoAxisIndex = false;\n                    }\n                }, this);\n            }\n\n            if (autoAxisIndex) {\n                // FIXME\n                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\n                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\n\n                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\n                // dataZoom component auto adopts series that reference to\n                // both xAxis and yAxis which type is 'value'.\n                this.ecModel.eachSeries(function (seriesModel) {\n                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\n                        eachAxisDim(function (dimNames) {\n                            var axisIndices = thisOption[dimNames.axisIndex];\n\n                            var axisIndex = seriesModel.get(dimNames.axisIndex);\n                            var axisId = seriesModel.get(dimNames.axisId);\n\n                            var axisModel = seriesModel.ecModel.queryComponents({\n                                mainType: dimNames.axis,\n                                index: axisIndex,\n                                id: axisId\n                            })[0];\n\n                            if (__DEV__) {\n                                if (!axisModel) {\n                                    throw new Error(\n                                        dimNames.axis + ' \"' + zrUtil.retrieve(\n                                            axisIndex,\n                                            axisId,\n                                            0\n                                        ) + '\" not found'\n                                    );\n                                }\n                            }\n                            axisIndex = axisModel.componentIndex;\n\n                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\n                                axisIndices.push(axisIndex);\n                            }\n                        });\n                    }\n                }, this);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetOrient: function () {\n            var dim;\n\n            // Find the first axis\n            this.eachTargetAxis(function (dimNames) {\n                !dim && (dim = dimNames.name);\n            }, this);\n\n            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\n        },\n\n        /**\n         * @private\n         */\n        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\n            // FIXME\n            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\n            // 例如series.type === scatter时。\n\n            var is = true;\n            eachAxisDim(function (dimNames) {\n                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\n                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\n\n                if (!axisModel || axisModel.get('type') !== axisType) {\n                    is = false;\n                }\n            }, this);\n            return is;\n        },\n\n        /**\n         * @private\n         */\n        _setDefaultThrottle: function (rawOption) {\n            // When first time user set throttle, auto throttle ends.\n            if (rawOption.hasOwnProperty('throttle')) {\n                this._autoThrottle = false;\n            }\n            if (this._autoThrottle) {\n                var globalOption = this.ecModel.option;\n                this.option.throttle =\n                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\n                    ? 100 : 20;\n            }\n        },\n\n        /**\n         * @public\n         */\n        getFirstTargetAxisModel: function () {\n            var firstAxisModel;\n            eachAxisDim(function (dimNames) {\n                if (firstAxisModel == null) {\n                    var indices = this.get(dimNames.axisIndex);\n                    if (indices.length) {\n                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\n                    }\n                }\n            }, this);\n\n            return firstAxisModel;\n        },\n\n        /**\n         * @public\n         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\n         */\n        eachTargetAxis: function (callback, context) {\n            var ecModel = this.ecModel;\n            eachAxisDim(function (dimNames) {\n                each(\n                    this.get(dimNames.axisIndex),\n                    function (axisIndex) {\n                        callback.call(context, dimNames, axisIndex, this, ecModel);\n                    },\n                    this\n                );\n            }, this);\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.\n         */\n        getAxisProxy: function (dimName, axisIndex) {\n            return this._axisProxies[dimName + '_' + axisIndex];\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/model/Model} If not found, return null/undefined.\n         */\n        getAxisModel: function (dimName, axisIndex) {\n            var axisProxy = this.getAxisProxy(dimName, axisIndex);\n            return axisProxy && axisProxy.getAxisModel();\n        },\n\n        /**\n         * If not specified, set to undefined.\n         *\n         * @public\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         * @param {boolean} [ignoreUpdateRangeUsg=false]\n         */\n        setRawRange: function (opt, ignoreUpdateRangeUsg) {\n            each(['start', 'end', 'startValue', 'endValue'], function (name) {\n                // If any of those prop is null/undefined, we should alos set\n                // them, because only one pair between start/end and\n                // startValue/endValue can work.\n                this.option[name] = opt[name];\n            }, this);\n\n            !ignoreUpdateRangeUsg && updateRangeUse(this, opt);\n        },\n\n        /**\n         * @public\n         * @return {Array.<number>} [startPercent, endPercent]\n         */\n        getPercentRange: function () {\n            var axisProxy = this.findRepresentativeAxisProxy();\n            if (axisProxy) {\n                return axisProxy.getDataPercentWindow();\n            }\n        },\n\n        /**\n         * @public\n         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\n         *\n         * @param {string} [axisDimName]\n         * @param {number} [axisIndex]\n         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.\n         */\n        getValueRange: function (axisDimName, axisIndex) {\n            if (axisDimName == null && axisIndex == null) {\n                var axisProxy = this.findRepresentativeAxisProxy();\n                if (axisProxy) {\n                    return axisProxy.getDataValueWindow();\n                }\n            }\n            else {\n                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\n            }\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy\n         *      corresponding to the axisModel\n         * @return {module:echarts/component/dataZoom/AxisProxy}\n         */\n        findRepresentativeAxisProxy: function (axisModel) {\n            if (axisModel) {\n                return axisModel.__dzAxisProxy;\n            }\n\n            // Find the first hosted axisProxy\n            var axisProxies = this._axisProxies;\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n\n            // If no hosted axis find not hosted axisProxy.\n            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\n            // and the option.start or option.end settings are different. The percentRange\n            // should follow axisProxy.\n            // (We encounter this problem in toolbox data zoom.)\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getRangePropMode: function () {\n            return this._rangePropMode.slice();\n        }\n\n    });\n\n    function retrieveRaw(option) {\n        var ret = {};\n        each(\n            ['start', 'end', 'startValue', 'endValue', 'throttle'],\n            function (name) {\n                option.hasOwnProperty(name) && (ret[name] = option[name]);\n            }\n        );\n        return ret;\n    }\n\n    function updateRangeUse(dataZoomModel, rawOption) {\n        var rangePropMode = dataZoomModel._rangePropMode;\n        var rangeModeInOption = dataZoomModel.get('rangeMode');\n\n        each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n            var percentSpecified = rawOption[names[0]] != null;\n            var valueSpecified = rawOption[names[1]] != null;\n            if (percentSpecified && !valueSpecified) {\n                rangePropMode[index] = 'percent';\n            }\n            else if (!percentSpecified && valueSpecified) {\n                rangePropMode[index] = 'value';\n            }\n            else if (rangeModeInOption) {\n                rangePropMode[index] = rangeModeInOption[index];\n            }\n            else if (percentSpecified) { // percentSpecified && valueSpecified\n                rangePropMode[index] = 'percent';\n            }\n            // else remain its original setting.\n        });\n    }\n\n    module.exports = DataZoomModel;\n\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var formatUtil = __webpack_require__(975);\n    var zrUtil = __webpack_require__(969);\n\n    var helper = {};\n\n    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];\n    // Supported coords.\n    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n\n    /**\n     * @param {string} coordType\n     * @return {boolean}\n     */\n    helper.isCoordSupported = function (coordType) {\n        return zrUtil.indexOf(COORDS, coordType) >= 0;\n    };\n\n    /**\n     * Create \"each\" method to iterate names.\n     *\n     * @pubilc\n     * @param  {Array.<string>} names\n     * @param  {Array.<string>=} attrs\n     * @return {Function}\n     */\n    helper.createNameEach = function (names, attrs) {\n        names = names.slice();\n        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n        attrs = (attrs || []).slice();\n        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n\n        return function (callback, context) {\n            zrUtil.each(names, function (name, index) {\n                var nameObj = {name: name, capital: capitalNames[index]};\n\n                for (var j = 0; j < attrs.length; j++) {\n                    nameObj[attrs[j]] = name + capitalAttrs[j];\n                }\n\n                callback.call(context, nameObj);\n            });\n        };\n    };\n\n    /**\n     * Iterate each dimension name.\n     *\n     * @public\n     * @param {Function} callback The parameter is like:\n     *                            {\n     *                                name: 'angle',\n     *                                capital: 'Angle',\n     *                                axis: 'angleAxis',\n     *                                axisIndex: 'angleAixs',\n     *                                index: 'angleIndex'\n     *                            }\n     * @param {Object} context\n     */\n    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n\n    /**\n     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n     * dataZoomModels and 'links' make up one or more graphics.\n     * This function finds the graphic where the source dataZoomModel is in.\n     *\n     * @public\n     * @param {Function} forEachNode Node iterator.\n     * @param {Function} forEachEdgeType edgeType iterator\n     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n     */\n    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\n\n        return function (sourceNode) {\n            var result = {\n                nodes: [],\n                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n            };\n\n            forEachEdgeType(function (edgeType) {\n                result.records[edgeType.name] = {};\n            });\n\n            if (!sourceNode) {\n                return result;\n            }\n\n            absorb(sourceNode, result);\n\n            var existsLink;\n            do {\n                existsLink = false;\n                forEachNode(processSingleNode);\n            }\n            while (existsLink);\n\n            function processSingleNode(node) {\n                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n                    absorb(node, result);\n                    existsLink = true;\n                }\n            }\n\n            return result;\n        };\n\n        function isNodeAbsorded(node, result) {\n            return zrUtil.indexOf(result.nodes, node) >= 0;\n        }\n\n        function isLinked(node, result) {\n            var hasLink = false;\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] && (hasLink = true);\n                });\n            });\n            return hasLink;\n        }\n\n        function absorb(node, result) {\n            result.nodes.push(node);\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] = true;\n                });\n            });\n        }\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ 1019:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var ComponentView = __webpack_require__(1026);\n\n    module.exports = ComponentView.extend({\n\n        type: 'dataZoom',\n\n        render: function (dataZoomModel, ecModel, api, payload) {\n            this.dataZoomModel = dataZoomModel;\n            this.ecModel = ecModel;\n            this.api = api;\n        },\n\n        /**\n         * Find the first target coordinate system.\n         *\n         * @protected\n         * @return {Object} {\n         *                   grid: [\n         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\n         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\n         *                       ...\n         *                   ],  // cartesians must not be null/undefined.\n         *                   polar: [\n         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\n         *                       ...\n         *                   ],  // polars must not be null/undefined.\n         *                   singleAxis: [\n         *                       {model: coord0, axisModels: [], coordIndex: 0}\n         *                   ]\n         */\n        getTargetCoordInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var ecModel = this.ecModel;\n            var coordSysLists = {};\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\n                if (axisModel) {\n                    var coordModel = axisModel.getCoordSysModel();\n                    coordModel && save(\n                        coordModel,\n                        axisModel,\n                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),\n                        coordModel.componentIndex\n                    );\n                }\n            }, this);\n\n            function save(coordModel, axisModel, store, coordIndex) {\n                var item;\n                for (var i = 0; i < store.length; i++) {\n                    if (store[i].model === coordModel) {\n                        item = store[i];\n                        break;\n                    }\n                }\n                if (!item) {\n                    store.push(item = {\n                        model: coordModel, axisModels: [], coordIndex: coordIndex\n                    });\n                }\n                item.axisModels.push(axisModel);\n            }\n\n            return coordSysLists;\n        }\n\n    });\n\n\n\n/***/ }),\n\n/***/ 1020:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var echarts = __webpack_require__(970);\n    var axisPointerModelHelper = __webpack_require__(1003);\n    var axisTrigger = __webpack_require__(1123);\n    var zrUtil = __webpack_require__(969);\n\n    __webpack_require__(1124);\n    __webpack_require__(1125);\n\n    // CartesianAxisPointer is not supposed to be required here. But consider\n    // echarts.simple.js and online build tooltip, which only require gridSimple,\n    // CartesianAxisPointer should be able to required somewhere.\n    __webpack_require__(1048);\n\n    echarts.registerPreprocessor(function (option) {\n        // Always has a global axisPointerModel for default setting.\n        if (option) {\n            (!option.axisPointer || option.axisPointer.length === 0)\n                && (option.axisPointer = {});\n\n            var link = option.axisPointer.link;\n            // Normalize to array to avoid object mergin. But if link\n            // is not set, remain null/undefined, otherwise it will\n            // override existent link setting.\n            if (link && !zrUtil.isArray(link)) {\n                option.axisPointer.link = [link];\n            }\n        }\n    });\n\n    // This process should proformed after coordinate systems created\n    // and series data processed. So put it on statistic processing stage.\n    echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {\n        // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n        // allAxesInfo should be updated when setOption performed.\n        ecModel.getComponent('axisPointer').coordSysAxesInfo\n            = axisPointerModelHelper.collect(ecModel, api);\n    });\n\n    // Broadcast to all views.\n    echarts.registerAction({\n        type: 'updateAxisPointer',\n        event: 'updateAxisPointer',\n        update: ':updateAxisPointer'\n    }, axisTrigger);\n\n\n\n/***/ }),\n\n/***/ 1021:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var textContain = __webpack_require__(983);\n    var formatUtil = __webpack_require__(975);\n    var matrix = __webpack_require__(984);\n    var axisHelper = __webpack_require__(986);\n    var AxisBuilder = __webpack_require__(1011);\n\n    var helper = {};\n\n    /**\n     * @param {module:echarts/model/Model} axisPointerModel\n     */\n    helper.buildElStyle = function (axisPointerModel) {\n        var axisPointerType = axisPointerModel.get('type');\n        var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n        var style;\n        if (axisPointerType === 'line') {\n            style = styleModel.getLineStyle();\n            style.fill = null;\n        }\n        else if (axisPointerType === 'shadow') {\n            style = styleModel.getAreaStyle();\n            style.stroke = null;\n        }\n        return style;\n    };\n\n    /**\n     * @param {Function} labelPos {align, verticalAlign, position}\n     */\n    helper.buildLabelElOption = function (\n        elOption, axisModel, axisPointerModel, api, labelPos\n    ) {\n        var value = axisPointerModel.get('value');\n        var text = helper.getValueLabel(\n            value, axisModel.axis, axisModel.ecModel,\n            axisPointerModel.get('seriesDataIndices'),\n            {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            }\n        );\n        var labelModel = axisPointerModel.getModel('label');\n        var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n\n        var font = labelModel.getFont();\n        var textRect = textContain.getBoundingRect(text, font);\n\n        var position = labelPos.position;\n        var width = textRect.width + paddings[1] + paddings[3];\n        var height = textRect.height + paddings[0] + paddings[2];\n\n        // Adjust by align.\n        var align = labelPos.align;\n        align === 'right' && (position[0] -= width);\n        align === 'center' && (position[0] -= width / 2);\n        var verticalAlign = labelPos.verticalAlign;\n        verticalAlign === 'bottom' && (position[1] -= height);\n        verticalAlign === 'middle' && (position[1] -= height / 2);\n\n        // Not overflow ec container\n        confineInContainer(position, width, height, api);\n\n        var bgColor = labelModel.get('backgroundColor');\n        if (!bgColor || bgColor === 'auto') {\n            bgColor = axisModel.get('axisLine.lineStyle.color');\n        }\n\n        elOption.label = {\n            shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},\n            position: position.slice(),\n            // TODO: rich\n            style: {\n                text: text,\n                textFont: font,\n                textFill: labelModel.getTextColor(),\n                textPosition: 'inside',\n                fill: bgColor,\n                stroke: labelModel.get('borderColor') || 'transparent',\n                lineWidth: labelModel.get('borderWidth') || 0,\n                shadowBlur: labelModel.get('shadowBlur'),\n                shadowColor: labelModel.get('shadowColor'),\n                shadowOffsetX: labelModel.get('shadowOffsetX'),\n                shadowOffsetY: labelModel.get('shadowOffsetY')\n            },\n            // Lable should be over axisPointer.\n            z2: 10\n        };\n    };\n\n    // Do not overflow ec container\n    function confineInContainer(position, width, height, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n        position[0] = Math.min(position[0] + width, viewWidth) - width;\n        position[1] = Math.min(position[1] + height, viewHeight) - height;\n        position[0] = Math.max(position[0], 0);\n        position[1] = Math.max(position[1], 0);\n    }\n\n    /**\n     * @param {number} value\n     * @param {module:echarts/coord/Axis} axis\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} opt\n     * @param {Array.<Object>} seriesDataIndices\n     * @param {number|string} opt.precision 'auto' or a number\n     * @param {string|Function} opt.formatter label formatter\n     */\n    helper.getValueLabel = function (value, axis, ecModel, seriesDataIndices, opt) {\n        var text = axis.scale.getLabel(\n            // If `precision` is set, width can be fixed (like '12.00500'), which\n            // helps to debounce when when moving label.\n            value, {precision: opt.precision}\n        );\n        var formatter = opt.formatter;\n\n        if (formatter) {\n            var params = {\n                value: axisHelper.getAxisRawValue(axis, value),\n                seriesData: []\n            };\n            zrUtil.each(seriesDataIndices, function (idxItem) {\n                var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                var dataIndex = idxItem.dataIndexInside;\n                var dataParams = series && series.getDataParams(dataIndex);\n                dataParams && params.seriesData.push(dataParams);\n            });\n\n            if (zrUtil.isString(formatter)) {\n                text = formatter.replace('{value}', text);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                text = formatter(params);\n            }\n        }\n\n        return text;\n    };\n\n    /**\n     * @param {module:echarts/coord/Axis} axis\n     * @param {number} value\n     * @param {Object} layoutInfo {\n     *  rotation, position, labelOffset, labelDirection, labelMargin\n     * }\n     */\n    helper.getTransformedPosition = function (axis, value, layoutInfo) {\n        var transform = matrix.create();\n        matrix.rotate(transform, transform, layoutInfo.rotation);\n        matrix.translate(transform, transform, layoutInfo.position);\n\n        return graphic.applyTransform([\n            axis.dataToCoord(value),\n            (layoutInfo.labelOffset || 0)\n                + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)\n        ], transform);\n    };\n\n    helper.buildCartesianSingleLabelElOption = function (\n        value, elOption, layoutInfo, axisModel, axisPointerModel, api\n    ) {\n        var textLayout = AxisBuilder.innerTextLayout(\n            layoutInfo.rotation, 0, layoutInfo.labelDirection\n        );\n        layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n        helper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n            position: helper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n            align: textLayout.textAlign,\n            verticalAlign: textLayout.textVerticalAlign\n        });\n    };\n\n    /**\n     * @param {Array.<number>} p1\n     * @param {Array.<number>} p2\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeLineShape = function (p1, p2, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x1: p1[xDimIndex],\n            y1: p1[1 - xDimIndex],\n            x2: p2[xDimIndex],\n            y2: p2[1 - xDimIndex]\n        };\n    };\n\n    /**\n     * @param {Array.<number>} xy\n     * @param {Array.<number>} wh\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeRectShape = function (xy, wh, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x: xy[xDimIndex],\n            y: xy[1 - xDimIndex],\n            width: wh[xDimIndex],\n            height: wh[1 - xDimIndex]\n        };\n    };\n\n    helper.makeSectorShape = function (cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ 1022:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = __webpack_require__(984);\n    var vector = __webpack_require__(974);\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {CanvasRenderingContext2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {        \n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n/***/ }),\n\n/***/ 1023:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n        var config = __webpack_require__(998);\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n/***/ }),\n\n/***/ 1024:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textContain = __webpack_require__(983);\n    var util = __webpack_require__(969);\n    var roundRectHelper = __webpack_require__(1033);\n    var imageHelper = __webpack_require__(1013);\n\n    var retrieve3 = util.retrieve3;\n    var retrieve2 = util.retrieve2;\n\n    // TODO: Have not support 'start', 'end' yet.\n    var VALID_TEXT_ALIGN = {left: 1, right: 1, center: 1};\n    var VALID_TEXT_VERTICAL_ALIGN = {top: 1, bottom: 1, middle: 1};\n\n    var helper = {};\n\n    /**\n     * @param {module:zrender/graphic/Style} style\n     * @return {module:zrender/graphic/Style} The input style.\n     */\n    helper.normalizeTextStyle = function (style) {\n        normalizeStyle(style);\n        util.each(style.rich, normalizeStyle);\n        return style;\n    };\n\n    function normalizeStyle(style) {\n        if (style) {\n\n            style.font = textContain.makeFont(style);\n\n            var textAlign = style.textAlign;\n            textAlign === 'middle' && (textAlign = 'center');\n            style.textAlign = (\n                textAlign == null || VALID_TEXT_ALIGN[textAlign]\n            ) ? textAlign : 'left';\n\n            // Compatible with textBaseline.\n            var textVerticalAlign = style.textVerticalAlign || style.textBaseline;\n            textVerticalAlign === 'center' && (textVerticalAlign = 'middle');\n            style.textVerticalAlign = (\n                textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign]\n            ) ? textVerticalAlign : 'top';\n\n            var textPadding = style.textPadding;\n            if (textPadding) {\n                style.textPadding = util.normalizeCssArray(style.textPadding);\n            }\n        }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} text\n     * @param {module:zrender/graphic/Style} style\n     * @param {Object|boolean} [rect] {x, y, width, height}\n     *                  If set false, rect text is not used.\n     */\n    helper.renderText = function (hostEl, ctx, text, style, rect) {\n        style.rich\n            ? renderRichText(hostEl, ctx, text, style, rect)\n            : renderPlainText(hostEl, ctx, text, style, rect);\n    };\n\n    function renderPlainText(hostEl, ctx, text, style, rect) {\n        var font = setCtx(ctx, 'font', style.font || textContain.DEFAULT_FONT);\n\n        var textPadding = style.textPadding;\n\n        var contentBlock = hostEl.__textCotentBlock;\n        if (!contentBlock || hostEl.__dirty) {\n            contentBlock = hostEl.__textCotentBlock = textContain.parsePlainText(\n                text, font, textPadding, style.truncate\n            );\n        }\n\n        var outerHeight = contentBlock.outerHeight;\n\n        var textLines = contentBlock.lines;\n        var lineHeight = contentBlock.lineHeight;\n\n        var boxPos = getBoxPosition(outerHeight, style, rect);\n        var baseX = boxPos.baseX;\n        var baseY = boxPos.baseY;\n        var textAlign = boxPos.textAlign;\n        var textVerticalAlign = boxPos.textVerticalAlign;\n\n        // Origin of textRotation should be the base point of text drawing.\n        applyTextRotation(ctx, style, rect, baseX, baseY);\n\n        var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);\n        var textX = baseX;\n        var textY = boxY;\n\n        var needDrawBg = needDrawBackground(style);\n        if (needDrawBg || textPadding) {\n            // Consider performance, do not call getTextWidth util necessary.\n            var textWidth = textContain.getWidth(text, font);\n            var outerWidth = textWidth;\n            textPadding && (outerWidth += textPadding[1] + textPadding[3]);\n            var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);\n\n            needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);\n\n            if (textPadding) {\n                textX = getTextXForPadding(baseX, textAlign, textPadding);\n                textY += textPadding[0];\n            }\n        }\n\n        setCtx(ctx, 'textAlign', textAlign || 'left');\n        // Force baseline to be \"middle\". Otherwise, if using \"top\", the\n        // text will offset downward a little bit in font \"Microsoft YaHei\".\n        setCtx(ctx, 'textBaseline', 'middle');\n\n        // Always set shadowBlur and shadowOffset to avoid leak from displayable.\n        setCtx(ctx, 'shadowBlur', style.textShadowBlur || 0);\n        setCtx(ctx, 'shadowColor', style.textShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', style.textShadowOffsetX || 0);\n        setCtx(ctx, 'shadowOffsetY', style.textShadowOffsetY || 0);\n\n        // `textBaseline` is set as 'middle'.\n        textY += lineHeight / 2;\n\n        var textStrokeWidth = style.textStrokeWidth;\n        var textStroke = getStroke(style.textStroke, textStrokeWidth);\n        var textFill = getFill(style.textFill);\n\n        if (textStroke) {\n            setCtx(ctx, 'lineWidth', textStrokeWidth);\n            setCtx(ctx, 'strokeStyle', textStroke);\n        }\n        if (textFill) {\n            setCtx(ctx, 'fillStyle', textFill);\n        }\n\n        for (var i = 0; i < textLines.length; i++) {\n            // Fill after stroke so the outline will not cover the main part.\n            textStroke && ctx.strokeText(textLines[i], textX, textY);\n            textFill && ctx.fillText(textLines[i], textX, textY);\n            textY += lineHeight;\n        }\n    }\n\n    function renderRichText(hostEl, ctx, text, style, rect) {\n        var contentBlock = hostEl.__textCotentBlock;\n\n        if (!contentBlock || hostEl.__dirty) {\n            contentBlock = hostEl.__textCotentBlock = textContain.parseRichText(text, style);\n        }\n\n        drawRichText(hostEl, ctx, contentBlock, style, rect);\n    }\n\n    function drawRichText(hostEl, ctx, contentBlock, style, rect) {\n        var contentWidth = contentBlock.width;\n        var outerWidth = contentBlock.outerWidth;\n        var outerHeight = contentBlock.outerHeight;\n        var textPadding = style.textPadding;\n\n        var boxPos = getBoxPosition(outerHeight, style, rect);\n        var baseX = boxPos.baseX;\n        var baseY = boxPos.baseY;\n        var textAlign = boxPos.textAlign;\n        var textVerticalAlign = boxPos.textVerticalAlign;\n\n        // Origin of textRotation should be the base point of text drawing.\n        applyTextRotation(ctx, style, rect, baseX, baseY);\n\n        var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);\n        var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);\n        var xLeft = boxX;\n        var lineTop = boxY;\n        if (textPadding) {\n            xLeft += textPadding[3];\n            lineTop += textPadding[0];\n        }\n        var xRight = xLeft + contentWidth;\n\n        needDrawBackground(style) && drawBackground(\n            hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight\n        );\n\n        for (var i = 0; i < contentBlock.lines.length; i++) {\n            var line = contentBlock.lines[i];\n            var tokens = line.tokens;\n            var tokenCount = tokens.length;\n            var lineHeight = line.lineHeight;\n            var usedWidth = line.width;\n\n            var leftIndex = 0;\n            var lineXLeft = xLeft;\n            var lineXRight = xRight;\n            var rightIndex = tokenCount - 1;\n            var token;\n\n            while (\n                leftIndex < tokenCount\n                && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')\n            ) {\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');\n                usedWidth -= token.width;\n                lineXLeft += token.width;\n                leftIndex++;\n            }\n\n            while (\n                rightIndex >= 0\n                && (token = tokens[rightIndex], token.textAlign === 'right')\n            ) {\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');\n                usedWidth -= token.width;\n                lineXRight -= token.width;\n                rightIndex--;\n            }\n\n            // The other tokens are placed as textAlign 'center' if there is enough space.\n            lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;\n            while (leftIndex <= rightIndex) {\n                token = tokens[leftIndex];\n                // Consider width specified by user, use 'center' rather than 'left'.\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');\n                lineXLeft += token.width;\n                leftIndex++;\n            }\n\n            lineTop += lineHeight;\n        }\n    }\n\n    function applyTextRotation(ctx, style, rect, x, y) {\n        // textRotation only apply in RectText.\n        if (rect && style.textRotation) {\n            var origin = style.textOrigin;\n            if (origin === 'center') {\n                x = rect.width / 2 + rect.x;\n                y = rect.height / 2 + rect.y;\n            }\n            else if (origin) {\n                x = origin[0] + rect.x;\n                y = origin[1] + rect.y;\n            }\n\n            ctx.translate(x, y);\n            // Positive: anticlockwise\n            ctx.rotate(-style.textRotation);\n            ctx.translate(-x, -y);\n        }\n    }\n\n    function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {\n        var tokenStyle = style.rich[token.styleName] || {};\n\n        // 'ctx.textBaseline' is always set as 'middle', for sake of\n        // the bias of \"Microsoft YaHei\".\n        var textVerticalAlign = token.textVerticalAlign;\n        var y = lineTop + lineHeight / 2;\n        if (textVerticalAlign === 'top') {\n            y = lineTop + token.height / 2;\n        }\n        else if (textVerticalAlign === 'bottom') {\n            y = lineTop + lineHeight - token.height / 2;\n        }\n\n        !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(\n            hostEl,\n            ctx,\n            tokenStyle,\n            textAlign === 'right'\n                ? x - token.width\n                : textAlign === 'center'\n                ? x - token.width / 2\n                : x,\n            y - token.height / 2,\n            token.width,\n            token.height\n        );\n\n        var textPadding = token.textPadding;\n        if (textPadding) {\n            x = getTextXForPadding(x, textAlign, textPadding);\n            y -= token.height / 2 - textPadding[2] - token.textHeight / 2;\n        }\n\n        setCtx(ctx, 'shadowBlur', retrieve3(tokenStyle.textShadowBlur, style.textShadowBlur, 0));\n        setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', retrieve3(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));\n        setCtx(ctx, 'shadowOffsetY', retrieve3(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));\n\n        setCtx(ctx, 'textAlign', textAlign);\n        // Force baseline to be \"middle\". Otherwise, if using \"top\", the\n        // text will offset downward a little bit in font \"Microsoft YaHei\".\n        setCtx(ctx, 'textBaseline', 'middle');\n\n        setCtx(ctx, 'font', token.font || textContain.DEFAULT_FONT);\n\n        var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);\n        var textFill = getFill(tokenStyle.textFill || style.textFill);\n        var textStrokeWidth = retrieve2(tokenStyle.textStrokeWidth, style.textStrokeWidth);\n\n        // Fill after stroke so the outline will not cover the main part.\n        if (textStroke) {\n            setCtx(ctx, 'lineWidth', textStrokeWidth);\n            setCtx(ctx, 'strokeStyle', textStroke);\n            ctx.strokeText(token.text, x, y);\n        }\n        if (textFill) {\n            setCtx(ctx, 'fillStyle', textFill);\n            ctx.fillText(token.text, x, y);\n        }\n    }\n\n    function needDrawBackground(style) {\n        return style.textBackgroundColor\n            || (style.textBorderWidth && style.textBorderColor);\n    }\n\n    // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius}\n    // shape: {x, y, width, height}\n    function drawBackground(hostEl, ctx, style, x, y, width, height) {\n        var textBackgroundColor = style.textBackgroundColor;\n        var textBorderWidth = style.textBorderWidth;\n        var textBorderColor = style.textBorderColor;\n        var isPlainBg = util.isString(textBackgroundColor);\n\n        setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);\n        setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);\n        setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);\n\n        if (isPlainBg || (textBorderWidth && textBorderColor)) {\n            ctx.beginPath();\n            var textBorderRadius = style.textBorderRadius;\n            if (!textBorderRadius) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, {\n                    x: x, y: y, width: width, height: height, r: textBorderRadius\n                });\n            }\n            ctx.closePath();\n        }\n\n        if (isPlainBg) {\n            setCtx(ctx, 'fillStyle', textBackgroundColor);\n            ctx.fill();\n        }\n        else if (util.isObject(textBackgroundColor)) {\n            var image = textBackgroundColor.image;\n\n            image = imageHelper.createOrUpdateImage(\n                image, null, hostEl, onBgImageLoaded, textBackgroundColor\n            );\n            if (image && imageHelper.isImageReady(image)) {\n                ctx.drawImage(image, x, y, width, height);\n            }\n        }\n\n        if (textBorderWidth && textBorderColor) {\n            setCtx(ctx, 'lineWidth', textBorderWidth);\n            setCtx(ctx, 'strokeStyle', textBorderColor);\n            ctx.stroke();\n        }\n    }\n\n    function onBgImageLoaded(image, textBackgroundColor) {\n        // Replace image, so that `contain/text.js#parseRichText`\n        // will get correct result in next tick.\n        textBackgroundColor.image = image;\n    }\n\n    function getBoxPosition(blockHeiht, style, rect) {\n        var baseX = style.x || 0;\n        var baseY = style.y || 0;\n        var textAlign = style.textAlign;\n        var textVerticalAlign = style.textVerticalAlign;\n\n        // Text position represented by coord\n        if (rect) {\n            var textPosition = style.textPosition;\n            if (textPosition instanceof Array) {\n                // Percent\n                baseX = rect.x + parsePercent(textPosition[0], rect.width);\n                baseY = rect.y + parsePercent(textPosition[1], rect.height);\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, style.textDistance\n                );\n                baseX = res.x;\n                baseY = res.y;\n                // Default align and baseline when has textPosition\n                textAlign = textAlign || res.textAlign;\n                textVerticalAlign = textVerticalAlign || res.textVerticalAlign;\n            }\n\n            // textOffset is only support in RectText, otherwise\n            // we have to adjust boundingRect for textOffset.\n            var textOffset = style.textOffset;\n            if (textOffset) {\n                baseX += textOffset[0];\n                baseY += textOffset[1];\n            }\n        }\n\n        return {\n            baseX: baseX,\n            baseY: baseY,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function setCtx(ctx, prop, value) {\n        // FIXME ??? performance try\n        // if (ctx.__currentValues[prop] !== value) {\n            // ctx[prop] = ctx.__currentValues[prop] = value;\n        ctx[prop] = value;\n        // }\n        return ctx[prop];\n    }\n\n    /**\n     * @param {string} [stroke] If specified, do not check style.textStroke.\n     * @param {string} [lineWidth] If specified, do not check style.textStroke.\n     * @param {number} style\n     */\n    var getStroke = helper.getStroke = function (stroke, lineWidth) {\n        return (stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none')\n            ? null\n            // TODO pattern and gradient?\n            : (stroke.image || stroke.colorStops)\n            ? '#000'\n            : stroke;\n    };\n\n    var getFill = helper.getFill = function (fill) {\n        return (fill == null || fill === 'none')\n            ? null\n            // TODO pattern and gradient?\n            : (fill.image || fill.colorStops)\n            ? '#000'\n            : fill;\n    };\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    function getTextXForPadding(x, textAlign, textPadding) {\n        return textAlign === 'right'\n            ? (x - textPadding[1])\n            : textAlign === 'center'\n            ? (x + textPadding[3] / 2 - textPadding[1] / 2)\n            : (x + textPadding[3]);\n    }\n\n    /**\n     * @param {string} text\n     * @param {module:zrender/Style} style\n     * @return {boolean}\n     */\n    helper.needDrawText = function (text, style) {\n        return text != null\n            && (text\n                || style.textBackgroundColor\n                || (style.textBorderWidth && style.textBorderColor)\n                || style.textPadding\n            );\n    };\n\n    module.exports = helper;\n\n\n\n\n/***/ }),\n\n/***/ 1025:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = __webpack_require__(1007);\n    var BoundingRect = __webpack_require__(980);\n    var zrUtil = __webpack_require__(969);\n    var imageHelper = __webpack_require__(1013);\n\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n\n            var image = this._image = imageHelper.createOrUpdateImage(src, this._image, this);\n\n            if (!image || !imageHelper.isImageReady(image)) {\n                return;\n            }\n\n            // 图片已经加载完成\n            // if (image.nodeName.toUpperCase() == 'IMG') {\n            //     if (!image.complete) {\n            //         return;\n            //     }\n            // }\n            // Else is canvas\n\n            var x = style.x || 0;\n            var y = style.y || 0;\n            var width = style.width;\n            var height = style.height;\n            var aspect = image.width / image.height;\n            if (width == null && height != null) {\n                // Keep image/height ratio\n                width = height * aspect;\n            }\n            else if (height == null && width != null) {\n                height = width / aspect;\n            }\n            else if (width == null && height == null) {\n                width = image.width;\n                height = image.height;\n            }\n\n            // 设置transform\n            this.setTransform(ctx);\n\n            if (style.sWidth && style.sHeight) {\n                var sx = style.sx || 0;\n                var sy = style.sy || 0;\n                ctx.drawImage(\n                    image,\n                    sx, sy, style.sWidth, style.sHeight,\n                    x, y, width, height\n                );\n            }\n            else if (style.sx && style.sy) {\n                var sx = style.sx;\n                var sy = style.sy;\n                var sWidth = width - sx;\n                var sHeight = height - sy;\n                ctx.drawImage(\n                    image,\n                    sx, sy, sWidth, sHeight,\n                    x, y, width, height\n                );\n            }\n            else {\n                ctx.drawImage(image, x, y, width, height);\n            }\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n/***/ }),\n\n/***/ 1026:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(999);\n    var componentUtil = __webpack_require__(1014);\n    var clazzUtil = __webpack_require__(982);\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n/***/ }),\n\n/***/ 1027:\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * Calculate slider move result.\n     * Usage:\n     * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as\n     * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.\n     * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].\n     *              handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *              extent[0] should less or equals than extent[1].\n     * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,\n     *              where the input minSpan and maxSpan will not work.\n     * @param {number} [minSpan] The range of dataZoom can not be smaller than that.\n     *              If not set, handle0 and cross handle1. If set as a non-negative\n     *              number (including `0`), handles will push each other when reaching\n     *              the minSpan.\n     * @param {number} [maxSpan] The range of dataZoom can not be larger than that.\n     * @return {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {\n        // Normalize firstly.\n        handleEnds[0] = restrict(handleEnds[0], extent);\n        handleEnds[1] = restrict(handleEnds[1], extent);\n\n        delta = delta || 0;\n\n        var extentSpan = extent[1] - extent[0];\n\n        // Notice maxSpan and minSpan can be null/undefined.\n        if (minSpan != null) {\n            minSpan = restrict(minSpan, [0, extentSpan]);\n        }\n        if (maxSpan != null) {\n            maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);\n        }\n        if (handleIndex === 'all') {\n            minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);\n            handleIndex = 0;\n        }\n\n        var originalDistSign = getSpanSign(handleEnds, handleIndex);\n\n        handleEnds[handleIndex] += delta;\n\n        // Restrict in extent.\n        var extentMinSpan = minSpan || 0;\n        var realExtent = extent.slice();\n        originalDistSign.sign < 0 ? (realExtent[0] += extentMinSpan) : (realExtent[1] -= extentMinSpan);\n        handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent);\n\n        // Expand span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (minSpan != null && (\n            currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan\n        )) {\n            // If minSpan exists, 'cross' is forbinden.\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;\n        }\n\n        // Shrink span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (maxSpan != null && currDistSign.span > maxSpan) {\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;\n        }\n\n        return handleEnds;\n    };\n\n    function getSpanSign(handleEnds, handleIndex) {\n        var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex];\n        // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]\n        // is at left of handleEnds[1] for non-cross case.\n        return {span: Math.abs(dist), sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1};\n    }\n\n    function restrict(value, extend) {\n        return Math.min(extend[1], Math.max(extend[0], value));\n    }\n\n\n/***/ }),\n\n/***/ 1028:\n/***/ (function(module, exports) {\n\n// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n/***/ }),\n\n/***/ 1029:\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts, host) {\n        this.extendFrom(opts, false);\n        this.host = host;\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {module:zrender/graphic/Displayable}\n         */\n        host: null,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * If `fontSize` or `fontFamily` exists, `font` will be reset by\n         * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.\n         * So do not visit it directly in upper application (like echarts),\n         * but use `contain/text#makeFont` instead.\n         * @type {string}\n         */\n        font: null,\n\n        /**\n         * The same as font. Use font please.\n         * @deprecated\n         * @type {string}\n         */\n        textFont: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontStyle: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontWeight: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * Should be 12 but not '12px'.\n         * @type {number}\n         */\n        fontSize: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontFamily: null,\n\n        /**\n         * Reserved for special functinality, like 'hr'.\n         * @type {string}\n         */\n        textTag: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * @type {number}\n         */\n        textWidth: null,\n\n        /**\n         * Only for textBackground.\n         * @type {number}\n         */\n        textHeight: null,\n\n        /**\n         * textStroke may be set as some color as a default\n         * value in upper applicaion, where the default value\n         * of textStrokeWidth should be 0 to make sure that\n         * user can choose to do not use text stroke.\n         * @type {number}\n         */\n        textStrokeWidth: 0,\n\n        /**\n         * @type {number}\n         */\n        textLineHeight: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * Based on x, y of rect.\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * If not specified, use the boundingRect of a `displayable`.\n         * @type {Object}\n         */\n        textRect: null,\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * @type {string}\n         */\n        textShadowColor: 'transparent',\n\n        /**\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * @type {string}\n         */\n        textBoxShadowColor: 'transparent',\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowOffsetY: 0,\n\n        /**\n         * Whether transform text.\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        transformText: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and transformText is false.\n         */\n        textRotation: 0,\n\n        /**\n         * Text origin of text rotation, like [10, 40].\n         * Based on x, y of rect.\n         * Useful in label rotation of circular symbol.\n         * By default, this origin is textPosition.\n         * Can be 'center'.\n         * @type {string|Array.<number>}\n         */\n        textOrigin: null,\n\n        /**\n         * @type {string}\n         */\n        textBackgroundColor: null,\n\n        /**\n         * @type {string}\n         */\n        textBorderColor: null,\n\n        /**\n         * @type {number}\n         */\n        textBorderWidth: 0,\n\n        /**\n         * @type {number}\n         */\n        textBorderRadius: 0,\n\n        /**\n         * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`\n         * @type {number|Array.<number>}\n         */\n        textPadding: null,\n\n        /**\n         * Text styles for rich text.\n         * @type {Object}\n         */\n        rich: null,\n\n        /**\n         * {outerWidth, outerHeight, ellipsis, placeholder}\n         * @type {Object}\n         */\n        truncate: null,\n\n        /**\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         * @type {string}\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite true: overwrirte any way.\n         *                            false: overwrite only when !target.hasOwnProperty\n         *                            others: overwrite when property is not null/undefined.\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite === true\n                            || (\n                                overwrite === false\n                                    ? !this.hasOwnProperty(name)\n                                    : otherStyle[name] != null\n                            )\n                        )\n                    ) {\n                        this[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n/***/ }),\n\n/***/ 1030:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/Element\n */\n\n\n    var guid = __webpack_require__(1031);\n    var Eventful = __webpack_require__(990);\n    var Transformable = __webpack_require__(1022);\n    var Animatable = __webpack_require__(1082);\n    var zrUtil = __webpack_require__(969);\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n/***/ }),\n\n/***/ 1031:\n/***/ (function(module, exports) {\n\n/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n/***/ }),\n\n/***/ 1032:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = __webpack_require__(1083);\n    var color = __webpack_require__(991);\n    var util = __webpack_require__(969);\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = len && p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function getArrayDim(keyframes) {\n        var lastValue = keyframes[keyframes.length - 1].value;\n        return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;\n    }\n\n    function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = isValueArray ? getArrayDim(keyframes) : 0;\n\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (!forceAnimate && isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} [easing]\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @param  {boolean} forceAnimate\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing, forceAnimate) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName, forceAnimate\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            // This optimization will help the case that in the upper application\n            // the view may be refreshed frequently, where animation will be\n            // called repeatly but nothing changed.\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n/***/ }),\n\n/***/ 1033:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1034:\n/***/ (function(module, exports) {\n\n\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1035:\n/***/ (function(module, exports) {\n\n\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n/***/ }),\n\n/***/ 1036:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var smoothSpline = __webpack_require__(1093);\n    var smoothBezier = __webpack_require__(1094);\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1037:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var classUtil = __webpack_require__(982);\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            // Use `hasOwnProperty` to avoid conflict with Object.prototype.\n            if (colorNameMap.hasOwnProperty(name)) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1038:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = (typeof window !== 'undefined' &&\n                ((window.requestAnimationFrame && window.requestAnimationFrame.bind(window))\n                // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809\n                || (window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window))\n                || window.mozRequestAnimationFrame\n                || window.webkitRequestAnimationFrame)\n            )\n            || function (func) {\n                setTimeout(func, 16);\n            };\n\n\n\n/***/ }),\n\n/***/ 1039:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * For testable.\n */\n\n\n    var numberUtil = __webpack_require__(972);\n\n    var roundNumber = numberUtil.round;\n\n    var helper = {};\n\n    /**\n     * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.\n     *                                Should be extent[0] < extent[1].\n     * @param {number} splitNumber splitNumber should be >= 1.\n     * @param {number} [minInterval]\n     * @param {number} [maxInterval]\n     * @return {Object} {interval, intervalPrecision, niceTickExtent}\n     */\n    helper.intervalScaleNiceTicks = function (extent, splitNumber, minInterval, maxInterval) {\n        var result = {};\n        var span = extent[1] - extent[0];\n\n        var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n        if (minInterval != null && interval < minInterval) {\n            interval = result.interval = minInterval;\n        }\n        if (maxInterval != null && interval > maxInterval) {\n            interval = result.interval = maxInterval;\n        }\n        // Tow more digital for tick.\n        var precision = result.intervalPrecision = helper.getIntervalPrecision(interval);\n        // Niced extent inside original extent\n        var niceTickExtent = result.niceTickExtent = [\n            roundNumber(Math.ceil(extent[0] / interval) * interval, precision),\n            roundNumber(Math.floor(extent[1] / interval) * interval, precision)\n        ];\n\n        helper.fixExtent(niceTickExtent, extent);\n\n        return result;\n    };\n\n    /**\n     * @param {number} interval\n     * @return {number} interval precision\n     */\n    helper.getIntervalPrecision = function (interval) {\n        // Tow more digital for tick.\n        return numberUtil.getPrecisionSafe(interval) + 2;\n    };\n\n    function clamp(niceTickExtent, idx, extent) {\n        niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n    }\n\n    // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n    helper.fixExtent = function (niceTickExtent, extent) {\n        !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n        !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n        clamp(niceTickExtent, 0, extent);\n        clamp(niceTickExtent, 1, extent);\n        if (niceTickExtent[0] > niceTickExtent[1]) {\n            niceTickExtent[0] = niceTickExtent[1];\n        }\n    };\n\n    helper.intervalScaleGetTicks = function (interval, extent, niceTickExtent, intervalPrecision) {\n        var ticks = [];\n\n        // If interval is 0, return [];\n        if (!interval) {\n            return ticks;\n        }\n\n        // Consider this case: using dataZoom toolbox, zoom and zoom.\n        var safeLimit = 10000;\n\n        if (extent[0] < niceTickExtent[0]) {\n            ticks.push(extent[0]);\n        }\n        var tick = niceTickExtent[0];\n\n        while (tick <= niceTickExtent[1]) {\n            ticks.push(tick);\n            // Avoid rounding error\n            tick = roundNumber(tick + interval, intervalPrecision);\n            if (tick === ticks[ticks.length - 1]) {\n                // Consider out of safe float point, e.g.,\n                // -3711126.9907707 + 2e-10 === -3711126.9907707\n                break;\n            }\n            if (ticks.length > safeLimit) {\n                return [];\n            }\n        }\n        // Consider this case: the last item of ticks is smaller\n        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n        if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {\n            ticks.push(extent[1]);\n        }\n\n        return ticks;\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ 1040:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n\n    /**\n     * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object} {point: [x, y], el: ...} point Will not be null.\n     */\n    module.exports = function (finder, ecModel) {\n        var point = [];\n        var seriesIndex = finder.seriesIndex;\n        var seriesModel;\n        if (seriesIndex == null || !(\n            seriesModel = ecModel.getSeriesByIndex(seriesIndex)\n        )) {\n            return {point: []};\n        }\n\n        var data = seriesModel.getData();\n        var dataIndex = modelUtil.queryDataIndex(data, finder);\n        if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n            return {point: []};\n        }\n\n        var el = data.getItemGraphicEl(dataIndex);\n        var coordSys = seriesModel.coordinateSystem;\n\n        if (seriesModel.getTooltipPosition) {\n            point = seriesModel.getTooltipPosition(dataIndex) || [];\n        }\n        else if (coordSys && coordSys.dataToPoint) {\n            point = coordSys.dataToPoint(\n                data.getValues(\n                    zrUtil.map(coordSys.dimensions, function (dim) {\n                        return seriesModel.coordDimToDataDim(dim)[0];\n                    }), dataIndex, true\n                )\n            ) || [];\n        }\n        else if (el) {\n            // Use graphic bounding rect\n            var rect = el.getBoundingRect().clone();\n            rect.applyTransform(el.transform);\n            point = [\n                rect.x + rect.width / 2,\n                rect.y + rect.height / 2\n            ];\n        }\n\n        return {point: point, el: el};\n    };\n\n\n\n\n/***/ }),\n\n/***/ 1041:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var env = __webpack_require__(976);\n    var zrUtil = __webpack_require__(969);\n    var get = __webpack_require__(973).makeGetter();\n\n    var each = zrUtil.each;\n\n    var globalListener = {};\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Function} handler\n     *      param: {string} currTrigger\n     *      param: {Array.<number>} point\n     */\n    globalListener.register = function (key, api, handler) {\n        if (env.node) {\n            return;\n        }\n\n        var zr = api.getZr();\n        get(zr).records || (get(zr).records = {});\n\n        initGlobalListeners(zr, api);\n\n        var record = get(zr).records[key] || (get(zr).records[key] = {});\n        record.handler = handler;\n    };\n\n    function initGlobalListeners(zr, api) {\n        if (get(zr).initialized) {\n            return;\n        }\n\n        get(zr).initialized = true;\n\n        useHandler('click', zrUtil.curry(doEnter, 'click'));\n        useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove'));\n        // useHandler('mouseout', onLeave);\n        useHandler('globalout', onLeave);\n\n        function useHandler(eventType, cb) {\n            zr.on(eventType, function (e) {\n                var dis = makeDispatchAction(api);\n\n                each(get(zr).records, function (record) {\n                    record && cb(record, e, dis.dispatchAction);\n                });\n\n                dispatchTooltipFinally(dis.pendings, api);\n            });\n        }\n    }\n\n    function dispatchTooltipFinally(pendings, api) {\n        var showLen = pendings.showTip.length;\n        var hideLen = pendings.hideTip.length;\n\n        var actuallyPayload;\n        if (showLen) {\n            actuallyPayload = pendings.showTip[showLen - 1];\n        }\n        else if (hideLen) {\n            actuallyPayload = pendings.hideTip[hideLen - 1];\n        }\n        if (actuallyPayload) {\n            actuallyPayload.dispatchAction = null;\n            api.dispatchAction(actuallyPayload);\n        }\n    }\n\n    function onLeave(record, e, dispatchAction) {\n        record.handler('leave', null, dispatchAction);\n    }\n\n    function doEnter(currTrigger, record, e, dispatchAction) {\n        record.handler(currTrigger, e, dispatchAction);\n    }\n\n    function makeDispatchAction(api) {\n        var pendings = {\n            showTip: [],\n            hideTip: []\n        };\n        // FIXME\n        // better approach?\n        // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,\n        // which may be conflict, (axisPointer call showTip but tooltip call hideTip);\n        // So we have to add \"final stage\" to merge those dispatched actions.\n        var dispatchAction = function (payload) {\n            var pendingList = pendings[payload.type];\n            if (pendingList) {\n                pendingList.push(payload);\n            }\n            else {\n                payload.dispatchAction = dispatchAction;\n                api.dispatchAction(payload);\n            }\n        };\n\n        return {\n            dispatchAction: dispatchAction,\n            pendings: pendings\n        };\n    }\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    globalListener.unregister = function (key, api) {\n        if (env.node) {\n            return;\n        }\n        var zr = api.getZr();\n        var record = (get(zr).records || {})[key];\n        if (record) {\n            get(zr).records[key] = null;\n        }\n    };\n\n    module.exports = globalListener;\n\n\n/***/ }),\n\n/***/ 1042:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    // List layout\n    var layout = __webpack_require__(979);\n    var formatUtil = __webpack_require__(975);\n    var graphic = __webpack_require__(971);\n\n    module.exports = {\n        /**\n         * Layout list like component.\n         * It will box layout each items in group of component and then position the whole group in the viewport\n         * @param {module:zrender/group/Group} group\n         * @param {module:echarts/model/Component} componentModel\n         * @param {module:echarts/ExtensionAPI}\n         */\n        layout: function (group, componentModel, api) {\n            var boxLayoutParams = componentModel.getBoxLayoutParams();\n            var padding = componentModel.get('padding');\n            var viewportSize = {width: api.getWidth(), height: api.getHeight()};\n\n            var rect = layout.getLayoutRect(\n                boxLayoutParams,\n                viewportSize,\n                padding\n            );\n\n            layout.box(\n                componentModel.get('orient'),\n                group,\n                componentModel.get('itemGap'),\n                rect.width,\n                rect.height\n            );\n\n            layout.positionElement(\n                group,\n                boxLayoutParams,\n                viewportSize,\n                padding\n            );\n        },\n\n        makeBackground: function (rect, componentModel) {\n            var padding = formatUtil.normalizeCssArray(\n                componentModel.get('padding')\n            );\n            var style = componentModel.getItemStyle(['color', 'opacity']);\n            style.fill = componentModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: rect.x - padding[3],\n                    y: rect.y - padding[0],\n                    width: rect.width + padding[1] + padding[3],\n                    height: rect.height + padding[0] + padding[2],\n                    r: componentModel.get('borderRadius')\n                },\n                style: style,\n                silent: true,\n                z2: -1\n            });\n            // FIXME\n            // `subPixelOptimizeRect` may bring some gap between edge of viewpart\n            // and background rect when setting like `left: 0`, `top: 0`.\n            // graphic.subPixelOptimizeRect(rect);\n\n            return rect;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1043:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file History manager.\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var each = zrUtil.each;\n\n    var ATTR = '\\0_ec_hist_store';\n\n    var history = {\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\n         */\n        push: function (ecModel, newSnapshot) {\n            var store = giveStore(ecModel);\n\n            // If previous dataZoom can not be found,\n            // complete an range with current range.\n            each(newSnapshot, function (batchItem, dataZoomId) {\n                var i = store.length - 1;\n                for (; i >= 0; i--) {\n                    var snapshot = store[i];\n                    if (snapshot[dataZoomId]) {\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    // No origin range set, create one by current range.\n                    var dataZoomModel = ecModel.queryComponents(\n                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\n                    )[0];\n                    if (dataZoomModel) {\n                        var percentRange = dataZoomModel.getPercentRange();\n                        store[0][dataZoomId] = {\n                            dataZoomId: dataZoomId,\n                            start: percentRange[0],\n                            end: percentRange[1]\n                        };\n                    }\n                }\n            });\n\n            store.push(newSnapshot);\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object} snapshot\n         */\n        pop: function (ecModel) {\n            var store = giveStore(ecModel);\n            var head = store[store.length - 1];\n            store.length > 1 && store.pop();\n\n            // Find top for all dataZoom.\n            var snapshot = {};\n            each(head, function (batchItem, dataZoomId) {\n                for (var i = store.length - 1; i >= 0; i--) {\n                    var batchItem = store[i][dataZoomId];\n                    if (batchItem) {\n                        snapshot[dataZoomId] = batchItem;\n                        break;\n                    }\n                }\n            });\n\n            return snapshot;\n        },\n\n        /**\n         * @public\n         */\n        clear: function (ecModel) {\n            ecModel[ATTR] = null;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {number} records. always >= 1.\n         */\n        count: function (ecModel) {\n            return giveStore(ecModel).length;\n        }\n\n    };\n\n    /**\n     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\n     * History length of each dataZoom may be different.\n     * this._history[0] is used to store origin range.\n     * @type {Array.<Object>}\n     */\n    function giveStore(ecModel) {\n        var store = ecModel[ATTR];\n        if (!store) {\n            store = ecModel[ATTR] = [{}];\n        }\n        return store;\n    }\n\n    module.exports = history;\n\n\n\n/***/ }),\n\n/***/ 1044:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n\n/***/ 1045:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var graphic = __webpack_require__(971);\n    var zrUtil = __webpack_require__(969);\n    var echarts = __webpack_require__(970);\n\n    __webpack_require__(1145);\n\n    __webpack_require__(1171);\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1046:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(974);\n    var curve = __webpack_require__(989);\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n/***/ }),\n\n/***/ 1047:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var env = __webpack_require__(976);\n\n    // Fix weird bug in some version of IE11 (like 11.0.9600.178**),\n    // where exception \"unexpected call to method or property access\"\n    // might be thrown when calling ctx.fill or ctx.stroke after a path\n    // whose area size is zero is drawn and ctx.clip() is called and\n    // shadowBlur is set. See #4572, #3112, #5777.\n    // (e.g.,\n    //  ctx.moveTo(10, 10);\n    //  ctx.lineTo(20, 10);\n    //  ctx.closePath();\n    //  ctx.clip();\n    //  ctx.shadowBlur = 10;\n    //  ...\n    //  ctx.fill();\n    // )\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = function (orignalBrush) {\n\n        // version string can be: '11.0'\n        return (env.browser.ie && env.browser.version >= 11)\n\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var clipPath = clipPaths[i];\n                        var shape = clipPath && clipPath.shape;\n                        var type = clipPath && clipPath.type;\n\n                        if (shape && (\n                            (type === 'sector' && shape.startAngle === shape.endAngle)\n                            || (type === 'rect' && (!shape.width || !shape.height))\n                        )) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                // It is save to put shadowTemp static, because shadowTemp\n                                // will be all modified each item brush called.\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                orignalBrush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n\n            : orignalBrush;\n    };\n\n\n\n/***/ }),\n\n/***/ 1048:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var graphic = __webpack_require__(971);\n    var BaseAxisPointer = __webpack_require__(1049);\n    var viewHelper = __webpack_require__(1021);\n    var cartesianAxisHelper = __webpack_require__(1050);\n    var AxisView = __webpack_require__(1012);\n\n    var CartesianAxisPointer = BaseAxisPointer.extend({\n\n        /**\n         * @override\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisPointerType = axisPointerModel.get('type');\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n            if (axisPointerType && axisPointerType !== 'none') {\n                var elStyle = viewHelper.buildElStyle(axisPointerModel);\n                var pointerOption = pointerShapeBuilder[axisPointerType](\n                    axis, pixelValue, otherExtent, elStyle\n                );\n                pointerOption.style = elStyle;\n                elOption.graphicKey = pointerOption.type;\n                elOption.pointer = pointerOption;\n            }\n\n            var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n            viewHelper.buildCartesianSingleLabelElOption(\n                value, elOption, layoutInfo, axisModel, axisPointerModel, api\n            );\n        },\n\n        /**\n         * @override\n         */\n        getHandleTransform: function (value, axisModel, axisPointerModel) {\n            var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n                labelInside: false\n            });\n            layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n            return {\n                position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n                rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n            };\n        },\n\n        /**\n         * @override\n         */\n        updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisExtent = axis.getGlobalExtent(true);\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var dimIndex = axis.dim === 'x' ? 0 : 1;\n\n            var currPosition = transform.position;\n            currPosition[dimIndex] += delta[dimIndex];\n            currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n            currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n\n            var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n            var cursorPoint = [cursorOtherValue, cursorOtherValue];\n            cursorPoint[dimIndex] = currPosition[dimIndex];\n\n            // Make tooltip do not overlap axisPointer and in the middle of the grid.\n            var tooltipOptions = [{verticalAlign: 'middle'}, {align: 'center'}];\n\n            return {\n                position: currPosition,\n                rotation: transform.rotation,\n                cursorPoint: cursorPoint,\n                tooltipOption: tooltipOptions[dimIndex]\n            };\n        }\n\n    });\n\n    function getCartesian(grid, axis) {\n        var opt = {};\n        opt[axis.dim + 'AxisIndex'] = axis.index;\n        return grid.getCartesian(opt);\n    }\n\n    var pointerShapeBuilder = {\n\n        line: function (axis, pixelValue, otherExtent, elStyle) {\n            var targetShape = viewHelper.makeLineShape(\n                [pixelValue, otherExtent[0]],\n                [pixelValue, otherExtent[1]],\n                getAxisDimIndex(axis)\n            );\n            graphic.subPixelOptimizeLine({\n                shape: targetShape,\n                style: elStyle\n            });\n            return {\n                type: 'Line',\n                shape: targetShape\n            };\n        },\n\n        shadow: function (axis, pixelValue, otherExtent, elStyle) {\n            var bandWidth = axis.getBandWidth();\n            var span = otherExtent[1] - otherExtent[0];\n            return {\n                type: 'Rect',\n                shape: viewHelper.makeRectShape(\n                    [pixelValue - bandWidth / 2, otherExtent[0]],\n                    [bandWidth, span],\n                    getAxisDimIndex(axis)\n                )\n            };\n        }\n    };\n\n    function getAxisDimIndex(axis) {\n        return axis.dim === 'x' ? 0 : 1;\n    }\n\n    AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\n\n    module.exports = CartesianAxisPointer;\n\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var clazzUtil = __webpack_require__(982);\n    var graphic = __webpack_require__(971);\n    var get = __webpack_require__(973).makeGetter();\n    var axisPointerModelHelper = __webpack_require__(1003);\n    var eventTool = __webpack_require__(988);\n    var throttle = __webpack_require__(1009);\n\n    var clone = zrUtil.clone;\n    var bind = zrUtil.bind;\n\n    /**\n     * Base axis pointer class in 2D.\n     * Implemenents {module:echarts/component/axis/IAxisPointer}.\n     */\n    function BaseAxisPointer () {\n    }\n\n    BaseAxisPointer.prototype = {\n\n        /**\n         * @private\n         */\n        _group: null,\n\n        /**\n         * @private\n         */\n        _lastGraphicKey: null,\n\n        /**\n         * @private\n         */\n        _handle: null,\n\n        /**\n         * @private\n         */\n        _dragging: false,\n\n        /**\n         * @private\n         */\n        _lastValue: null,\n\n        /**\n         * @private\n         */\n        _lastStatus: null,\n\n        /**\n         * @private\n         */\n        _payloadInfo: null,\n\n        /**\n         * In px, arbitrary value. Do not set too small,\n         * no animation is ok for most cases.\n         * @protected\n         */\n        animationThreshold: 15,\n\n        /**\n         * @implement\n         */\n        render: function (axisModel, axisPointerModel, api, forceRender) {\n            var value = axisPointerModel.get('value');\n            var status = axisPointerModel.get('status');\n\n            // Bind them to `this`, not in closure, otherwise they will not\n            // be replaced when user calling setOption in not merge mode.\n            this._axisModel = axisModel;\n            this._axisPointerModel = axisPointerModel;\n            this._api = api;\n\n            // Optimize: `render` will be called repeatly during mouse move.\n            // So it is power consuming if performing `render` each time,\n            // especially on mobile device.\n            if (!forceRender\n                && this._lastValue === value\n                && this._lastStatus === status\n            ) {\n                return;\n            }\n            this._lastValue = value;\n            this._lastStatus = status;\n\n            var group = this._group;\n            var handle = this._handle;\n\n            if (!status || status === 'hide') {\n                // Do not clear here, for animation better.\n                group && group.hide();\n                handle && handle.hide();\n                return;\n            }\n            group && group.show();\n            handle && handle.show();\n\n            // Otherwise status is 'show'\n            var elOption = {};\n            this.makeElOption(elOption, value, axisModel, axisPointerModel, api);\n\n            // Enable change axis pointer type.\n            var graphicKey = elOption.graphicKey;\n            if (graphicKey !== this._lastGraphicKey) {\n                this.clear(api);\n            }\n            this._lastGraphicKey = graphicKey;\n\n            var moveAnimation = this._moveAnimation =\n                this.determineAnimation(axisModel, axisPointerModel);\n\n            if (!group) {\n                group = this._group = new graphic.Group();\n                this.createPointerEl(group, elOption, axisModel, axisPointerModel);\n                this.createLabelEl(group, elOption, axisModel, axisPointerModel);\n                api.getZr().add(group);\n            }\n            else {\n                var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);\n                this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);\n                this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);\n            }\n\n            updateMandatoryProps(group, axisPointerModel, true);\n\n            this._renderHandle(value);\n        },\n\n        /**\n         * @implement\n         */\n        remove: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @implement\n         */\n        dispose: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @protected\n         */\n        determineAnimation: function (axisModel, axisPointerModel) {\n            var animation = axisPointerModel.get('animation');\n            var axis = axisModel.axis;\n            var isCategoryAxis = axis.type === 'category';\n            var useSnap = axisPointerModel.get('snap');\n\n            // Value axis without snap always do not snap.\n            if (!useSnap && !isCategoryAxis) {\n                return false;\n            }\n\n            if (animation === 'auto' || animation == null) {\n                var animationThreshold = this.animationThreshold;\n                if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {\n                    return true;\n                }\n\n                // It is important to auto animation when snap used. Consider if there is\n                // a dataZoom, animation will be disabled when too many points exist, while\n                // it will be enabled for better visual effect when little points exist.\n                if (useSnap) {\n                    var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;\n                    var axisExtent = axis.getExtent();\n                    // Approximate band width\n                    return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;\n                }\n\n                return false;\n            }\n\n            return animation === true;\n        },\n\n        /**\n         * add {pointer, label, graphicKey} to elOption\n         * @protected\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            // Shoule be implemenented by sub-class.\n        },\n\n        /**\n         * @protected\n         */\n        createPointerEl: function (group, elOption, axisModel, axisPointerModel) {\n            var pointerOption = elOption.pointer;\n            if (pointerOption) {\n                var pointerEl = get(group).pointerEl = new graphic[pointerOption.type](\n                    clone(elOption.pointer)\n                );\n                group.add(pointerEl);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        createLabelEl: function (group, elOption, axisModel, axisPointerModel) {\n            if (elOption.label) {\n                var labelEl = get(group).labelEl = new graphic.Rect(\n                    clone(elOption.label)\n                );\n\n                group.add(labelEl);\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updatePointerEl: function (group, elOption, updateProps) {\n            var pointerEl = get(group).pointerEl;\n            if (pointerEl) {\n                pointerEl.setStyle(elOption.pointer.style);\n                updateProps(pointerEl, {shape: elOption.pointer.shape});\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {\n            var labelEl = get(group).labelEl;\n            if (labelEl) {\n                labelEl.setStyle(elOption.label.style);\n                updateProps(labelEl, {\n                    // Consider text length change in vertical axis, animation should\n                    // be used on shape, otherwise the effect will be weird.\n                    shape: elOption.label.shape,\n                    position: elOption.label.position\n                });\n\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderHandle: function (value) {\n            if (this._dragging || !this.updateHandleTransform) {\n                return;\n            }\n\n            var axisPointerModel = this._axisPointerModel;\n            var zr = this._api.getZr();\n            var handle = this._handle;\n            var handleModel = axisPointerModel.getModel('handle');\n\n            var status = axisPointerModel.get('status');\n            if (!handleModel.get('show') || !status || status === 'hide') {\n                handle && zr.remove(handle);\n                this._handle = null;\n                return;\n            }\n\n            var isInit;\n            if (!this._handle) {\n                isInit = true;\n                handle = this._handle = graphic.createIcon(\n                    handleModel.get('icon'), \n                    {\n                        cursor: 'move',\n                        draggable: true,\n                        onmousemove: function (e) {\n                            // Fot mobile devicem, prevent screen slider on the button.\n                            eventTool.stop(e.event);\n                        },\n                        onmousedown: bind(this._onHandleDragMove, this, 0, 0),\n                        drift: bind(this._onHandleDragMove, this),\n                        ondragend: bind(this._onHandleDragEnd, this)\n                    }\n                );\n                zr.add(handle);\n            }\n\n            updateMandatoryProps(handle, axisPointerModel, false);\n\n            // update style\n            var includeStyles = [\n                'color', 'borderColor', 'borderWidth', 'opacity',\n                'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'\n            ];\n            handle.setStyle(handleModel.getItemStyle(null, includeStyles));\n\n            // update position\n            var handleSize = handleModel.get('size');\n            if (!zrUtil.isArray(handleSize)) {\n                handleSize = [handleSize, handleSize];\n            }\n            handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);\n\n            throttle.createOrUpdate(\n                this,\n                '_doDispatchAxisPointer',\n                handleModel.get('throttle') || 0,\n                'fixRate'\n            );\n\n            this._moveHandleToValue(value, isInit);\n        },\n\n        /**\n         * @private\n         */\n        _moveHandleToValue: function (value, isInit) {\n            updateProps(\n                this._axisPointerModel,\n                !isInit && this._moveAnimation,\n                this._handle,\n                getHandleTransProps(this.getHandleTransform(\n                    value, this._axisModel, this._axisPointerModel\n                ))\n            );\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragMove: function (dx, dy) {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            this._dragging = true;\n\n            // Persistent for throttle.\n            var trans = this.updateHandleTransform(\n                getHandleTransProps(handle),\n                [dx, dy],\n                this._axisModel,\n                this._axisPointerModel\n            );\n            this._payloadInfo = trans;\n\n            handle.stopAnimation();\n            handle.attr(getHandleTransProps(trans));\n            get(handle).lastProp = null;\n\n            this._doDispatchAxisPointer();\n        },\n\n        /**\n         * Throttled method.\n         * @private\n         */\n        _doDispatchAxisPointer: function () {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var payloadInfo = this._payloadInfo;\n            var axisModel = this._axisModel;\n            this._api.dispatchAction({\n                type: 'updateAxisPointer',\n                x: payloadInfo.cursorPoint[0],\n                y: payloadInfo.cursorPoint[1],\n                tooltipOption: payloadInfo.tooltipOption,\n                axesInfo: [{\n                    axisDim: axisModel.axis.dim,\n                    axisIndex: axisModel.componentIndex\n                }]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragEnd: function (moveAnimation) {\n            this._dragging = false;\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var value = this._axisPointerModel.get('value');\n            // Consider snap or categroy axis, handle may be not consistent with\n            // axisPointer. So move handle to align the exact value position when\n            // drag ended.\n            this._moveHandleToValue(value);\n\n            // For the effect: tooltip will be shown when finger holding on handle\n            // button, and will be hidden after finger left handle button.\n            this._api.dispatchAction({\n                type: 'hideTip'\n            });\n        },\n\n        /**\n         * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {number} value\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0}\n         */\n        getHandleTransform: null,\n\n        /**\n         * * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {Object} transform {position, rotation}\n         * @param {Array.<number>} delta [dx, dy]\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}\n         */\n        updateHandleTransform: null,\n\n        /**\n         * @private\n         */\n        clear: function (api) {\n            this._lastValue = null;\n            this._lastStatus = null;\n\n            var zr = api.getZr();\n            var group = this._group;\n            var handle = this._handle;\n            if (zr && group) {\n                this._lastGraphicKey = null;\n                group && zr.remove(group);\n                handle && zr.remove(handle);\n                this._group = null;\n                this._handle = null;\n                this._payloadInfo = null;\n            }\n        },\n\n        /**\n         * @protected\n         */\n        doClear: function () {\n            // Implemented by sub-class if necessary.\n        },\n\n        /**\n         * @protected\n         * @param {Array.<number>} xy\n         * @param {Array.<number>} wh\n         * @param {number} [xDimIndex=0] or 1\n         */\n        buildLabel: function (xy, wh, xDimIndex) {\n            xDimIndex = xDimIndex || 0;\n            return {\n                x: xy[xDimIndex],\n                y: xy[1 - xDimIndex],\n                width: wh[xDimIndex],\n                height: wh[1 - xDimIndex]\n            };\n        }\n    };\n\n    BaseAxisPointer.prototype.constructor = BaseAxisPointer;\n\n\n    function updateProps(animationModel, moveAnimation, el, props) {\n        // Animation optimize.\n        if (!propsEqual(get(el).lastProp, props)) {\n            get(el).lastProp = props;\n            moveAnimation\n                ? graphic.updateProps(el, props, animationModel)\n                : (el.stopAnimation(), el.attr(props));\n        }\n    }\n\n    function propsEqual(lastProps, newProps) {\n        if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {\n            var equals = true;\n            zrUtil.each(newProps, function (item, key) {\n                equals = equals && propsEqual(lastProps[key], item);\n            });\n            return !!equals;\n        }\n        else {\n            return lastProps === newProps;\n        }\n    }\n\n    function updateLabelShowHide(labelEl, axisPointerModel) {\n        labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();\n    }\n\n    function getHandleTransProps(trans) {\n        return {\n            position: trans.position.slice(),\n            rotation: trans.rotation || 0\n        };\n    }\n\n    function updateMandatoryProps(group, axisPointerModel, silent) {\n        var z = axisPointerModel.get('z');\n        var zlevel = axisPointerModel.get('zlevel');\n\n        group && group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n                el.silent = silent;\n            }\n        });\n    }\n\n    clazzUtil.enableClassExtend(BaseAxisPointer);\n\n    module.exports = BaseAxisPointer;\n\n\n/***/ }),\n\n/***/ 1050:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var helper = {};\n\n    /**\n     * @param {Object} opt {labelInside}\n     * @return {Object} {\n     *  position, rotation, labelDirection, labelOffset,\n     *  tickDirection, labelRotate, labelInterval, z2\n     * }\n     */\n    helper.layout = function (gridModel, axisModel, opt) {\n        opt = opt || {};\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n        var idx = {left: 0, right: 1, top: 0, bottom: 1, onZero: 2};\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posBound = axisDim === 'x'\n            ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset]\n            : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];\n\n        if (axis.onZero) {\n            var otherAxis = grid.getAxis(axisDim === 'x' ? 'y' : 'x', axis.onZeroAxisIndex);\n            var onZeroCoord = otherAxis.toGlobalCoord(otherAxis.dataToCoord(0));\n            posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0],\n            axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        layout.labelOffset = axis.onZero ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;\n\n        if (axisModel.get('axisTick.inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotate = axisModel.get('axisLabel.rotate');\n        layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    };\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ 1051:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var Model = __webpack_require__(977);\n\n    var LegendModel = __webpack_require__(970).extendComponentModel({\n\n        type: 'legend.plain',\n\n        dependencies: ['series'],\n\n        layoutMode: {\n            type: 'box',\n            // legend.width/height are maxWidth/maxHeight actually,\n            // whereas realy width/height is calculated by its content.\n            // (Setting {left: 10, right: 10} does not make sense).\n            // So consider the case:\n            // `setOption({legend: {left: 10});`\n            // then `setOption({legend: {right: 10});`\n            // The previous `left` should be cleared by setting `ignoreSize`.\n            ignoreSize: true\n        },\n\n        init: function (option, parentModel, ecModel) {\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            option.selected = option.selected || {};\n        },\n\n        mergeOption: function (option) {\n            LegendModel.superCall(this, 'mergeOption', option);\n        },\n\n        optionUpdated: function () {\n            this._updateData(this.ecModel);\n\n            var legendData = this._data;\n\n            // If selectedMode is single, try to select one\n            if (legendData[0] && this.get('selectedMode') === 'single') {\n                var hasSelected = false;\n                // If has any selected in option.selected\n                for (var i = 0; i < legendData.length; i++) {\n                    var name = legendData[i].get('name');\n                    if (this.isSelected(name)) {\n                        // Force to unselect others\n                        this.select(name);\n                        hasSelected = true;\n                        break;\n                    }\n                }\n                // Try select the first if selectedMode is single\n                !hasSelected && this.select(legendData[0].get('name'));\n            }\n        },\n\n        _updateData: function (ecModel) {\n            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\n                // Can be string or number\n                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\n                    dataItem = {\n                        name: dataItem\n                    };\n                }\n                return new Model(dataItem, this, this.ecModel);\n            }, this);\n            this._data = legendData;\n\n            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\n                return series.name;\n            });\n            ecModel.eachSeries(function (seriesModel) {\n                if (seriesModel.legendDataProvider) {\n                    var data = seriesModel.legendDataProvider();\n                    availableNames = availableNames.concat(data.mapArray(data.getName));\n                }\n            });\n            /**\n             * @type {Array.<string>}\n             * @private\n             */\n            this._availableNames = availableNames;\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Model>}\n         */\n        getData: function () {\n            return this._data;\n        },\n\n        /**\n         * @param {string} name\n         */\n        select: function (name) {\n            var selected = this.option.selected;\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                var data = this._data;\n                zrUtil.each(data, function (dataItem) {\n                    selected[dataItem.get('name')] = false;\n                });\n            }\n            selected[name] = true;\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            if (this.get('selectedMode') !== 'single') {\n                this.option.selected[name] = false;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var selected = this.option.selected;\n            // Default is true\n            if (!selected.hasOwnProperty(name)) {\n                selected[name] = true;\n            }\n            this[selected[name] ? 'unSelect' : 'select'](name);\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var selected = this.option.selected;\n            return !(selected.hasOwnProperty(name) && !selected[name])\n                && zrUtil.indexOf(this._availableNames, name) >= 0;\n        },\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 4,\n            show: true,\n\n            // 布局方式，默认为水平布局，可选为：\n            // 'horizontal' | 'vertical'\n            orient: 'horizontal',\n\n            left: 'center',\n            // right: 'center',\n\n            top: 0,\n            // bottom: null,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right'\n            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\n            align: 'auto',\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            // 图例边框颜色\n            borderColor: '#ccc',\n            borderRadius: 0,\n            // 图例边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n            // 图例内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n            // 各个item之间的间隔，单位px，默认为10，\n            // 横向布局时为水平间隔，纵向布局时为纵向间隔\n            itemGap: 10,\n            // 图例图形宽度\n            itemWidth: 25,\n            // 图例图形高度\n            itemHeight: 14,\n\n            // 图例关闭时候的颜色\n            inactiveColor: '#ccc',\n\n            textStyle: {\n                // 图例文字颜色\n                color: '#333'\n            },\n            // formatter: '',\n            // 选择模式，默认开启图例开关\n            selectedMode: true,\n            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\n            // selected: null,\n            // 图例内容（详见legend.data，数组中每一项代表一个item\n            // data: [],\n\n            // Tooltip 相关配置\n            tooltip: {\n                show: false\n            }\n        }\n    });\n\n    module.exports = LegendModel;\n\n\n/***/ }),\n\n/***/ 1052:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var symbolCreator = __webpack_require__(994);\n    var graphic = __webpack_require__(971);\n    var listComponentHelper = __webpack_require__(1042);\n    var layoutUtil = __webpack_require__(979);\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var Group = graphic.Group;\n\n    module.exports = __webpack_require__(970).extendComponentView({\n\n        type: 'legend.plain',\n\n        newlineDisabled: false,\n\n        /**\n         * @override\n         */\n        init: function () {\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._contentGroup = new Group());\n\n            /**\n             * @private\n             * @type {module:zrender/Element}\n             */\n            this._backgroundEl;\n        },\n\n        /**\n         * @protected\n         */\n        getContentGroup: function () {\n            return this._contentGroup;\n        },\n\n        /**\n         * @override\n         */\n        render: function (legendModel, ecModel, api) {\n\n            this.resetInner();\n\n            if (!legendModel.get('show', true)) {\n                return;\n            }\n\n            var itemAlign = legendModel.get('align');\n            if (!itemAlign || itemAlign === 'auto') {\n                itemAlign = (\n                    legendModel.get('left') === 'right'\n                    && legendModel.get('orient') === 'vertical'\n                ) ? 'right' : 'left';\n            }\n\n            this.renderInner(itemAlign, legendModel, ecModel, api);\n\n            // Perform layout.\n            var positionInfo = legendModel.getBoxLayoutParams();\n            var viewportSize = {width: api.getWidth(), height: api.getHeight()};\n            var padding = legendModel.get('padding');\n\n            var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n            var mainRect = this.layoutInner(legendModel, itemAlign, maxSize);\n\n            // Place mainGroup, based on the calculated `mainRect`.\n            var layoutRect = layoutUtil.getLayoutRect(\n                zrUtil.defaults({width: mainRect.width, height: mainRect.height}, positionInfo),\n                viewportSize,\n                padding\n            );\n            this.group.attr('position', [layoutRect.x - mainRect.x, layoutRect.y - mainRect.y]);\n\n            // Render background after group is layout.\n            this.group.add(\n                this._backgroundEl = listComponentHelper.makeBackground(mainRect, legendModel)\n            );\n        },\n\n        /**\n         * @protected\n         */\n        resetInner: function () {\n            this.getContentGroup().removeAll();\n            this._backgroundEl && this.group.remove(this._backgroundEl);\n        },\n\n        /**\n         * @protected\n         */\n        renderInner: function (itemAlign, legendModel, ecModel, api) {\n            var contentGroup = this.getContentGroup();\n            var legendDrawnMap = zrUtil.createHashMap();\n            var selectMode = legendModel.get('selectedMode');\n\n            each(legendModel.getData(), function (itemModel, dataIndex) {\n                var name = itemModel.get('name');\n\n                // Use empty string or \\n as a newline string\n                if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n                    contentGroup.add(new Group({\n                        newline: true\n                    }));\n                    return;\n                }\n\n                var seriesModel = ecModel.getSeriesByName(name)[0];\n\n                if (legendDrawnMap.get(name)) {\n                    // Have been drawed\n                    return;\n                }\n\n                // Series legend\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var color = data.getVisual('color');\n\n                    // If color is a callback function\n                    if (typeof color === 'function') {\n                        // Use the first data\n                        color = color(seriesModel.getDataParams(0));\n                    }\n\n                    // Using rect symbol defaultly\n                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n                    var symbolType = data.getVisual('symbol');\n\n                    var itemGroup = this._createItem(\n                        name, dataIndex, itemModel, legendModel,\n                        legendSymbolType, symbolType,\n                        itemAlign, color,\n                        selectMode\n                    );\n\n                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\n                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\n\n                    legendDrawnMap.set(name, true);\n                }\n                else {\n                    // Data legend of pie, funnel\n                    ecModel.eachRawSeries(function (seriesModel) {\n                        // In case multiple series has same data name\n                        if (legendDrawnMap.get(name)) {\n                            return;\n                        }\n                        if (seriesModel.legendDataProvider) {\n                            var data = seriesModel.legendDataProvider();\n                            var idx = data.indexOfName(name);\n                            if (idx < 0) {\n                                return;\n                            }\n\n                            var color = data.getItemVisual(idx, 'color');\n\n                            var legendSymbolType = 'roundRect';\n\n                            var itemGroup = this._createItem(\n                                name, dataIndex, itemModel, legendModel,\n                                legendSymbolType, null,\n                                itemAlign, color,\n                                selectMode\n                            );\n\n                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                                // FIXME Should not specify the series name\n                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\n                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\n\n                            legendDrawnMap.set(name, true);\n                        }\n                    }, this);\n                }\n\n                if (__DEV__) {\n                    if (!legendDrawnMap.get(name)) {\n                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n                    }\n                }\n            }, this);\n        },\n\n        _createItem: function (\n            name, dataIndex, itemModel, legendModel,\n            legendSymbolType, symbolType,\n            itemAlign, color, selectMode\n        ) {\n            var itemWidth = legendModel.get('itemWidth');\n            var itemHeight = legendModel.get('itemHeight');\n            var inactiveColor = legendModel.get('inactiveColor');\n\n            var isSelected = legendModel.isSelected(name);\n            var itemGroup = new Group();\n\n            var textStyleModel = itemModel.getModel('textStyle');\n\n            var itemIcon = itemModel.get('icon');\n\n            var tooltipModel = itemModel.getModel('tooltip');\n            var legendGlobalTooltipModel = tooltipModel.parentModel;\n\n            // Use user given icon first\n            legendSymbolType = itemIcon || legendSymbolType;\n            itemGroup.add(symbolCreator.createSymbol(\n                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\n            ));\n\n            // Compose symbols\n            // PENDING\n            if (!itemIcon && symbolType\n                // At least show one symbol, can't be all none\n                && ((symbolType !== legendSymbolType) || symbolType == 'none')\n            ) {\n                var size = itemHeight * 0.8;\n                if (symbolType === 'none') {\n                    symbolType = 'circle';\n                }\n                // Put symbol in the center\n                itemGroup.add(symbolCreator.createSymbol(\n                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\n                    isSelected ? color : inactiveColor\n                ));\n            }\n\n            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n            var textAlign = itemAlign;\n\n            var formatter = legendModel.get('formatter');\n            var content = name;\n            if (typeof formatter === 'string' && formatter) {\n                content = formatter.replace('{name}', name != null ? name : '');\n            }\n            else if (typeof formatter === 'function') {\n                content = formatter(name);\n            }\n\n            itemGroup.add(new graphic.Text({\n                style: graphic.setTextStyle({}, textStyleModel, {\n                    text: content,\n                    x: textX,\n                    y: itemHeight / 2,\n                    textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n                    textAlign: textAlign,\n                    textVerticalAlign: 'middle'\n                })\n            }));\n\n            // Add a invisible rect to increase the area of mouse hover\n            var hitRect = new graphic.Rect({\n                shape: itemGroup.getBoundingRect(),\n                invisible: true,\n                tooltip: tooltipModel.get('show') ? zrUtil.extend({\n                    content: name,\n                    // Defaul formatter\n                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\n                        return name;\n                    },\n                    formatterParams: {\n                        componentType: 'legend',\n                        legendIndex: legendModel.componentIndex,\n                        name: name,\n                        $vars: ['name']\n                    }\n                }, tooltipModel.option) : null\n            });\n            itemGroup.add(hitRect);\n\n            itemGroup.eachChild(function (child) {\n                child.silent = true;\n            });\n\n            hitRect.silent = !selectMode;\n\n            this.getContentGroup().add(itemGroup);\n\n            graphic.setHoverStyle(itemGroup);\n\n            itemGroup.__legendDataIndex = dataIndex;\n\n            return itemGroup;\n        },\n\n        /**\n         * @protected\n         */\n        layoutInner: function (legendModel, itemAlign, maxSize) {\n            var contentGroup = this.getContentGroup();\n\n            // Place items in contentGroup.\n            layoutUtil.box(\n                legendModel.get('orient'),\n                contentGroup,\n                legendModel.get('itemGap'),\n                maxSize.width,\n                maxSize.height\n            );\n\n            var contentRect = contentGroup.getBoundingRect();\n            contentGroup.attr('position', [-contentRect.x, -contentRect.y]);\n\n            return this.group.getBoundingRect();\n        }\n\n    });\n\n    function dispatchSelectAction(name, api) {\n        api.dispatchAction({\n            type: 'legendToggleSelect',\n            name: name\n        });\n    }\n\n    function dispatchHighlightAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'highlight',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    function dispatchDownplayAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'downplay',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n\n\n/***/ }),\n\n/***/ 1053:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Box selection tool.\n *\n * @module echarts/component/helper/BrushController\n */\n\n\n\n    var Eventful = __webpack_require__(990);\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var interactionMutex = __webpack_require__(1068);\n    var DataDiffer = __webpack_require__(1001);\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var map = zrUtil.map;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathPow = Math.pow;\n\n    var COVER_Z = 10000;\n    var UNSELECT_THRESHOLD = 6;\n    var MIN_RESIZE_LINE_WIDTH = 6;\n    var MUTEX_RESOURCE_KEY = 'globalPan';\n\n    var DIRECTION_MAP = {\n        w: [0, 0],\n        e: [0, 1],\n        n: [1, 0],\n        s: [1, 1]\n    };\n    var CURSOR_MAP = {\n        w: 'ew',\n        e: 'ew',\n        n: 'ns',\n        s: 'ns',\n        ne: 'nesw',\n        sw: 'nesw',\n        nw: 'nwse',\n        se: 'nwse'\n    };\n    var DEFAULT_BRUSH_OPT = {\n        brushStyle: {\n            lineWidth: 2,\n            stroke: 'rgba(0,0,0,0.3)',\n            fill: 'rgba(0,0,0,0.1)'\n        },\n        transformable: true,\n        brushMode: 'single',\n        removeOnClick: false\n    };\n\n    var baseUID = 0;\n\n    /**\n     * @alias module:echarts/component/helper/BrushController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     * @event module:echarts/component/helper/BrushController#brush\n     *        params:\n     *            areas: Array.<Array>, coord relates to container group,\n     *                                    If no container specified, to global.\n     *            opt {\n     *                isEnd: boolean,\n     *                removeOnClick: boolean\n     *            }\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function BrushController(zr) {\n\n        if (__DEV__) {\n            zrUtil.assert(zr);\n        }\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:zrender/zrender~ZRender}\n         * @private\n         */\n        this._zr = zr;\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *     'line', 'rect', 'polygon' or false\n         *     If passing false/null/undefined, disable brush.\n         *     If passing 'auto', determined by panel.defaultBrushType\n         * @private\n         * @type {string}\n         */\n        this._brushType;\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *\n         * @private\n         * @type {Object}\n         */\n        this._brushOption;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._panels;\n\n        /**\n         * @private\n         * @type {Array.<nubmer>}\n         */\n        this._track = [];\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._dragging;\n\n        /**\n         * @private\n         * @type {Array}\n         */\n        this._covers = [];\n\n        /**\n         * @private\n         * @type {moudule:zrender/container/Group}\n         */\n        this._creatingCover;\n\n        /**\n         * `true` means global panel\n         * @private\n         * @type {module:zrender/container/Group|boolean}\n         */\n        this._creatingPanel;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._enableGlobalPan;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        if (__DEV__) {\n            this._mounted;\n        }\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._uid = 'brushController_' + baseUID++;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._handlers = {};\n        each(mouseHandlers, function (handler, eventName) {\n            this._handlers[eventName] = zrUtil.bind(handler, this);\n        }, this);\n    }\n\n    BrushController.prototype = {\n\n        constructor: BrushController,\n\n        /**\n         * If set to null/undefined/false, select disabled.\n         * @param {Object} brushOption\n         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n         *                          If passing false/null/undefined, disable brush.\n         *                          If passing 'auto', determined by panel.defaultBrushType.\n         *                              ('auto' can not be used in global panel)\n         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n         * @param {boolean} [brushOption.transformable=true]\n         * @param {boolean} [brushOption.removeOnClick=false]\n         * @param {Object} [brushOption.brushStyle]\n         * @param {number} [brushOption.brushStyle.width]\n         * @param {number} [brushOption.brushStyle.lineWidth]\n         * @param {string} [brushOption.brushStyle.stroke]\n         * @param {string} [brushOption.brushStyle.fill]\n         * @param {number} [brushOption.z]\n         */\n        enableBrush: function (brushOption) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            this._brushType && doDisableBrush(this);\n            brushOption.brushType && doEnableBrush(this, brushOption);\n\n            return this;\n        },\n\n        /**\n         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n         *        Each items: {\n         *            panelId, // mandatory.\n         *            clipPath, // mandatory. function.\n         *            isTargetByCursor, // mandatory. function.\n         *            defaultBrushType, // optional, only used when brushType is 'auto'.\n         *            getLinearBrushOtherExtent, // optional. function.\n         *        }\n         */\n        setPanels: function (panelOpts) {\n            if (panelOpts && panelOpts.length) {\n                var panels = this._panels = {};\n                zrUtil.each(panelOpts, function (panelOpts) {\n                    panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n                });\n            }\n            else {\n                this._panels = null;\n            }\n            return this;\n        },\n\n        /**\n         * @param {Object} [opt]\n         * @return {boolean} [opt.enableGlobalPan=false]\n         */\n        mount: function (opt) {\n            opt = opt || {};\n\n            if (__DEV__) {\n                this._mounted = true; // should be at first.\n            }\n\n            this._enableGlobalPan = opt.enableGlobalPan;\n\n            var thisGroup = this.group;\n            this._zr.add(thisGroup);\n\n            thisGroup.attr({\n                position: opt.position || [0, 0],\n                rotation: opt.rotation || 0,\n                scale: opt.scale || [1, 1]\n            });\n            this._transform = thisGroup.getLocalTransform();\n\n            return this;\n        },\n\n        eachCover: function (cb, context) {\n            each(this._covers, cb, context);\n        },\n\n        /**\n         * Update covers.\n         * @param {Array.<Object>} brushOptionList Like:\n         *        [\n         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n         *            ...\n         *        ]\n         *        `brushType` is required in each cover info. (can not be 'auto')\n         *        `id` is not mandatory.\n         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n         *        If brushOptionList is null/undefined, all covers removed.\n         */\n        updateCovers: function (brushOptionList) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n            });\n\n            var tmpIdPrefix = '\\0-brush-index-';\n            var oldCovers = this._covers;\n            var newCovers = this._covers = [];\n            var controller = this;\n            var creatingCover = this._creatingCover;\n\n            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\n                .add(addOrUpdate)\n                .update(addOrUpdate)\n                .remove(remove)\n                .execute();\n\n            return this;\n\n            function getKey(brushOption, index) {\n                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\n                    + '-' + brushOption.brushType;\n            }\n\n            function oldGetKey(cover, index) {\n                return getKey(cover.__brushOption, index);\n            }\n\n            function addOrUpdate(newIndex, oldIndex) {\n                var newBrushOption = brushOptionList[newIndex];\n                // Consider setOption in event listener of brushSelect,\n                // where updating cover when creating should be forbiden.\n                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n                    newCovers[newIndex] = oldCovers[oldIndex];\n                }\n                else {\n                    var cover = newCovers[newIndex] = oldIndex != null\n                        ? (\n                            oldCovers[oldIndex].__brushOption = newBrushOption,\n                            oldCovers[oldIndex]\n                        )\n                        : endCreating(controller, createCover(controller, newBrushOption));\n                    updateCoverAfterCreation(controller, cover);\n                }\n            }\n\n            function remove(oldIndex) {\n                if (oldCovers[oldIndex] !== creatingCover) {\n                    controller.group.remove(oldCovers[oldIndex]);\n                }\n            }\n        },\n\n        unmount: function () {\n            if (__DEV__) {\n                if (!this._mounted) {\n                    return;\n                }\n            }\n\n            this.enableBrush(false);\n\n            // container may 'removeAll' outside.\n            clearCovers(this);\n            this._zr.remove(this.group);\n\n            if (__DEV__) {\n                this._mounted = false; // should be at last.\n            }\n\n            return this;\n        },\n\n        dispose: function () {\n            this.unmount();\n            this.off();\n        }\n    };\n\n    zrUtil.mixin(BrushController, Eventful);\n\n    function doEnableBrush(controller, brushOption) {\n        var zr = controller._zr;\n\n        // Consider roam, which takes globalPan too.\n        if (!controller._enableGlobalPan) {\n            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n        }\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.on(eventName, handler);\n        });\n\n        controller._brushType = brushOption.brushType;\n        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    }\n\n    function doDisableBrush(controller) {\n        var zr = controller._zr;\n\n        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.off(eventName, handler);\n        });\n\n        controller._brushType = controller._brushOption = null;\n    }\n\n    function createCover(controller, brushOption) {\n        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n        cover.__brushOption = brushOption;\n        updateZ(cover, brushOption);\n        controller.group.add(cover);\n        return cover;\n    }\n\n    function endCreating(controller, creatingCover) {\n        var coverRenderer = getCoverRenderer(creatingCover);\n        if (coverRenderer.endCreating) {\n            coverRenderer.endCreating(controller, creatingCover);\n            updateZ(creatingCover, creatingCover.__brushOption);\n        }\n        return creatingCover;\n    }\n\n    function updateCoverShape(controller, cover) {\n        var brushOption = cover.__brushOption;\n        getCoverRenderer(cover).updateCoverShape(\n            controller, cover, brushOption.range, brushOption\n        );\n    }\n\n    function updateZ(cover, brushOption) {\n        var z = brushOption.z;\n        z == null && (z = COVER_Z);\n        cover.traverse(function (el) {\n            el.z = z;\n            el.z2 = z; // Consider in given container.\n        });\n    }\n\n    function updateCoverAfterCreation(controller, cover) {\n        getCoverRenderer(cover).updateCommon(controller, cover);\n        updateCoverShape(controller, cover);\n    }\n\n    function getCoverRenderer(cover) {\n        return coverRenderers[cover.__brushOption.brushType];\n    }\n\n    // return target panel or `true` (means global panel)\n    function getPanelByPoint(controller, e, localCursorPoint) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panel;\n        var transform = controller._transform;\n        each(panels, function (pn) {\n            pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n        });\n        return panel;\n    }\n\n    // Return a panel or true\n    function getPanelByCover(controller, cover) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panelId = cover.__brushOption.panelId;\n        // User may give cover without coord sys info,\n        // which is then treated as global panel.\n        return panelId != null ? panels[panelId] : true;\n    }\n\n    function clearCovers(controller) {\n        var covers = controller._covers;\n        var originalLength = covers.length;\n        each(covers, function (cover) {\n            controller.group.remove(cover);\n        }, controller);\n        covers.length = 0;\n\n        return !!originalLength;\n    }\n\n    function trigger(controller, opt) {\n        var areas = map(controller._covers, function (cover) {\n            var brushOption = cover.__brushOption;\n            var range = zrUtil.clone(brushOption.range);\n            return {\n                brushType: brushOption.brushType,\n                panelId: brushOption.panelId,\n                range: range\n            };\n        });\n\n        controller.trigger('brush', areas, {\n            isEnd: !!opt.isEnd,\n            removeOnClick: !!opt.removeOnClick\n        });\n    }\n\n    function shouldShowCover(controller) {\n        var track = controller._track;\n\n        if (!track.length) {\n            return false;\n        }\n\n        var p2 = track[track.length - 1];\n        var p1 = track[0];\n        var dx = p2[0] - p1[0];\n        var dy = p2[1] - p1[1];\n        var dist = mathPow(dx * dx + dy * dy, 0.5);\n\n        return dist > UNSELECT_THRESHOLD;\n    }\n\n    function getTrackEnds(track) {\n        var tail = track.length - 1;\n        tail < 0 && (tail = 0);\n        return [track[0], track[tail]];\n    }\n\n    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n        var cover = new graphic.Group();\n\n        cover.add(new graphic.Rect({\n            name: 'main',\n            style: makeStyle(brushOption),\n            silent: true,\n            draggable: true,\n            cursor: 'move',\n            drift: curry(doDrift, controller, cover, 'nswe'),\n            ondragend: curry(trigger, controller, {isEnd: true})\n        }));\n\n        each(\n            edgeNames,\n            function (name) {\n                cover.add(new graphic.Rect({\n                    name: name,\n                    style: {opacity: 0},\n                    draggable: true,\n                    silent: true,\n                    invisible: true,\n                    drift: curry(doDrift, controller, cover, name),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            }\n        );\n\n        return cover;\n    }\n\n    function updateBaseRect(controller, cover, localRange, brushOption) {\n        var lineWidth = brushOption.brushStyle.lineWidth || 0;\n        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n        var x = localRange[0][0];\n        var y = localRange[1][0];\n        var xa = x - lineWidth / 2;\n        var ya = y - lineWidth / 2;\n        var x2 = localRange[0][1];\n        var y2 = localRange[1][1];\n        var x2a = x2 - handleSize + lineWidth / 2;\n        var y2a = y2 - handleSize + lineWidth / 2;\n        var width = x2 - x;\n        var height = y2 - y;\n        var widtha = width + lineWidth;\n        var heighta = height + lineWidth;\n\n        updateRectShape(controller, cover, 'main', x, y, width, height);\n\n        if (brushOption.transformable) {\n            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n\n            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n        }\n    }\n\n    function updateCommon(controller, cover) {\n        var brushOption = cover.__brushOption;\n        var transformable = brushOption.transformable;\n\n        var mainEl = cover.childAt(0);\n        mainEl.useStyle(makeStyle(brushOption));\n        mainEl.attr({\n            silent: !transformable,\n            cursor: transformable ? 'move' : 'default'\n        });\n\n        each(\n            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\n            function (name) {\n                var el = cover.childOfName(name);\n                var globalDir = getGlobalDirection(controller, name);\n\n                el && el.attr({\n                    silent: !transformable,\n                    invisible: !transformable,\n                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n                });\n            }\n        );\n    }\n\n    function updateRectShape(controller, cover, name, x, y, w, h) {\n        var el = cover.childOfName(name);\n        el && el.setShape(pointsToRect(\n            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\n        ));\n    }\n\n    function makeStyle(brushOption) {\n        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\n    }\n\n    function formatRectRange(x, y, x2, y2) {\n        var min = [mathMin(x, x2), mathMin(y, y2)];\n        var max = [mathMax(x, x2), mathMax(y, y2)];\n\n        return [\n            [min[0], max[0]], // x range\n            [min[1], max[1]] // y range\n        ];\n    }\n\n    function getTransform(controller) {\n        return graphic.getTransform(controller.group);\n    }\n\n    function getGlobalDirection(controller, localDirection) {\n        if (localDirection.length > 1) {\n            localDirection = localDirection.split('');\n            var globalDir = [\n                getGlobalDirection(controller, localDirection[0]),\n                getGlobalDirection(controller, localDirection[1])\n            ];\n            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n            return globalDir.join('');\n        }\n        else {\n            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\n            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\n            var globalDir = graphic.transformDirection(\n                map[localDirection], getTransform(controller)\n            );\n            return inverseMap[globalDir];\n        }\n    }\n\n    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n        var brushOption = cover.__brushOption;\n        var rectRange = toRectRange(brushOption.range);\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(name.split(''), function (namePart) {\n            var ind = DIRECTION_MAP[namePart];\n            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n        });\n\n        brushOption.range = fromRectRange(formatRectRange(\n            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\n        ));\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function driftPolygon(controller, cover, dx, dy, e) {\n        var range = cover.__brushOption.range;\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(range, function (point) {\n            point[0] += localDelta[0];\n            point[1] += localDelta[1];\n        });\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function toLocalDelta(controller, dx, dy) {\n        var thisGroup = controller.group;\n        var localD = thisGroup.transformCoordToLocal(dx, dy);\n        var localZero = thisGroup.transformCoordToLocal(0, 0);\n\n        return [localD[0] - localZero[0], localD[1] - localZero[1]];\n    }\n\n    function clipByPanel(controller, cover, data) {\n        var panel = getPanelByCover(controller, cover);\n\n        return (panel && panel !== true)\n            ? panel.clipPath(data, controller._transform)\n            : zrUtil.clone(data);\n    }\n\n    function pointsToRect(points) {\n        var xmin = mathMin(points[0][0], points[1][0]);\n        var ymin = mathMin(points[0][1], points[1][1]);\n        var xmax = mathMax(points[0][0], points[1][0]);\n        var ymax = mathMax(points[0][1], points[1][1]);\n\n        return {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin\n        };\n    }\n\n    function resetCursor(controller, e, localCursorPoint) {\n        // Check active\n        if (!controller._brushType) {\n            return;\n        }\n\n        var zr = controller._zr;\n        var covers = controller._covers;\n        var currPanel = getPanelByPoint(controller, e, localCursorPoint);\n\n        // Check whether in covers.\n        if (!controller._dragging) {\n            for (var i = 0; i < covers.length; i++) {\n                var brushOption = covers[i].__brushOption;\n                if (currPanel\n                    && (currPanel === true || brushOption.panelId === currPanel.panelId)\n                    && coverRenderers[brushOption.brushType].contain(\n                        covers[i], localCursorPoint[0], localCursorPoint[1]\n                    )\n                ) {\n                    // Use cursor style set on cover.\n                    return;\n                }\n            }\n        }\n\n        currPanel && zr.setCursorStyle('crosshair');\n    }\n\n    function preventDefault(e) {\n        var rawE = e.event;\n        rawE.preventDefault && rawE.preventDefault();\n    }\n\n    function mainShapeContain(cover, x, y) {\n        return cover.childOfName('main').contain(x, y);\n    }\n\n    function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n        var creatingCover = controller._creatingCover;\n        var panel = controller._creatingPanel;\n        var thisBrushOption = controller._brushOption;\n        var eventParams;\n\n        controller._track.push(localCursorPoint.slice());\n\n        if (shouldShowCover(controller) || creatingCover) {\n\n            if (panel && !creatingCover) {\n                thisBrushOption.brushMode === 'single' && clearCovers(controller);\n                var brushOption = zrUtil.clone(thisBrushOption);\n                brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n                brushOption.panelId = panel === true ? null : panel.panelId;\n                creatingCover = controller._creatingCover = createCover(controller, brushOption);\n                controller._covers.push(creatingCover);\n            }\n\n            if (creatingCover) {\n                var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n                var coverBrushOption = creatingCover.__brushOption;\n\n                coverBrushOption.range = coverRenderer.getCreatingRange(\n                    clipByPanel(controller, creatingCover, controller._track)\n                );\n\n                if (isEnd) {\n                    endCreating(controller, creatingCover);\n                    coverRenderer.updateCommon(controller, creatingCover);\n                }\n\n                updateCoverShape(controller, creatingCover);\n\n                eventParams = {isEnd: isEnd};\n            }\n        }\n        else if (\n            isEnd\n            && thisBrushOption.brushMode === 'single'\n            && thisBrushOption.removeOnClick\n        ) {\n            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n            // But a single click do not clear covers, because user may have casual\n            // clicks (for example, click on other component and do not expect covers\n            // disappear).\n            // Only some cover removed, trigger action, but not every click trigger action.\n            if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n                eventParams = {isEnd: isEnd, removeOnClick: true};\n            }\n        }\n\n        return eventParams;\n    }\n\n    function determineBrushType(brushType, panel) {\n        if (brushType === 'auto') {\n            if (__DEV__) {\n                zrUtil.assert(\n                    panel && panel.defaultBrushType,\n                    'MUST have defaultBrushType when brushType is \"atuo\"'\n                );\n            }\n            return panel.defaultBrushType;\n        }\n        return brushType;\n    }\n\n    var mouseHandlers = {\n\n        mousedown: function (e) {\n            if (this._dragging) {\n                // In case some browser do not support globalOut,\n                // and release mose out side the browser.\n                handleDragEnd.call(this, e);\n            }\n            else if (!e.target || !e.target.draggable) {\n\n                preventDefault(e);\n\n                var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n                this._creatingCover = null;\n                var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n                if (panel) {\n                    this._dragging = true;\n                    this._track = [localCursorPoint.slice()];\n                }\n            }\n        },\n\n        mousemove: function (e) {\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            resetCursor(this, e, localCursorPoint);\n\n            if (this._dragging) {\n\n                preventDefault(e);\n\n                var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n\n                eventParams && trigger(this, eventParams);\n            }\n        },\n\n        mouseup: handleDragEnd //,\n\n        // FIXME\n        // in tooltip, globalout should not be triggered.\n        // globalout: handleDragEnd\n    };\n\n    function handleDragEnd(e) {\n        if (this._dragging) {\n\n            preventDefault(e);\n\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n            var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);\n\n            this._dragging = false;\n            this._track = [];\n            this._creatingCover = null;\n\n            // trigger event shoule be at final, after procedure will be nested.\n            eventParams && trigger(this, eventParams);\n        }\n    }\n\n    /**\n     * key: brushType\n     * @type {Object}\n     */\n    var coverRenderers = {\n\n        lineX: getLineRenderer(0),\n\n        lineY: getLineRenderer(1),\n\n        rect: {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            return range;\n                        },\n                        function (range) {\n                            return range;\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                updateBaseRect(controller, cover, localRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        },\n\n        polygon: {\n            createCover: function (controller, brushOption) {\n                var cover = new graphic.Group();\n\n                // Do not use graphic.Polygon because graphic.Polyline do not close the\n                // border of the shape when drawing, which is a better experience for user.\n                cover.add(new graphic.Polyline({\n                    name: 'main',\n                    style: makeStyle(brushOption),\n                    silent: true\n                }));\n\n                return cover;\n            },\n            getCreatingRange: function (localTrack) {\n                return localTrack;\n            },\n            endCreating: function (controller, cover) {\n                cover.remove(cover.childAt(0));\n                // Use graphic.Polygon close the shape.\n                cover.add(new graphic.Polygon({\n                    name: 'main',\n                    draggable: true,\n                    drift: curry(driftPolygon, controller, cover),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                cover.childAt(0).setShape({\n                    points: clipByPanel(controller, cover, localRange)\n                });\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        }\n    };\n\n    function getLineRenderer(xyIndex) {\n        return {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            var rectRange = [range, [0, 100]];\n                            xyIndex && rectRange.reverse();\n                            return rectRange;\n                        },\n                        function (rectRange) {\n                            return rectRange[xyIndex];\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    [['w', 'e'], ['n', 's']][xyIndex]\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n\n                return [min, max];\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                var otherExtent;\n                // If brushWidth not specified, fit the panel.\n                var panel = getPanelByCover(controller, cover);\n                if (panel !== true && panel.getLinearBrushOtherExtent) {\n                    otherExtent = panel.getLinearBrushOtherExtent(\n                        xyIndex, controller._transform\n                    );\n                }\n                else {\n                    var zr = controller._zr;\n                    otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n                }\n                var rectRange = [localRange, otherExtent];\n                xyIndex && rectRange.reverse();\n\n                updateBaseRect(controller, cover, rectRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        };\n    }\n\n    module.exports = BrushController;\n\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, exports) {\n\n\n\n    var helper = {};\n\n    var IRRELEVANT_EXCLUDES = {'axisPointer': 1, 'tooltip': 1, 'brush': 1};\n\n    /**\n     * Avoid that: mouse click on a elements that is over geo or graph,\n     * but roam is triggered.\n     */\n    helper.onIrrelevantElement = function (e, api, targetCoordSysModel) {\n        var model = api.getComponentByElement(e.topTarget);\n        // If model is axisModel, it works only if it is injected with coordinateSystem.\n        var coordSys = model && model.coordinateSystem;\n        return model\n            && model !== targetCoordSysModel\n            && !IRRELEVANT_EXCLUDES[model.mainType]\n            && (coordSys && coordSys.model !== targetCoordSysModel);\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ 1055:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = __webpack_require__(971);\n    var Symbol = __webpack_require__(1074);\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis'),\n            cursorStyle: seriesModel.get('cursor')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n/***/ }),\n\n/***/ 1057:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textHelper = __webpack_require__(1024);\n    var BoundingRect = __webpack_require__(980);\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext2D} ctx\n         * @param  {Object} rect Displayable rect\n         */\n        drawRectText: function (ctx, rect) {\n            var style = this.style;\n\n            rect = style.textRect || rect;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            if (!textHelper.needDrawText(text, style)) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.transformText) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // transformText and textRotation can not be used at the same time.\n            textHelper.renderText(this, ctx, text, style, rect);\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n/***/ }),\n\n/***/ 1058:\n/***/ (function(module, exports) {\n\n\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(989);\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1060:\n/***/ (function(module, exports) {\n\n\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n/***/ }),\n\n/***/ 1061:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = __webpack_require__(1007);\n    var zrUtil = __webpack_require__(969);\n    var textContain = __webpack_require__(983);\n    var textHelper = __webpack_require__(1024);\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            // Use props with prefix 'text'.\n            style.fill = style.stroke = style.shadowBlur = style.shadowColor =\n                style.shadowOffsetX = style.shadowOffsetY = null;\n\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (!textHelper.needDrawText(text, style)) {\n                return;\n            }\n\n            this.setTransform(ctx);\n\n            textHelper.renderText(this, ctx, text, style);\n\n            this.restoreTransform(ctx);\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            if (!this._rect) {\n                var text = style.text;\n                text != null ? (text += '') : (text = '');\n\n                var rect = textContain.getBoundingRect(\n                    style.text + '',\n                    style.font,\n                    style.textAlign,\n                    style.textVerticalAlign,\n                    style.textPadding,\n                    style.rich\n                );\n\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n\n                if (textHelper.getStroke(style.textStroke, style.textStrokeWidth)) {\n                    var w = style.textStrokeWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n/***/ }),\n\n/***/ 1062:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var Gradient = __webpack_require__(1008);\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n/***/ }),\n\n/***/ 1063:\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = __webpack_require__(1031);\n    var env = __webpack_require__(976);\n    var zrUtil = __webpack_require__(969);\n\n    var Handler = __webpack_require__(1109);\n    var Storage = __webpack_require__(1111);\n    var Animation = __webpack_require__(1112);\n    var HandlerProxy = __webpack_require__(1113);\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: __webpack_require__(1115)\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.6.3';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function (dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function (id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // var start = new Date();\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n            // var end = new Date();\n\n            // var log = document.getElementById('log');\n            // if (log) {\n            //     log.innerHTML = log.innerHTML + '<br>' + (end - start);\n            // }\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n/***/ }),\n\n/***/ 1064:\n/***/ (function(module, exports, __webpack_require__) {\n\n// FIXME Better way to pack data in graphic element\n\n\n    __webpack_require__(1020);\n\n    __webpack_require__(1126);\n\n    __webpack_require__(1127);\n\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    __webpack_require__(970).registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    __webpack_require__(970).registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n/***/ }),\n\n/***/ 1065:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    // Do not contain scrollable legend, for sake of file size.\n\n    __webpack_require__(1051);\n    __webpack_require__(1129);\n    __webpack_require__(1052);\n\n    var echarts = __webpack_require__(970);\n    // Series Filter\n    echarts.registerProcessor(__webpack_require__(1130));\n\n    __webpack_require__(981).registerSubTypeDefaulter('legend', function () {\n        // Default 'plain' when no type specified.\n        return 'plain';\n    });\n\n\n\n/***/ }),\n\n/***/ 1067:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(1133);\n    __webpack_require__(1134);\n\n    __webpack_require__(1135);\n    __webpack_require__(1136);\n    __webpack_require__(1137);\n    __webpack_require__(1138);\n    __webpack_require__(1143);\n\n\n/***/ }),\n\n/***/ 1068:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var ATTR = '\\0_ec_interaction_mutex';\n\n    var interactionMutex = {\n\n        take: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            store[resourceKey] = userKey;\n        },\n\n        release: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            var uKey = store[resourceKey];\n\n            if (uKey === userKey) {\n                store[resourceKey] = null;\n            }\n        },\n\n        isTaken: function (zr, resourceKey) {\n            return !!getStore(zr)[resourceKey];\n        }\n    };\n\n    function getStore(zr) {\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    /**\n     * payload: {\n     *     type: 'takeGlobalCursor',\n     *     key: 'dataZoomSelect', or 'brush', or ...,\n     *         If no userKey, release global cursor.\n     * }\n     */\n    __webpack_require__(970).registerAction(\n        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\n        function () {}\n    );\n\n    module.exports = interactionMutex;\n\n\n/***/ }),\n\n/***/ 1069:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var modelUtil = __webpack_require__(973);\n    var brushHelper = __webpack_require__(1070);\n\n    var each = zrUtil.each;\n    var indexOf = zrUtil.indexOf;\n    var curry = zrUtil.curry;\n\n    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\n\n    // FIXME\n    // how to genarialize to more coordinate systems.\n    var INCLUDE_FINDER_MAIN_TYPES = [\n        'grid', 'xAxis', 'yAxis', 'geo', 'graph',\n        'polar', 'radiusAxis', 'angleAxis', 'bmap'\n    ];\n\n    /**\n     * [option in constructor]:\n     * {\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     * }\n     *\n     *\n     * [targetInfo]:\n     *\n     * There can be multiple axes in a single targetInfo. Consider the case\n     * of `grid` component, a targetInfo represents a grid which contains one or more\n     * cartesian and one or more axes. And consider the case of parallel system,\n     * which has multiple axes in a coordinate system.\n     * Can be {\n     *     panelId: ...,\n     *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n     *     coordSyses: all cartesians.\n     *     gridModel: <grid component>\n     *     xAxes: correspond to coordSyses on index\n     *     yAxes: correspond to coordSyses on index\n     * }\n     * or {\n     *     panelId: ...,\n     *     coordSys: <geo coord sys>\n     *     coordSyses: [<geo coord sys>]\n     *     geoModel: <geo component>\n     * }\n     *\n     *\n     * [panelOpt]:\n     *\n     * Make from targetInfo. Input to BrushController.\n     * {\n     *     panelId: ...,\n     *     rect: ...\n     * }\n     *\n     *\n     * [area]:\n     *\n     * Generated by BrushController or user input.\n     * {\n     *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n     *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     *     range: pixel range.\n     *     coordRange: representitive coord range (the first one of coordRanges).\n     *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n     * }\n     */\n\n    /**\n     * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n     *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} [opt]\n     * @param {Array.<string>} [opt.include] include coordinate system types.\n     */\n    function BrushTargetManager(option, ecModel, opt) {\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        var targetInfoList = this._targetInfoList = [];\n        var info = {};\n        var foundCpts = parseFinder(ecModel, option);\n\n        each(targetInfoBuilders, function (builder, type) {\n            if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n                builder(foundCpts, targetInfoList, info);\n            }\n        });\n    }\n\n    var proto = BrushTargetManager.prototype;\n\n    proto.setOutputRanges = function (areas, ecModel) {\n        this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            (area.coordRanges || (area.coordRanges = [])).push(coordRange);\n            // area.coordRange is the first of area.coordRanges\n            if (!area.coordRange) {\n                area.coordRange = coordRange;\n                // In 'category' axis, coord to pixel is not reversible, so we can not\n                // rebuild range by coordRange accrately, which may bring trouble when\n                // brushing only one item. So we use __rangeOffset to rebuilding range\n                // by coordRange. And this it only used in brush component so it is no\n                // need to be adapted to coordRanges.\n                var result = coordConvert[area.brushType](0, coordSys, coordRange);\n                area.__rangeOffset = {\n                    offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n                    xyMinMax: result.xyMinMax\n                };\n            }\n        });\n    };\n\n    proto.matchOutputRanges = function (areas, ecModel, cb) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (targetInfo && targetInfo !== true) {\n                zrUtil.each(\n                    targetInfo.coordSyses,\n                    function (coordSys) {\n                        var result = coordConvert[area.brushType](1, coordSys, area.range);\n                        cb(area, result.values, coordSys, ecModel);\n                    }\n                );\n            }\n        }, this);\n    };\n\n    proto.setInputRanges = function (areas, ecModel) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (__DEV__) {\n                zrUtil.assert(\n                    !targetInfo || targetInfo === true || area.coordRange,\n                    'coordRange must be specified when coord index specified.'\n                );\n                zrUtil.assert(\n                    !targetInfo || targetInfo !== true || area.range,\n                    'range must be specified in global brush.'\n                );\n            }\n\n            area.range = area.range || [];\n\n            // convert coordRange to global range and set panelId.\n            if (targetInfo && targetInfo !== true) {\n                area.panelId = targetInfo.panelId;\n                // (1) area.range shoule always be calculate from coordRange but does\n                // not keep its original value, for the sake of the dataZoom scenario,\n                // where area.coordRange remains unchanged but area.range may be changed.\n                // (2) Only support converting one coordRange to pixel range in brush\n                // component. So do not consider `coordRanges`.\n                // (3) About __rangeOffset, see comment above.\n                var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n                var rangeOffset = area.__rangeOffset;\n                area.range = rangeOffset\n                    ? diffProcessor[area.brushType](\n                        result.values,\n                        rangeOffset.offset,\n                        getScales(result.xyMinMax, rangeOffset.xyMinMax)\n                    )\n                    : result.values;\n            }\n        }, this);\n    };\n\n    proto.makePanelOpts = function (api, getDefaultBrushType) {\n        return zrUtil.map(this._targetInfoList, function (targetInfo) {\n            var rect = targetInfo.getPanelRect();\n            return {\n                panelId: targetInfo.panelId,\n                defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n                clipPath: brushHelper.makeRectPanelClipPath(rect),\n                isTargetByCursor: brushHelper.makeRectIsTargetByCursor(\n                    rect, api, targetInfo.coordSysModel\n                ),\n                getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n            };\n        });\n    };\n\n    proto.controlSeries = function (area, seriesModel, ecModel) {\n        // Check whether area is bound in coord, and series do not belong to that coord.\n        // If do not do this check, some brush (like lineX) will controll all axes.\n        var targetInfo = this.findTargetInfo(area, ecModel);\n        return targetInfo === true || (\n            targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0\n        );\n    };\n\n    /**\n     * If return Object, a coord found.\n     * If reutrn true, global found.\n     * Otherwise nothing found.\n     *\n     * @param {Object} area\n     * @param {Array} targetInfoList\n     * @return {Object|boolean}\n     */\n    proto.findTargetInfo = function (area, ecModel) {\n        var targetInfoList = this._targetInfoList;\n        var foundCpts = parseFinder(ecModel, area);\n\n        for (var i = 0; i < targetInfoList.length; i++) {\n            var targetInfo = targetInfoList[i];\n            var areaPanelId = area.panelId;\n            if (areaPanelId) {\n                if (targetInfo.panelId === areaPanelId) {\n                    return targetInfo;\n                }\n            }\n            else {\n                for (var i = 0; i < targetInfoMatchers.length; i++) {\n                    if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n                        return targetInfo;\n                    }\n                }\n            }\n        }\n\n        return true;\n    };\n\n    function formatMinMax(minMax) {\n        minMax[0] > minMax[1] && minMax.reverse();\n        return minMax;\n    }\n\n    function parseFinder(ecModel, option) {\n        return modelUtil.parseFinder(\n            ecModel, option, {includeMainTypes: INCLUDE_FINDER_MAIN_TYPES}\n        );\n    }\n\n    var targetInfoBuilders = {\n\n        grid: function (foundCpts, targetInfoList) {\n            var xAxisModels = foundCpts.xAxisModels;\n            var yAxisModels = foundCpts.yAxisModels;\n            var gridModels = foundCpts.gridModels;\n            // Remove duplicated.\n            var gridModelMap = zrUtil.createHashMap();\n            var xAxesHas = {};\n            var yAxesHas = {};\n\n            if (!xAxisModels && !yAxisModels && !gridModels) {\n                return;\n            }\n\n            each(xAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n            });\n            each(yAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                yAxesHas[gridModel.id] = true;\n            });\n            each(gridModels, function (gridModel) {\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n                yAxesHas[gridModel.id] = true;\n            });\n\n            gridModelMap.each(function (gridModel) {\n                var grid = gridModel.coordinateSystem;\n                var cartesians = [];\n\n                each(grid.getCartesians(), function (cartesian, index) {\n                    if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0\n                        || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0\n                    ) {\n                        cartesians.push(cartesian);\n                    }\n                });\n                targetInfoList.push({\n                    panelId: 'grid--' + gridModel.id,\n                    gridModel: gridModel,\n                    coordSysModel: gridModel,\n                    // Use the first one as the representitive coordSys.\n                    coordSys: cartesians[0],\n                    coordSyses: cartesians,\n                    getPanelRect: panelRectBuilder.grid,\n                    xAxisDeclared: xAxesHas[gridModel.id],\n                    yAxisDeclared: yAxesHas[gridModel.id]\n                });\n            });\n        },\n\n        geo: function (foundCpts, targetInfoList) {\n            each(foundCpts.geoModels, function (geoModel) {\n                var coordSys = geoModel.coordinateSystem;\n                targetInfoList.push({\n                    panelId: 'geo--' + geoModel.id,\n                    geoModel: geoModel,\n                    coordSysModel: geoModel,\n                    coordSys: coordSys,\n                    coordSyses: [coordSys],\n                    getPanelRect: panelRectBuilder.geo\n                });\n            });\n        }\n    };\n\n    var targetInfoMatchers = [\n\n        // grid\n        function (foundCpts, targetInfo) {\n            var xAxisModel = foundCpts.xAxisModel;\n            var yAxisModel = foundCpts.yAxisModel;\n            var gridModel = foundCpts.gridModel;\n\n            !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n            !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n\n            return gridModel && gridModel === targetInfo.gridModel;\n        },\n\n        // geo\n        function (foundCpts, targetInfo) {\n            var geoModel = foundCpts.geoModel;\n            return geoModel && geoModel === targetInfo.geoModel;\n        }\n    ];\n\n    var panelRectBuilder = {\n\n        grid: function () {\n            // grid is not Transformable.\n            return this.coordSys.grid.getRect().clone();\n        },\n\n        geo: function () {\n            var coordSys = this.coordSys;\n            var rect = coordSys.getBoundingRect().clone();\n            // geo roam and zoom transform\n            rect.applyTransform(graphic.getTransform(coordSys));\n            return rect;\n        }\n    };\n\n    var coordConvert = {\n\n        lineX: curry(axisConvert, 0),\n\n        lineY: curry(axisConvert, 1),\n\n        rect: function (to, coordSys, rangeOrCoordRange) {\n            var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n            var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n            var values = [\n                formatMinMax([xminymin[0], xmaxymax[0]]),\n                formatMinMax([xminymin[1], xmaxymax[1]])\n            ];\n            return {values: values, xyMinMax: values};\n        },\n\n        polygon: function (to, coordSys, rangeOrCoordRange) {\n            var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n            var values = zrUtil.map(rangeOrCoordRange, function (item) {\n                var p = coordSys[COORD_CONVERTS[to]](item);\n                xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n                xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n                xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n                xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n                return p;\n            });\n            return {values: values, xyMinMax: xyMinMax};\n        }\n    };\n\n    function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n        if (__DEV__) {\n            zrUtil.assert(\n                coordSys.type === 'cartesian2d',\n                'lineX/lineY brush is available only in cartesian2d.'\n            );\n        }\n\n        var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n        var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n            return to\n                ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i]))\n                : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n        }));\n        var xyMinMax = [];\n        xyMinMax[axisNameIndex] = values;\n        xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n\n        return {values: values, xyMinMax: xyMinMax};\n    }\n\n    var diffProcessor = {\n        lineX: curry(axisDiffProcessor, 0),\n\n        lineY: curry(axisDiffProcessor, 1),\n\n        rect: function (values, refer, scales) {\n            return [\n                [values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]],\n                [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]\n            ];\n        },\n\n        polygon: function (values, refer, scales) {\n            return zrUtil.map(values, function (item, idx) {\n                return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n            });\n        }\n    };\n\n    function axisDiffProcessor(axisNameIndex, values, refer, scales) {\n        return [\n            values[0] - scales[axisNameIndex] * refer[0],\n            values[1] - scales[axisNameIndex] * refer[1]\n        ];\n    }\n\n    // We have to process scale caused by dataZoom manually,\n    // although it might be not accurate.\n    function getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n        var sizeCurr = getSize(xyMinMaxCurr);\n        var sizeOrigin = getSize(xyMinMaxOrigin);\n        var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n        isNaN(scales[0]) && (scales[0] = 1);\n        isNaN(scales[1]) && (scales[1] = 1);\n        return scales;\n    }\n\n    function getSize(xyMinMax) {\n        return xyMinMax\n            ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]]\n            : [NaN, NaN];\n    }\n\n    module.exports = BrushTargetManager;\n\n\n/***/ }),\n\n/***/ 1070:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var cursorHelper = __webpack_require__(1054);\n    var BoundingRect = __webpack_require__(980);\n    var graphicUtil = __webpack_require__(971);\n\n    var helper = {};\n\n    helper.makeRectPanelClipPath = function (rect) {\n        rect = normalizeRect(rect);\n        return function (localPoints, transform) {\n            return graphicUtil.clipPointsByRect(localPoints, rect);\n        };\n    };\n\n    helper.makeLinearBrushOtherExtent = function (rect, specifiedXYIndex) {\n        rect = normalizeRect(rect);\n        return function (xyIndex) {\n            var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;\n            var brushWidth = idx ? rect.width : rect.height;\n            var base = idx ? rect.x : rect.y;\n            return [base, base + (brushWidth || 0)];\n        };\n    };\n\n    helper.makeRectIsTargetByCursor = function (rect, api, targetModel) {\n        rect = normalizeRect(rect);\n        return function (e, localCursorPoint, transform) {\n            return rect.contain(localCursorPoint[0], localCursorPoint[1])\n                && !cursorHelper.onIrrelevantElement(e, api, targetModel);\n        };\n    };\n\n    // Consider width/height is negative.\n    function normalizeRect(rect) {\n        return BoundingRect.create(rect);\n    }\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ 1071:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(981).registerSubTypeDefaulter('dataZoom', function () {\n        // Default 'slider' when no type specified.\n        return 'slider';\n    });\n\n\n\n/***/ }),\n\n/***/ 1072:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom processor\n */\n\n\n    var echarts = __webpack_require__(970);\n\n    echarts.registerProcessor(function (ecModel, api) {\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // We calculate window and reset axis here but not in model\n            // init stage and not after action dispatch handler, because\n            // reset should be called after seriesData.restoreData.\n            dataZoomModel.eachTargetAxis(resetSingleAxis);\n\n            // Caution: data zoom filtering is order sensitive when using\n            // percent range and no min/max/scale set on axis.\n            // For example, we have dataZoom definition:\n            // [\n            //      {xAxisIndex: 0, start: 30, end: 70},\n            //      {yAxisIndex: 0, start: 20, end: 80}\n            // ]\n            // In this case, [20, 80] of y-dataZoom should be based on data\n            // that have filtered by x-dataZoom using range of [30, 70],\n            // but should not be based on full raw data. Thus sliding\n            // x-dataZoom will change both ranges of xAxis and yAxis,\n            // while sliding y-dataZoom will only change the range of yAxis.\n            // So we should filter x-axis after reset x-axis immediately,\n            // and then reset y-axis and filter y-axis.\n            dataZoomModel.eachTargetAxis(filterSingleAxis);\n        });\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // Fullfill all of the range props so that user\n            // is able to get them from chart.getOption().\n            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n            var percentRange = axisProxy.getDataPercentWindow();\n            var valueRange = axisProxy.getDataValueWindow();\n\n            dataZoomModel.setRawRange({\n                start: percentRange[0],\n                end: percentRange[1],\n                startValue: valueRange[0],\n                endValue: valueRange[1]\n            }, true);\n        });\n    });\n\n    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n    }\n\n    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n    }\n\n\n\n\n/***/ }),\n\n/***/ 1073:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom action\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var helper = __webpack_require__(1018);\n    var echarts = __webpack_require__(970);\n\n\n    echarts.registerAction('dataZoom', function (payload, ecModel) {\n\n        var linkedNodesFinder = helper.createLinkedNodesFinder(\n            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\n            helper.eachAxisDim,\n            function (model, dimNames) {\n                return model.get(dimNames.axisIndex);\n            }\n        );\n\n        var effectedModels = [];\n\n        ecModel.eachComponent(\n            {mainType: 'dataZoom', query: payload},\n            function (model, index) {\n                effectedModels.push.apply(\n                    effectedModels, linkedNodesFinder(model).nodes\n                );\n            }\n        );\n\n        zrUtil.each(effectedModels, function (dataZoomModel, index) {\n            dataZoomModel.setRawRange({\n                start: payload.start,\n                end: payload.end,\n                startValue: payload.startValue,\n                endValue: payload.endValue\n            });\n        });\n\n    });\n\n\n\n/***/ }),\n\n/***/ 1074:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var symbolUtil = __webpack_require__(994);\n    var graphic = __webpack_require__(971);\n    var numberUtil = __webpack_require__(972);\n    var labelHelper = __webpack_require__(1150);\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            symbolPath.silent = false;\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n        var cursorStyle = seriesScope && seriesScope.cursorStyle;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n            cursorStyle = itemModel.getShallow('cursor');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        cursorStyle && symbolPath.attr('cursor', cursorStyle);\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        var valueDim = labelHelper.findLabelValueDim(data);\n\n        if (valueDim != null) {\n            graphic.setLabelStyle(\n                elStyle, hoverItemStyle, labelModel, hoverLabelModel,\n                {\n                    labelFetcher: seriesModel,\n                    labelDataIndex: idx,\n                    defaultText: data.get(valueDim, idx),\n                    isRectText: true,\n                    autoColor: color\n                }\n            );\n        }\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        // FIXME\n        // Do not use symbol.trigger('emphasis'), but use symbol.highlight() instead.\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = symbolPath.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = null;\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n/***/ }),\n\n/***/ 1075:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var axisDefault = __webpack_require__(1152);\n    var zrUtil = __webpack_require__(969);\n    var ComponentModel = __webpack_require__(981);\n    var layout = __webpack_require__(979);\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n/***/ }),\n\n/***/ 1077:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var Model = __webpack_require__(977);\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = __webpack_require__(981);\n\n    var globalDefault = __webpack_require__(1104);\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption(null);\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap.get(mainType), newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap.set(mainType, []);\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap.get(mainType)[index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap.get(mainType);\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap.get(mainType);\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts.slice();\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap.get(mainType);\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                componentsMap.each(function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap.get(mainType), cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.get('series')[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.get('series').slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.get('series'), cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getCurrentSeriesIndices: function () {\n            return (this._seriesIndices || []).slice();\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.get('series'), cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n\n            var componentTypes = [];\n            componentsMap.each(function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap.get(componentType), function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * Init with series: [], in case of calling findSeries method\n         * before series initialized.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = zrUtil.createHashMap({series: []});\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap.get(type) || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Option should contains series.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, __webpack_require__(1037));\n\n    module.exports = GlobalModel;\n\n\n/***/ }),\n\n/***/ 1078:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getLineStyle = __webpack_require__(1004)(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1079:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    module.exports = {\n        getAreaStyle: __webpack_require__(1004)(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n/***/ }),\n\n/***/ 1080:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textContain = __webpack_require__(983);\n    var graphicUtil = __webpack_require__(971);\n\n    var PATH_COLOR = ['textStyle', 'color'];\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @param {boolean} [isEmphasis]\n         * @return {string}\n         */\n        getTextColor: function (isEmphasis) {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (\n                    (!isEmphasis && ecModel) ? ecModel.get(PATH_COLOR) : null\n                );\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            return graphicUtil.getFont({\n                fontStyle: this.getShallow('fontStyle'),\n                fontWeight: this.getShallow('fontWeight'),\n                fontSize: this.getShallow('fontSize'),\n                fontFamily: this.getShallow('fontFamily')\n            }, this.ecModel);\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('verticalAlign') || this.getShallow('baseline'),\n                this.getShallow('padding'),\n                this.getShallow('rich'),\n                this.getShallow('truncateText')\n            );\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1081:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Path = __webpack_require__(978);\n    var PathProxy = __webpack_require__(997);\n    var transformPath = __webpack_require__(1088);\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1082:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = __webpack_require__(1032);\n    var util = __webpack_require__(969);\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = __webpack_require__(1023);\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path The path to fetch value from object, like 'a.b.c'.\n         * @param {boolean} [loop] Whether to loop animation.\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * Caution: this method will stop previous animation.\n         * So do not use this method to one element twice before\n         * animation starts, unless you know what you are doing.\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         * @param {Function} [forceAnimate] Prevent stop animation and callback\n         *        immediently when target values are the same as current values.\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback, forceAnimate) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing, forceAnimate);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n/***/ }),\n\n/***/ 1083:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = __webpack_require__(1084);\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n/***/ }),\n\n/***/ 1084:\n/***/ (function(module, exports) {\n\n/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n/***/ }),\n\n/***/ 1085:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var CMD = __webpack_require__(997).CMD;\n    var line = __webpack_require__(1058);\n    var cubic = __webpack_require__(1086);\n    var quadratic = __webpack_require__(1059);\n    var arc = __webpack_require__(1087);\n    var normalizeRadian = __webpack_require__(1034).normalizeRadian;\n    var curve = __webpack_require__(989);\n\n    var windingLine = __webpack_require__(1060);\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1086:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(989);\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1087:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var normalizeRadian = __webpack_require__(1034).normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1088:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var CMD = __webpack_require__(997).CMD;\n    var vec2 = __webpack_require__(974);\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n/***/ }),\n\n/***/ 1089:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1090:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var Path = __webpack_require__(978);\n    var fixClipWithShadow = __webpack_require__(1047);\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: fixClipWithShadow(Path.prototype.brush),\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1091:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1092:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = __webpack_require__(1036);\n\n    module.exports = __webpack_require__(978).extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1093:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = __webpack_require__(974);\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n/***/ }),\n\n/***/ 1094:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = __webpack_require__(974);\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n/***/ }),\n\n/***/ 1095:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = __webpack_require__(1036);\n\n    module.exports = __webpack_require__(978).extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1096:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = __webpack_require__(1033);\n\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1097:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1098:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = __webpack_require__(989);\n    var vec2 = __webpack_require__(974);\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ 1099:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = __webpack_require__(978).extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1100:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CompoundPath to improve performance\n\n\n    var Path = __webpack_require__(978);\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1101:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var Gradient = __webpack_require__(1008);\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n/***/ }),\n\n/***/ 1102:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getItemStyle = __webpack_require__(1004)(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes, includes) {\n            var style = getItemStyle.call(this, excludes, includes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1103:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1104:\n/***/ (function(module, exports) {\n\n\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: 'auto',\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000,\n\n        // See: module:echarts/scale/Time\n        useUTC: false\n    };\n\n\n/***/ }),\n\n/***/ 1105:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption',\n        'getViewOfComponentModel', 'getViewOfSeriesModel'\n    ];\n    // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n/***/ }),\n\n/***/ 1106:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var ComponentModel = __webpack_require__(981);\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n/***/ }),\n\n/***/ 1107:\n/***/ (function(module, exports, __webpack_require__) {\n\n// Compatitable with 2.0\n\n\n    var zrUtil = __webpack_require__(969);\n    var compatStyle = __webpack_require__(1108);\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option, isTheme) {\n        compatStyle(option, isTheme);\n\n        var series = option.series;\n        each(zrUtil.isArray(series) ? series : [series], function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n\n/***/ 1108:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (!itemStyleOpt) {\n            return;\n        }\n        for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {\n            var styleName = POSSIBLE_STYLES[i];\n            var normalItemStyleOpt = itemStyleOpt.normal;\n            var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n            if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                opt[styleName] = opt[styleName] || {};\n                if (!opt[styleName].normal) {\n                    opt[styleName].normal = normalItemStyleOpt[styleName];\n                }\n                else {\n                    zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                }\n                normalItemStyleOpt[styleName] = null;\n            }\n            if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                opt[styleName] = opt[styleName] || {};\n                if (!opt[styleName].emphasis) {\n                    opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                }\n                else {\n                    zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                }\n                emphasisItemStyleOpt[styleName] = null;\n            }\n        }\n    }\n\n    function compatTextStyle(opt, propName) {\n        var labelOptSingle = isObject(opt) && opt[propName];\n        var textStyle = isObject(labelOptSingle) && labelOptSingle.textStyle;\n        if (textStyle) {\n            for (var i = 0, len = modelUtil.TEXT_STYLE_OPTIONS.length; i < len; i++) {\n                var propName = modelUtil.TEXT_STYLE_OPTIONS[i];\n                if (textStyle.hasOwnProperty(propName)) {\n                    labelOptSingle[propName] = textStyle[propName];\n                }\n            }\n        }\n    }\n\n    function compatLabelTextStyle(labelOpt) {\n        if (isObject(labelOpt)) {\n            compatTextStyle(labelOpt, 'normal');\n            compatTextStyle(labelOpt, 'emphasis');\n        }\n    }\n\n    function processSeries(seriesOpt) {\n        if (!isObject(seriesOpt)) {\n            return;\n        }\n\n        compatItemStyle(seriesOpt);\n        compatLabelTextStyle(seriesOpt.label);\n        // treemap\n        compatLabelTextStyle(seriesOpt.upperLabel);\n        // graph\n        compatLabelTextStyle(seriesOpt.edgeLabel);\n\n        var markPoint = seriesOpt.markPoint;\n        compatItemStyle(markPoint);\n        compatLabelTextStyle(markPoint && markPoint.label);\n\n        var markLine = seriesOpt.markLine;\n        compatItemStyle(seriesOpt.markLine);\n        compatLabelTextStyle(markLine && markLine.label);\n\n        var markArea = seriesOpt.markArea;\n        compatLabelTextStyle(markArea && markArea.label);\n\n        // For gauge\n        compatTextStyle(seriesOpt, 'axisLabel');\n        compatTextStyle(seriesOpt, 'title');\n        compatTextStyle(seriesOpt, 'detail');\n\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n                compatLabelTextStyle(data[i] && data[i].label);\n            }\n        }\n\n        // mark point data\n        var markPoint = seriesOpt.markPoint;\n        if (markPoint && markPoint.data) {\n            var mpData = markPoint.data;\n            for (var i = 0; i < mpData.length; i++) {\n                compatItemStyle(mpData[i]);\n                compatLabelTextStyle(mpData[i] && mpData[i].label);\n            }\n        }\n        // mark line data\n        var markLine = seriesOpt.markLine;\n        if (markLine && markLine.data) {\n            var mlData = markLine.data;\n            for (var i = 0; i < mlData.length; i++) {\n                if (zrUtil.isArray(mlData[i])) {\n                    compatItemStyle(mlData[i][0]);\n                    compatLabelTextStyle(mlData[i][0] && mlData[i][0].label);\n                    compatItemStyle(mlData[i][1]);\n                    compatLabelTextStyle(mlData[i][1] && mlData[i][1].label);\n                }\n                else {\n                    compatItemStyle(mlData[i]);\n                    compatLabelTextStyle(mlData[i] && mlData[i].label);\n                }\n            }\n        }\n    }\n\n    function toArr(o) {\n        return zrUtil.isArray(o) ? o : o ? [o] : [];\n    }\n\n    function toObj(o) {\n        return (zrUtil.isArray(o) ? o[0] : o) || {};\n    }\n\n    module.exports = function (option, isTheme) {\n        each(toArr(option.series), function (seriesOpt) {\n            isObject(seriesOpt) && processSeries(seriesOpt);\n        });\n\n        var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];\n        isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');\n\n        each(\n            axes,\n            function (axisName) {\n                each(toArr(option[axisName]), function (axisOpt) {\n                    if (axisOpt) {\n                        compatTextStyle(axisOpt, 'axisLabel');\n                        compatTextStyle(axisOpt.axisPointer, 'label');\n                    }\n                });\n            }\n        );\n\n        each(toArr(option.parallel), function (parallelOpt) {\n            var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;\n            compatTextStyle(parallelAxisDefault, 'axisLabel');\n            compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');\n        });\n\n        each(toArr(option.calendar), function (calendarOpt) {\n            compatTextStyle(calendarOpt, 'dayLabel');\n            compatTextStyle(calendarOpt, 'monthLabel');\n            compatTextStyle(calendarOpt, 'yearLabel');\n        });\n\n        // radar.name.textStyle\n        each(toArr(option.radar), function (radarOpt) {\n            compatTextStyle(radarOpt, 'name');\n        });\n\n        each(toArr(option.geo), function (geoOpt) {\n            if (isObject(geoOpt)) {\n                compatLabelTextStyle(geoOpt.label);\n                each(toArr(geoOpt.regions), function (regionObj) {\n                    compatLabelTextStyle(regionObj.label);\n                });\n            }\n        });\n\n        compatLabelTextStyle(toObj(option.timeline).label);\n        compatTextStyle(toObj(option.axisPointer), 'label');\n        compatTextStyle(toObj(option.tooltip).axisPointer, 'label');\n    };\n\n\n/***/ }),\n\n/***/ 1109:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = __webpack_require__(969);\n    var vec2 = __webpack_require__(974);\n    var Draggable = __webpack_require__(1110);\n\n    var Eventful = __webpack_require__(990);\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch,\n            which: event.which\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget, x, y}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var lastHoveredTarget = lastHovered.target;\n\n            // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call\n            // (like 'setOption' or 'dispatchAction') in event handlers, we should find\n            // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.\n            // See #6198.\n            if (lastHoveredTarget && !lastHoveredTarget.__zr) {\n                lastHovered = this.findHover(lastHovered.x, lastHovered.y);\n                lastHoveredTarget = lastHovered.target;\n            }\n\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var el = targetInfo.target;\n            if (el && el.silent) {\n                return;\n            }\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {x: x, y: y};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downEl = hoveredTarget;\n                this._downPoint = [event.zrX, event.zrY];\n                // In case click triggered before mouseup\n                this._upEl = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upEl = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downEl !== this._upEl\n                    // Original click event is triggered on the whole canvas element,\n                    // including the case that `mousedown` - `mousemove` - `mouseup`,\n                    // which should be filtered, otherwise it will bring trouble to\n                    // pan and zoom.\n                    || !this._downPoint\n                    // Arbitrary value\n                    || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4\n                ) {\n                    return;\n                }\n                this._downPoint = null;\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                // FIXME: If clipPath has neither stroke nor fill,\n                // el.clipPath.contain(x, y) will always return false.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n\n/***/ }),\n\n/***/ 1110:\n/***/ (function(module, exports) {\n\n// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n/***/ }),\n\n/***/ 1111:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = __webpack_require__(969);\n    var env = __webpack_require__(976);\n\n    var Group = __webpack_require__(999);\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = __webpack_require__(1015);\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n/***/ }),\n\n/***/ 1112:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = __webpack_require__(969);\n    var Dispatcher = __webpack_require__(988).Dispatcher;\n\n    var requestAnimationFrame = __webpack_require__(1038);\n\n    var Animator = __webpack_require__(1032);\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n/***/ }),\n\n/***/ 1113:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var eventTool = __webpack_require__(988);\n    var zrUtil = __webpack_require__(969);\n    var Eventful = __webpack_require__(990);\n    var env = __webpack_require__(976);\n    var GestureMgr = __webpack_require__(1114);\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n/***/ }),\n\n/***/ 1114:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = __webpack_require__(988);\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n/***/ }),\n\n/***/ 1115:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = __webpack_require__(998);\n    var util = __webpack_require__(969);\n    var log = __webpack_require__(1023);\n    var BoundingRect = __webpack_require__(980);\n    var timsort = __webpack_require__(1015);\n\n    var Layer = __webpack_require__(1116);\n\n    var requestAnimationFrame = __webpack_require__(1038);\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Object} opts\n     */\n    var Painter = function (root, storage, opts) {\n\n        this.type = 'canvas';\n\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        getType: function () {\n            return 'canvas';\n        },\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        getViewportRootOffset: function () {\n            var viewportRoot = this.getViewportRoot();\n            if (viewportRoot) {\n                return {\n                    offsetLeft: viewportRoot.offsetLeft || 0,\n                    offsetTop: viewportRoot.offsetTop || 0\n                };\n            }\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            var zlevel;\n\n            var self = this;\n            function findAndDrawOtherLayer(smaller, larger) {\n                var zlevelList = self._zlevelList;\n                if (smaller == null) {\n                    smaller = -Infinity;\n                }\n                var intermediateLayer;\n                for (var i = 0; i < zlevelList.length; i++) {\n                    var z = zlevelList[i];\n                    var layer = self._layers[z];\n                    if (!layer.__builtin__ && z > smaller && z < larger) {\n                        intermediateLayer = layer;\n                        break;\n                    }\n                }\n                if (intermediateLayer && intermediateLayer.renderToCanvas) {\n                    imageLayer.ctx.save();\n                    intermediateLayer.renderToCanvas(imageLayer.ctx);\n                    imageLayer.ctx.restore();\n                }\n            }\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n\n                if (el.zlevel !== zlevel) {\n                    findAndDrawOtherLayer(zlevel, el.zlevel);\n                    zlevel = el.zlevel;\n                }\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            findAndDrawOtherLayer(zlevel, Infinity);\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            // IE8 does not support getComputedStyle, but it use VML.\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = __webpack_require__(1025);\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n/***/ }),\n\n/***/ 1116:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = __webpack_require__(969);\n    var config = __webpack_require__(998);\n    var Style = __webpack_require__(1029);\n    var Pattern = __webpack_require__(1035);\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n            this.ctx.__currentValues = {};\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n            this.ctxBack.__currentValues = {};\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n/***/ }),\n\n/***/ 1117:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var Gradient = __webpack_require__(1008);\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n/***/ }),\n\n/***/ 1118:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var graphic = __webpack_require__(971);\n    var zrUtil = __webpack_require__(969);\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n/***/ }),\n\n/***/ 1119:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = __webpack_require__(969);\n    var Scale = __webpack_require__(1002);\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n/***/ }),\n\n/***/ 1120:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    // [About UTC and local time zone]:\n    // In most cases, `number.parseDate` will treat input data string as local time\n    // (except time zone is specified in time string). And `format.formateTime` returns\n    // local time by default. option.useUTC is false by default. This design have\n    // concidered these common case:\n    // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed\n    // in local time by default.\n    // (2) By default, the input data string (e.g., '2011-01-02') should be displayed\n    // as its original time, without any time difference.\n\n    var zrUtil = __webpack_require__(969);\n    var numberUtil = __webpack_require__(972);\n    var formatUtil = __webpack_require__(975);\n    var scaleHelper = __webpack_require__(1039);\n\n    var IntervalScale = __webpack_require__(1010);\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        /**\n         * @override\n         */\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));\n        },\n\n        /**\n         * @override\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        /**\n         * @override\n         */\n        niceTicks: function (approxTickNum, minInterval, maxInterval) {\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n\n            if (minInterval != null && approxInterval < minInterval) {\n                approxInterval = minInterval;\n            }\n            if (maxInterval != null && approxInterval > maxInterval) {\n                approxInterval = maxInterval;\n            }\n\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var timezoneOffset = this.getSetting('useUTC')\n                ? 0 : (new Date(+extent[0] || +extent[1])).getTimezoneOffset() * 60 * 1000;\n            var niceExtent = [\n                Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset),\n                Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)\n            ];\n\n            scaleHelper.fixExtent(niceExtent, extent);\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @param {module:echarts/model/Model}\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function (model) {\n        return new TimeScale({useUTC: model.ecModel.get('useUTC')});\n    };\n\n    module.exports = TimeScale;\n\n\n/***/ }),\n\n/***/ 1121:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var Scale = __webpack_require__(1002);\n    var numberUtil = __webpack_require__(972);\n\n    // Use some method of IntervalScale\n    var IntervalScale = __webpack_require__(1010);\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @override\n         */\n        niceExtent: function (opt) {\n            intervalScaleProto.niceExtent.call(this, opt);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = opt.fixMin;\n            originalScale.__fixMax = opt.fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n/***/ }),\n\n/***/ 1122:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var createListFromArray = __webpack_require__(1006);\n    var symbolUtil = __webpack_require__(994);\n    var axisHelper = __webpack_require__(986);\n    var axisModelCommonMixin = __webpack_require__(1016);\n    var Model = __webpack_require__(977);\n    var util = __webpack_require__(969);\n\n    module.exports = {\n        /**\n         * Create a muti dimension List structure from seriesModel.\n         * @param  {module:echarts/model/Model} seriesModel\n         * @return {module:echarts/data/List} list\n         */\n        createList: function (seriesModel) {\n            var data = seriesModel.get('data');\n            return createListFromArray(data, seriesModel, seriesModel.ecModel);\n        },\n\n        /**\n         * @see {module:echarts/data/helper/completeDimensions}\n         */\n        completeDimensions: __webpack_require__(993),\n\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @see http://echarts.baidu.com/option.html#series-scatter.symbol\n         * @param {string} symbolDesc\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: symbolUtil.createSymbol,\n\n        /**\n         * Create scale\n         * @param {Array.<number>} dataExtent\n         * @param {Object|module:echarts/Model} option\n         */\n        createScale: function (dataExtent, option) {\n            var axisModel = option;\n            if (!(option instanceof Model)) {\n                axisModel = new Model(option);\n                util.mixin(axisModel, axisModelCommonMixin);\n            }\n\n            var scale = axisHelper.createScaleByModel(axisModel);\n            scale.setExtent(dataExtent[0], dataExtent[1]);\n\n            axisHelper.niceScaleExtent(scale, axisModel);\n            return scale;\n        },\n\n        /**\n         * Mixin common methods to axis model,\n         *\n         * Inlcude methods\n         * `getFormattedLabels() => Array.<string>`\n         * `getCategories() => Array.<string>`\n         * `getMin(origin: boolean) => number`\n         * `getMax(origin: boolean) => number`\n         * `getNeedCrossZero() => boolean`\n         * `setRange(start: number, end: number)`\n         * `resetRange()`\n         */\n        mixinAxisModelCommonMethods: function (Model) {\n            util.mixin(Model, axisModelCommonMixin);\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1123:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var modelHelper = __webpack_require__(1003);\n    var findPointFromSeries = __webpack_require__(1040);\n\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n    var get = modelUtil.makeGetter();\n\n    /**\n     * Basic logic: check all axis, if they do not demand show/highlight,\n     * then hide/downplay them.\n     *\n     * @param {Object} coordSysAxesInfo\n     * @param {Object} payload\n     * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n     * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n     *              trigger axisPointer and tooltip.\n     * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n     *              trigger axisPointer and tooltip.\n     * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n     * @param {Object} [payload.dataIndex] finder, restrict target axes.\n     * @param {Object} [payload.axesInfo] finder, restrict target axes.\n     *        [{\n     *          axisDim: 'x'|'y'|'angle'|...,\n     *          axisIndex: ...,\n     *          value: ...\n     *        }, ...]\n     * @param {Function} [payload.dispatchAction]\n     * @param {Object} [payload.tooltipOption]\n     * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n     *        which can be specified in dispatchAction\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     * @return {Object} content of event obj for echarts.connect.\n     */\n    function axisTrigger(payload, ecModel, api) {\n        var currTrigger = payload.currTrigger;\n        var point = [payload.x, payload.y];\n        var finder = payload;\n        var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n        var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n        // Pending\n        // See #6121. But we are not able to reproduce it yet.\n        if (!coordSysAxesInfo) {\n            return;\n        }\n\n        if (illegalPoint(point)) {\n            // Used in the default behavior of `connection`: use the sample seriesIndex\n            // and dataIndex. And also used in the tooltipView trigger.\n            point = findPointFromSeries({\n                seriesIndex: finder.seriesIndex,\n                // Do not use dataIndexInside from other ec instance.\n                // FIXME: auto detect it?\n                dataIndex: finder.dataIndex\n            }, ecModel).point;\n        }\n        var isIllegalPoint = illegalPoint(point);\n\n        // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n        // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n        // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n        // and dataIndex.\n        var inputAxesInfo = finder.axesInfo;\n\n        var axesInfo = coordSysAxesInfo.axesInfo;\n        var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n        var outputFinder = {};\n\n        var showValueMap = {};\n        var dataByCoordSys = {list: [], map: {}};\n        var updaters = {\n            showPointer: curry(showPointer, showValueMap),\n            showTooltip: curry(showTooltip, dataByCoordSys)\n        };\n\n        // Process for triggered axes.\n        each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n            // If a point given, it must be contained by the coordinate system.\n            var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n\n            each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n                var axis = axisInfo.axis;\n                var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo);\n                // If no inputAxesInfo, no axis is restricted.\n                if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n                    var val = inputAxisInfo && inputAxisInfo.value;\n                    if (val == null && !isIllegalPoint) {\n                        val = axis.pointToData(point);\n                    }\n                    val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n                }\n            });\n        });\n\n        // Process for linked axes.\n        var linkTriggers = {};\n        each(axesInfo, function (tarAxisInfo, tarKey) {\n            var linkGroup = tarAxisInfo.linkGroup;\n\n            // If axis has been triggered in the previous stage, it should not be triggered by link.\n            if (linkGroup && !showValueMap[tarKey]) {\n                each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n                    var srcValItem = showValueMap[srcKey];\n                    // If srcValItem exist, source axis is triggered, so link to target axis.\n                    if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n                        var val = srcValItem.value;\n                        linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(\n                            val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo)\n                        )));\n                        linkTriggers[tarAxisInfo.key] = val;\n                    }\n                });\n            }\n        });\n        each(linkTriggers, function (val, tarKey) {\n            processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n        });\n\n        updateModelActually(showValueMap, axesInfo, outputFinder);\n        dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n        dispatchHighDownActually(axesInfo, dispatchAction, api);\n\n        return outputFinder;\n    }\n\n    function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n        var axis = axisInfo.axis;\n\n        if (axis.scale.isBlank() || !axis.containData(newValue)) {\n            return;\n        }\n\n        if (!axisInfo.involveSeries) {\n            updaters.showPointer(axisInfo, newValue);\n            return;\n        }\n\n        // Heavy calculation. So put it after axis.containData checking.\n        var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n        var payloadBatch = payloadInfo.payloadBatch;\n        var snapToValue = payloadInfo.snapToValue;\n\n        // Fill content of event obj for echarts.connect.\n        // By defualt use the first involved series data as a sample to connect.\n        if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n            zrUtil.extend(outputFinder, payloadBatch[0]);\n        }\n\n        // If no linkSource input, this process is for collecting link\n        // target, where snap should not be accepted.\n        if (!dontSnap && axisInfo.snap) {\n            if (axis.containData(snapToValue) && snapToValue != null) {\n                newValue = snapToValue;\n            }\n        }\n\n        updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder);\n        // Tooltip should always be snapToValue, otherwise there will be\n        // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n        updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n    }\n\n    function buildPayloadsBySeries(value, axisInfo) {\n        var axis = axisInfo.axis;\n        var dim = axis.dim;\n        var snapToValue = value;\n        var payloadBatch = [];\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n\n        each(axisInfo.seriesModels, function (series, idx) {\n            var dataDim = series.coordDimToDataDim(dim);\n            var seriesNestestValue;\n            var dataIndices;\n\n            if (series.getAxisTooltipData) {\n                var result = series.getAxisTooltipData(dataDim, value, axis);\n                dataIndices = result.dataIndices;\n                seriesNestestValue = result.nestestValue;\n            }\n            else {\n                dataIndices = series.getData().indicesOfNearest(\n                    dataDim[0],\n                    value,\n                    // Add a threshold to avoid find the wrong dataIndex\n                    // when data length is not same.\n                    false, axis.type === 'category' ? 0.5 : null\n                );\n                if (!dataIndices.length) {\n                    return;\n                }\n                seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n            }\n\n            if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n                return;\n            }\n\n            var diff = value - seriesNestestValue;\n            var dist = Math.abs(diff);\n            // Consider category case\n            if (dist <= minDist) {\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    snapToValue = seriesNestestValue;\n                    payloadBatch.length = 0;\n                }\n                each(dataIndices, function (dataIndex) {\n                    payloadBatch.push({\n                        seriesIndex: series.seriesIndex,\n                        dataIndexInside: dataIndex,\n                        dataIndex: series.getData().getRawIndex(dataIndex)\n                    });\n                });\n            }\n        });\n\n        return {\n            payloadBatch: payloadBatch,\n            snapToValue: snapToValue\n        };\n    }\n\n    function showPointer(showValueMap, axisInfo, value, payloadBatch) {\n        showValueMap[axisInfo.key] = {value: value, payloadBatch: payloadBatch};\n    }\n\n    function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n        var payloadBatch = payloadInfo.payloadBatch;\n        var axis = axisInfo.axis;\n        var axisModel = axis.model;\n        var axisPointerModel = axisInfo.axisPointerModel;\n\n        // If no data, do not create anything in dataByCoordSys,\n        // whose length will be used to judge whether dispatch action.\n        if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n            return;\n        }\n\n        var coordSysModel = axisInfo.coordSys.model;\n        var coordSysKey = modelHelper.makeKey(coordSysModel);\n        var coordSysItem = dataByCoordSys.map[coordSysKey];\n        if (!coordSysItem) {\n            coordSysItem = dataByCoordSys.map[coordSysKey] = {\n                coordSysId: coordSysModel.id,\n                coordSysIndex: coordSysModel.componentIndex,\n                coordSysType: coordSysModel.type,\n                coordSysMainType: coordSysModel.mainType,\n                dataByAxis: []\n            };\n            dataByCoordSys.list.push(coordSysItem);\n        }\n\n        coordSysItem.dataByAxis.push({\n            axisDim: axis.dim,\n            axisIndex: axisModel.componentIndex,\n            axisType: axisModel.type,\n            axisId: axisModel.id,\n            value: value,\n            // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n            // depends that all models have been updated. So it should not be performed\n            // here. Considering axisPointerModel used here is volatile, which is hard\n            // to be retrieve in TooltipView, we prepare parameters here.\n            valueLabelOpt: {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            },\n            seriesDataIndices: payloadBatch.slice()\n        });\n    }\n\n    function updateModelActually(showValueMap, axesInfo, outputFinder) {\n        var outputAxesInfo = outputFinder.axesInfo = [];\n        // Basic logic: If no 'show' required, 'hide' this axisPointer.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            var valItem = showValueMap[key];\n\n            if (valItem) {\n                !axisInfo.useHandle && (option.status = 'show');\n                option.value = valItem.value;\n                // For label formatter param and highlight.\n                option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n            }\n            // When always show (e.g., handle used), remain\n            // original value and status.\n            else {\n                // If hide, value still need to be set, consider\n                // click legend to toggle axis blank.\n                !axisInfo.useHandle && (option.status = 'hide');\n            }\n\n            // If status is 'hide', should be no info in payload.\n            option.status === 'show' && outputAxesInfo.push({\n                axisDim: axisInfo.axis.dim,\n                axisIndex: axisInfo.axis.model.componentIndex,\n                value: option.value\n            });\n        });\n    }\n\n    function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n        // Basic logic: If no showTip required, hideTip will be dispatched.\n        if (illegalPoint(point) || !dataByCoordSys.list.length) {\n            dispatchAction({type: 'hideTip'});\n            return;\n        }\n\n        // In most case only one axis (or event one series is used). It is\n        // convinient to fetch payload.seriesIndex and payload.dataIndex\n        // dirtectly. So put the first seriesIndex and dataIndex of the first\n        // axis on the payload.\n        var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n\n        dispatchAction({\n            type: 'showTip',\n            escapeConnect: true,\n            x: point[0],\n            y: point[1],\n            tooltipOption: payload.tooltipOption,\n            position: payload.position,\n            dataIndexInside: sampleItem.dataIndexInside,\n            dataIndex: sampleItem.dataIndex,\n            seriesIndex: sampleItem.seriesIndex,\n            dataByCoordSys: dataByCoordSys.list\n        });\n    }\n\n    function dispatchHighDownActually(axesInfo, dispatchAction, api) {\n        // FIXME\n        // highlight status modification shoule be a stage of main process?\n        // (Consider confilct (e.g., legend and axisPointer) and setOption)\n\n        var zr = api.getZr();\n        var highDownKey = 'axisPointerLastHighlights';\n        var lastHighlights = get(zr)[highDownKey] || {};\n        var newHighlights = get(zr)[highDownKey] = {};\n\n        // Update highlight/downplay status according to axisPointer model.\n        // Build hash map and remove duplicate incidentally.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n                var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n                newHighlights[key] = batchItem;\n            });\n        });\n\n        // Diff.\n        var toHighlight = [];\n        var toDownplay = [];\n        zrUtil.each(lastHighlights, function (batchItem, key) {\n            !newHighlights[key] && toDownplay.push(batchItem);\n        });\n        zrUtil.each(newHighlights, function (batchItem, key) {\n            !lastHighlights[key] && toHighlight.push(batchItem);\n        });\n\n        toDownplay.length && api.dispatchAction({\n            type: 'downplay', escapeConnect: true, batch: toDownplay\n        });\n        toHighlight.length && api.dispatchAction({\n            type: 'highlight', escapeConnect: true, batch: toHighlight\n        });\n    }\n\n    function findInputAxisInfo(inputAxesInfo, axisInfo) {\n        for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n            var inputAxisInfo = inputAxesInfo[i];\n            if (axisInfo.axis.dim === inputAxisInfo.axisDim\n                && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex\n            ) {\n                return inputAxisInfo;\n            }\n        }\n    }\n\n    function makeMapperParam(axisInfo) {\n        var axisModel = axisInfo.axis.model;\n        var item = {};\n        var dim = item.axisDim = axisInfo.axis.dim;\n        item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n        item.axisName = item[dim + 'AxisName'] = axisModel.name;\n        item.axisId = item[dim + 'AxisId'] = axisModel.id;\n        return item;\n    }\n\n    function illegalPoint(point) {\n        return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n    }\n\n    module.exports = axisTrigger;\n\n\n/***/ }),\n\n/***/ 1124:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var echarts = __webpack_require__(970);\n\n    var AxisPointerModel = echarts.extendComponentModel({\n\n        type: 'axisPointer',\n\n        coordSysAxesInfo: null,\n\n        defaultOption: {\n            // 'auto' means that show when triggered by tooltip or handle.\n            show: 'auto',\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: null, // set default in AxisPonterView.js\n\n            zlevel: 0,\n            z: 50,\n\n            type: 'line',\n            // axispointer triggered by tootip determine snap automatically,\n            // see `modelHelper`.\n            snap: false,\n            triggerTooltip: true,\n\n            value: null,\n            status: null, // Init value depends on whether handle is used.\n\n            // [group0, group1, ...]\n            // Each group can be: {\n            //      mapper: function () {},\n            //      singleTooltip: 'multiple',  // 'multiple' or 'single'\n            //      xAxisId: ...,\n            //      yAxisName: ...,\n            //      angleAxisIndex: ...\n            // }\n            // mapper: can be ignored.\n            //      input: {axisInfo, value}\n            //      output: {axisInfo, value}\n            link: [],\n\n            // Do not set 'auto' here, otherwise global animation: false\n            // will not effect at this axispointer.\n            animation: null,\n            animationDurationUpdate: 200,\n\n            lineStyle: {\n                color: '#aaa',\n                width: 1,\n                type: 'solid'\n            },\n\n            shadowStyle: {\n                color: 'rgba(150,150,150,0.3)'\n            },\n\n            label: {\n                show: true,\n                formatter: null, // string | Function\n                precision: 'auto', // Or a number like 0, 1, 2 ...\n                margin: 3,\n                color: '#fff',\n                padding: [5, 7, 5, 7],\n                backgroundColor: 'auto', // default: axis line color\n                borderColor: null,\n                borderWidth: 0,\n                shadowBlur: 3,\n                shadowColor: '#aaa'\n                // Considering applicability, common style should\n                // better not have shadowOffset.\n                // shadowOffsetX: 0,\n                // shadowOffsetY: 2\n            },\n\n            handle: {\n                show: false,\n                icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z', // jshint ignore:line\n                size: 45,\n                // handle margin is from symbol center to axis, which is stable when circular move.\n                margin: 50,\n                // color: '#1b8bbd'\n                // color: '#2f4554'\n                color: '#333',\n                shadowBlur: 3,\n                shadowColor: '#aaa',\n                shadowOffsetX: 0,\n                shadowOffsetY: 2,\n\n                // For mobile performance\n                throttle: 40\n            }\n        }\n\n    });\n\n    module.exports = AxisPointerModel;\n\n\n\n/***/ }),\n\n/***/ 1125:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var globalListener = __webpack_require__(1041);\n\n    var AxisPonterView = __webpack_require__(970).extendComponentView({\n\n        type: 'axisPointer',\n\n        render: function (globalAxisPointerModel, ecModel, api) {\n            var globalTooltipModel = ecModel.getComponent('tooltip');\n            var triggerOn = globalAxisPointerModel.get('triggerOn')\n                || (globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click');\n\n            // Register global listener in AxisPointerView to enable\n            // AxisPointerView to be independent to Tooltip.\n            globalListener.register(\n                'axisPointer',\n                api,\n                function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none'\n                        && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)\n                    ) {\n                        dispatchAction({\n                            type: 'updateAxisPointer',\n                            currTrigger: currTrigger,\n                            x: e && e.offsetX,\n                            y: e && e.offsetY\n                        });\n                    }\n                }\n            );\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            globalListener.disopse(api.getZr(), 'axisPointer');\n            AxisPonterView.superApply(this._model, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            globalListener.unregister('axisPointer', api);\n            AxisPonterView.superApply(this._model, 'dispose', arguments);\n        }\n\n    });\n\n\n\n/***/ }),\n\n/***/ 1126:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(970).extendComponentModel({\n\n        type: 'tooltip',\n\n        dependencies: ['axisPointer'],\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 'trigger' only works on coordinate system.\n            // 'item' | 'axis' | 'none'\n            trigger: 'item',\n\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove|click',\n\n            alwaysShowContent: false,\n\n            displayMode: 'single', // 'single' | 'multipleByCoordSys'\n\n            // 位置 {Array} | {Function}\n            // position: null\n            // Consider triggered from axisPointer handle, verticalAlign should be 'middle'\n            // align: null,\n            // verticalAlign: null,\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: 'auto',\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                crossStyle: {\n                    color: '#999',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                }\n\n                // lineStyle and shadowStyle should not be specified here,\n                // otherwise it will always override those styles on option.axisPointer.\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1127:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var TooltipContent = __webpack_require__(1128);\n    var zrUtil = __webpack_require__(969);\n    var formatUtil = __webpack_require__(975);\n    var numberUtil = __webpack_require__(972);\n    var graphic = __webpack_require__(971);\n    var findPointFromSeries = __webpack_require__(1040);\n    var layoutUtil = __webpack_require__(979);\n    var env = __webpack_require__(976);\n    var Model = __webpack_require__(977);\n    var globalListener = __webpack_require__(1041);\n    var axisHelper = __webpack_require__(986);\n    var axisPointerViewHelper = __webpack_require__(1021);\n\n    var bind = zrUtil.bind;\n    var each = zrUtil.each;\n    var parsePercent = numberUtil.parsePercent;\n\n\n    var proxyRect = new graphic.Rect({\n        shape: {x: -1, y: -1, width: 2, height: 2}\n    });\n\n    __webpack_require__(970).extendComponentView({\n\n        type: 'tooltip',\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * Should be cleaned when render.\n             * @private\n             * @type {Array.<Array.<Object>>}\n             */\n            this._lastDataByCoordSys = null;\n\n            /**\n             * @private\n             * @type {boolean}\n             */\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.setEnterable(tooltipModel.get('enterable'));\n\n            this._initGlobalListener();\n\n            this._keepShow();\n        },\n\n        _initGlobalListener: function () {\n            var tooltipModel = this._tooltipModel;\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            globalListener.register(\n                'itemTooltip',\n                this._api,\n                bind(function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none') {\n                        if (triggerOn.indexOf(currTrigger) >= 0) {\n                            this._tryShow(e, dispatchAction);\n                        }\n                        else if (currTrigger === 'leave') {\n                            this._hide(dispatchAction);\n                        }\n                    }\n                }, this)\n            );\n        },\n\n        _keepShow: function () {\n            var tooltipModel = this._tooltipModel;\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && tooltipModel.get('triggerOn') !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid || env.node) {\n                return;\n            }\n\n            var dispatchAction = makeDispatchAction(payload, api);\n\n            // Reset ticket\n            this._ticket = '';\n\n            // When triggered from axisPointer.\n            var dataByCoordSys = payload.dataByCoordSys;\n\n            if (payload.tooltip && payload.x != null && payload.y != null) {\n                var el = proxyRect;\n                el.position = [payload.x, payload.y];\n                el.update();\n                el.tooltip = payload.tooltip;\n                // Manually show tooltip while view is not using zrender elements.\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    target: el\n                }, dispatchAction);\n            }\n            else if (dataByCoordSys) {\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    event: {},\n                    dataByCoordSys: payload.dataByCoordSys,\n                    tooltipOption: payload.tooltipOption\n                }, dispatchAction);\n            }\n            else if (payload.seriesIndex != null) {\n\n                if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {\n                    return;\n                }\n\n                var pointInfo = findPointFromSeries(payload, ecModel);\n                var cx = pointInfo.point[0];\n                var cy = pointInfo.point[1];\n                if (cx != null && cy != null) {\n                    this._tryShow({\n                        offsetX: cx,\n                        offsetY: cy,\n                        position: payload.position,\n                        target: pointInfo.el,\n                        event: {}\n                    }, dispatchAction);\n                }\n            }\n            else if (payload.x != null && payload.y != null) {\n                // FIXME\n                // should wrap dispatchAction like `axisPointer/globalListener` ?\n                api.dispatchAction({\n                    type: 'updateAxisPointer',\n                    x: payload.x,\n                    y: payload.y\n                });\n\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: api.getZr().findHover(payload.x, payload.y).target,\n                    event: {}\n                }, dispatchAction);\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            var tooltipContent = this._tooltipContent;\n\n            if (!this._alwaysShowContent) {\n                tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._lastX = this._lastY = null;\n\n            if (payload.from !== this.uid) {\n                this._hide(makeDispatchAction(payload, api));\n            }\n        },\n\n        // Be compatible with previous design, that is, when tooltip.type is 'axis' and\n        // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer\n        // and tooltip.\n        _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {\n            var seriesIndex = payload.seriesIndex;\n            var dataIndex = payload.dataIndex;\n            var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n            if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {\n                return;\n            }\n\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            if (!seriesModel) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                seriesModel,\n                (seriesModel.coordinateSystem || {}).model,\n                tooltipModel\n            ]);\n\n            if (tooltipModel.get('trigger') !== 'axis') {\n                return;\n            }\n\n            api.dispatchAction({\n                type: 'updateAxisPointer',\n                seriesIndex: seriesIndex,\n                dataIndex: dataIndex,\n                position: payload.position\n            });\n\n            return true;\n        },\n\n        _tryShow: function (e, dispatchAction) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            var dataByCoordSys = e.dataByCoordSys;\n            if (dataByCoordSys && dataByCoordSys.length) {\n                this._showAxisTooltip(dataByCoordSys, e);\n            }\n            // Always show item tooltip if mouse is on the element with dataIndex\n            else if (el && el.dataIndex != null) {\n                this._lastDataByCoordSys = null;\n                this._showSeriesItemTooltip(e, el, dispatchAction);\n            }\n            // Tooltip provided directly. Like legend.\n            else if (el && el.tooltip) {\n                this._lastDataByCoordSys = null;\n                this._showComponentItemTooltip(e, el, dispatchAction);\n            }\n            else {\n                this._lastDataByCoordSys = null;\n                this._hide(dispatchAction);\n            }\n        },\n\n        _showOrMove: function (tooltipModel, cb) {\n            // showDelay is used in this case: tooltip.enterable is set\n            // as true. User intent to move mouse into tooltip and click\n            // something. `showDelay` makes it easyer to enter the content\n            // but tooltip do not move immediately.\n            var delay = tooltipModel.get('showDelay');\n            cb = zrUtil.bind(cb, this);\n            clearTimeout(this._showTimout);\n            delay > 0\n                ? (this._showTimout = setTimeout(cb, delay))\n                : cb();\n        },\n\n        _showAxisTooltip: function (dataByCoordSys, e) {\n            var ecModel = this._ecModel;\n            var globalTooltipModel = this._tooltipModel;\n            var point = [e.offsetX, e.offsetY];\n            var singleDefaultHTML = [];\n            var singleParamsList = [];\n            var singleTooltipModel = buildTooltipModel([\n                e.tooltipOption,\n                globalTooltipModel\n            ]);\n\n            each(dataByCoordSys, function (itemCoordSys) {\n                // var coordParamList = [];\n                // var coordDefaultHTML = [];\n                // var coordTooltipModel = buildTooltipModel([\n                //     e.tooltipOption,\n                //     itemCoordSys.tooltipOption,\n                //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),\n                //     globalTooltipModel\n                // ]);\n                // var displayMode = coordTooltipModel.get('displayMode');\n                // var paramsList = displayMode === 'single' ? singleParamsList : [];\n\n                each(itemCoordSys.dataByAxis, function (item) {\n                    var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);\n                    var axisValue = item.value;\n                    var seriesDefaultHTML = [];\n\n                    if (!axisModel || axisValue == null) {\n                        return;\n                    }\n\n                    var valueLabel = axisPointerViewHelper.getValueLabel(\n                        axisValue, axisModel.axis, ecModel,\n                        item.seriesDataIndices,\n                        item.valueLabelOpt\n                    );\n\n                    zrUtil.each(item.seriesDataIndices, function (idxItem) {\n                        var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                        var dataIndex = idxItem.dataIndexInside;\n                        var dataParams = series && series.getDataParams(dataIndex);\n                        dataParams.axisDim = item.axisDim;\n                        dataParams.axisIndex = item.axisIndex;\n                        dataParams.axisType = item.axisType;\n                        dataParams.axisId = item.axisId;\n                        dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);\n                        dataParams.axisValueLabel = valueLabel;\n\n                        if (dataParams) {\n                            singleParamsList.push(dataParams);\n                            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));\n                        }\n                    });\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = valueLabel;\n                    singleDefaultHTML.push(\n                        (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + seriesDefaultHTML.join('<br />')\n                    );\n                });\n            }, this);\n\n            // In most case, the second axis is shown upper than the first one.\n            singleDefaultHTML.reverse();\n            singleDefaultHTML = singleDefaultHTML.join('<br /><br />');\n\n            var positionExpr = e.position;\n            this._showOrMove(singleTooltipModel, function () {\n                if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {\n                    this._updatePosition(\n                        singleTooltipModel,\n                        positionExpr,\n                        point[0], point[1],\n                        this._tooltipContent,\n                        singleParamsList\n                    );\n                }\n                else {\n                    this._showTooltipContent(\n                        singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(),\n                        point[0], point[1], positionExpr\n                    );\n                }\n            });\n\n            // Do not trigger events here, because this branch only be entered\n            // from dispatchAction.\n        },\n\n        _showSeriesItemTooltip: function (e, el, dispatchAction) {\n            var ecModel = this._ecModel;\n            // Use dataModel in element if possible\n            // Used when mouseover on a element like markPoint or edge\n            // In which case, the data is not main data in series.\n            var seriesIndex = el.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n\n            // For example, graph link.\n            var dataModel = el.dataModel || seriesModel;\n            var dataIndex = el.dataIndex;\n            var dataType = el.dataType;\n            var data = dataModel.getData();\n\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                dataModel,\n                seriesModel && (seriesModel.coordinateSystem || {}).model,\n                this._tooltipModel\n            ]);\n\n            var tooltipTrigger = tooltipModel.get('trigger');\n            if (tooltipTrigger != null && tooltipTrigger !== 'item') {\n                return;\n            }\n\n            var params = dataModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);\n            var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;\n\n            this._showOrMove(tooltipModel, function () {\n                this._showTooltipContent(\n                    tooltipModel, defaultHtml, params, asyncTicket,\n                    e.offsetX, e.offsetY, e.position, e.target\n                );\n            });\n\n            // FIXME\n            // duplicated showtip if manuallyShowTip is called from dispatchAction.\n            dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                dataIndex: data.getRawIndex(dataIndex),\n                seriesIndex: seriesIndex,\n                from: this.uid\n            });\n        },\n\n        _showComponentItemTooltip: function (e, el, dispatchAction) {\n            var tooltipOpt = el.tooltip;\n            if (typeof tooltipOpt === 'string') {\n                var content = tooltipOpt;\n                tooltipOpt = {\n                    content: content,\n                    // Fixed formatter\n                    formatter: content\n                };\n            }\n            var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);\n            var defaultHtml = subTooltipModel.get('content');\n            var asyncTicket = Math.random();\n\n            // Do not check whether `trigger` is 'none' here, because `trigger`\n            // only works on cooridinate system. In fact, we have not found case\n            // that requires setting `trigger` nothing on component yet.\n\n            this._showOrMove(subTooltipModel, function () {\n                this._showTooltipContent(\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el\n                );\n            });\n\n            // If not dispatch showTip, tip may be hide triggered by axis.\n            dispatchAction({\n                type: 'showTip',\n                from: this.uid\n            });\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {\n                return;\n            }\n\n            var tooltipContent = this._tooltipContent;\n\n            var formatter = tooltipModel.get('formatter');\n            positionExpr = positionExpr || tooltipModel.get('position');\n            var html = defaultHtml;\n\n            if (formatter && typeof formatter === 'string') {\n                html = formatUtil.formatTpl(formatter, params, true);\n            }\n            else if (typeof formatter === 'function') {\n                var callback = bind(function (cbTicket, html) {\n                    if (cbTicket === this._ticket) {\n                        tooltipContent.setContent(html);\n                        this._updatePosition(\n                            tooltipModel, positionExpr, x, y, tooltipContent, params, el\n                        );\n                    }\n                }, this);\n                this._ticket = asyncTicket;\n                html = formatter(params, asyncTicket, callback);\n            }\n\n            tooltipContent.setContent(html);\n            tooltipContent.show(tooltipModel);\n\n            this._updatePosition(\n                tooltipModel, positionExpr, x, y, tooltipContent, params, el\n            );\n        },\n\n        /**\n         * @param  {string|Function|Array.<number>|Object} positionExpr\n         * @param  {number} x Mouse x\n         * @param  {number} y Mouse y\n         * @param  {boolean} confine Whether confine tooltip content in view rect.\n         * @param  {Object|<Array.<Object>} params\n         * @param  {module:zrender/Element} el target element\n         * @param  {module:echarts/ExtensionAPI} api\n         * @return {Array.<number>}\n         */\n        _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {\n            var viewWidth = this._api.getWidth();\n            var viewHeight = this._api.getHeight();\n            positionExpr = positionExpr || tooltipModel.get('position');\n\n            var contentSize = content.getSize();\n            var align = tooltipModel.get('align');\n            var vAlign = tooltipModel.get('verticalAlign');\n            var rect = el && el.getBoundingRect().clone();\n            el && rect.applyTransform(el.transform);\n\n            if (typeof positionExpr === 'function') {\n                // Callback of position can be an array or a string specify the position\n                positionExpr = positionExpr([x, y], params, content.el, rect, {\n                    viewSize: [viewWidth, viewHeight],\n                    contentSize: contentSize.slice()\n                });\n            }\n\n            if (zrUtil.isArray(positionExpr)) {\n                x = parsePercent(positionExpr[0], viewWidth);\n                y = parsePercent(positionExpr[1], viewHeight);\n            }\n            else if (zrUtil.isObject(positionExpr)) {\n                positionExpr.width = contentSize[0];\n                positionExpr.height = contentSize[1];\n                var layoutRect = layoutUtil.getLayoutRect(\n                    positionExpr, {width: viewWidth, height: viewHeight}\n                );\n                x = layoutRect.x;\n                y = layoutRect.y;\n                align = null;\n                // When positionExpr is left/top/right/bottom,\n                // align and verticalAlign will not work.\n                vAlign = null;\n            }\n            // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n            else if (typeof positionExpr === 'string' && el) {\n                var pos = calcTooltipPosition(\n                    positionExpr, rect, contentSize\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n            else {\n                var pos = refixTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);\n            vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);\n\n            if (tooltipModel.get('confine')) {\n                var pos = confineTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            content.moveTo(x, y);\n        },\n\n        // FIXME\n        // Should we remove this but leave this to user?\n        _updateContentNotChangedOnAxis: function (dataByCoordSys) {\n            var lastCoordSys = this._lastDataByCoordSys;\n            var contentNotChanged = !!lastCoordSys\n                && lastCoordSys.length === dataByCoordSys.length;\n\n            contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {\n                var lastDataByAxis = lastItemCoordSys.dataByAxis || {};\n                var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};\n                var thisDataByAxis = thisItemCoordSys.dataByAxis || [];\n                contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;\n\n                contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {\n                    var thisItem = thisDataByAxis[indexAxis] || {};\n                    var lastIndices = lastItem.seriesDataIndices || [];\n                    var newIndices = thisItem.seriesDataIndices || [];\n\n                    contentNotChanged &=\n                        lastItem.value === thisItem.value\n                        && lastItem.axisType === thisItem.axisType\n                        && lastItem.axisId === thisItem.axisId\n                        && lastIndices.length === newIndices.length;\n\n                    contentNotChanged && each(lastIndices, function (lastIdxItem, j) {\n                        var newIdxItem = newIndices[j];\n                        contentNotChanged &=\n                            lastIdxItem.seriesIndex === newIdxItem.seriesIndex\n                            && lastIdxItem.dataIndex === newIdxItem.dataIndex;\n                    });\n                });\n            });\n\n            this._lastDataByCoordSys = dataByCoordSys;\n\n            return !!contentNotChanged;\n        },\n\n        _hide: function (dispatchAction) {\n            // Do not directly hideLater here, because this behavior may be prevented\n            // in dispatchAction when showTip is dispatched.\n\n            // FIXME\n            // duplicated hideTip if manuallyHideTip is called from dispatchAction.\n            this._lastDataByCoordSys = null;\n            dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            this._tooltipContent.hide();\n            globalListener.unregister('itemTooltip', api);\n        }\n    });\n\n\n    /**\n     * @param {Array.<Object|module:echarts/model/Model>} modelCascade\n     * From top to bottom. (the last one should be globalTooltipModel);\n     */\n    function buildTooltipModel(modelCascade) {\n        var resultModel = modelCascade.pop();\n        while (modelCascade.length) {\n            var tooltipOpt = modelCascade.pop();\n            if (tooltipOpt) {\n                if (tooltipOpt instanceof Model) {\n                    tooltipOpt = tooltipOpt.get('tooltip', true);\n                }\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                if (typeof tooltipOpt === 'string') {\n                    tooltipOpt = {formatter: tooltipOpt};\n                }\n                resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);\n            }\n        }\n        return resultModel;\n    }\n\n    function makeDispatchAction(payload, api) {\n        return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {\n        var size = getOuterSize(el);\n        var width = size.width;\n        var height = size.height;\n\n        if (gapH != null) {\n            if (x + width + gapH > viewWidth) {\n                x -= width + gapH;\n            }\n            else {\n                x += gapH;\n            }\n        }\n        if (gapV != null) {\n            if (y + height + gapV > viewHeight) {\n                y -= height + gapV;\n            }\n            else {\n                y += gapV;\n            }\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var size = getOuterSize(el);\n        var width = size.width;\n        var height = size.height;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function getOuterSize(el) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        // Consider browser compatibility.\n        // IE8 does not support getComputedStyle.\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n            var stl = document.defaultView.getComputedStyle(el);\n            if (stl) {\n                width += parseInt(stl.paddingLeft, 10) + parseInt(stl.paddingRight, 10)\n                    + parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n                height += parseInt(stl.paddingTop, 10) + parseInt(stl.paddingBottom, 10)\n                    + parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n            }\n        }\n\n        return {width: width, height: height};\n    }\n\n    function calcTooltipPosition(position, rect, contentSize) {\n        var domWidth = contentSize[0];\n        var domHeight = contentSize[1];\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    function isCenterAlign(align) {\n        return align === 'center' || align === 'middle';\n    }\n\n\n\n\n/***/ }),\n\n/***/ 1128:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var zrColor = __webpack_require__(991);\n    var eventUtil = __webpack_require__(988);\n    var formatUtil = __webpack_require__(975);\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = __webpack_require__(976);\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition. Do not animate when transitionDuration is 0.\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = this._zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self._enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self._enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self._enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            // FIXME\n            // Move this logic to ec main?\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            this.el.innerHTML = content == null ? '' : content;\n        },\n\n        setEnterable: function (enterable) {\n            this._enterable = enterable;\n        },\n\n        getSize: function () {\n            var el = this.el;\n            return [el.clientWidth, el.clientHeight];\n        },\n\n        moveTo: function (x, y) {\n            // xy should be based on canvas root. But tooltipContent is\n            // the sibling of canvas root. So padding of ec container\n            // should be considered here.\n            var zr = this._zr;\n            var viewportRootOffset;\n            if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {\n                x += viewportRootOffset.offsetLeft;\n                y += viewportRootOffset.offsetTop;\n            }\n\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this._enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n/***/ }),\n\n/***/ 1129:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Legend action\n */\n\n\n    var echarts = __webpack_require__(970);\n    var zrUtil = __webpack_require__(969);\n\n    function legendSelectActionHandler(methodName, payload, ecModel) {\n        var selectedMap = {};\n        var isToggleSelect = methodName === 'toggleSelected';\n        var isSelected;\n        // Update all legend components\n        ecModel.eachComponent('legend', function (legendModel) {\n            if (isToggleSelect && isSelected != null) {\n                // Force other legend has same selected status\n                // Or the first is toggled to true and other are toggled to false\n                // In the case one legend has some item unSelected in option. And if other legend\n                // doesn't has the item, they will assume it is selected.\n                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n            }\n            else {\n                legendModel[methodName](payload.name);\n                isSelected = legendModel.isSelected(payload.name);\n            }\n            var legendData = legendModel.getData();\n            zrUtil.each(legendData, function (model) {\n                var name = model.get('name');\n                // Wrap element\n                if (name === '\\n' || name === '') {\n                    return;\n                }\n                var isItemSelected = legendModel.isSelected(name);\n                if (selectedMap.hasOwnProperty(name)) {\n                    // Unselected if any legend is unselected\n                    selectedMap[name] = selectedMap[name] && isItemSelected;\n                }\n                else {\n                    selectedMap[name] = isItemSelected;\n                }\n            });\n        });\n        // Return the event explicitly\n        return {\n            name: payload.name,\n            selected: selectedMap\n        };\n    }\n    /**\n     * @event legendToggleSelect\n     * @type {Object}\n     * @property {string} type 'legendToggleSelect'\n     * @property {string} [from]\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendToggleSelect', 'legendselectchanged',\n        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\n    );\n\n    /**\n     * @event legendSelect\n     * @type {Object}\n     * @property {string} type 'legendSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendSelect', 'legendselected',\n        zrUtil.curry(legendSelectActionHandler, 'select')\n    );\n\n    /**\n     * @event legendUnSelect\n     * @type {Object}\n     * @property {string} type 'legendUnSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendUnSelect', 'legendunselected',\n        zrUtil.curry(legendSelectActionHandler, 'unSelect')\n    );\n\n\n\n/***/ }),\n\n/***/ 1130:\n/***/ (function(module, exports) {\n\n\n   module.exports = function (ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (legendModels && legendModels.length) {\n            ecModel.filterSeries(function (series) {\n                // If in any legend component the status is not selected.\n                // Because in legend series is assumed selected when it is not in the legend data.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(series.name)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n    };\n\n\n/***/ }),\n\n/***/ 1133:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var featureManager = __webpack_require__(987);\n    var zrUtil = __webpack_require__(969);\n\n    var ToolboxModel = __webpack_require__(970).extendComponentModel({\n\n        type: 'toolbox',\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        mergeDefaultAndTheme: function (option) {\n            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\n\n            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\n                var Feature = featureManager.get(featureName);\n                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\n            });\n        },\n\n        defaultOption: {\n\n            show: true,\n\n            z: 6,\n\n            zlevel: 0,\n\n            orient: 'horizontal',\n\n            left: 'right',\n\n            top: 'top',\n\n            // right\n            // bottom\n\n            backgroundColor: 'transparent',\n\n            borderColor: '#ccc',\n\n            borderRadius: 0,\n\n            borderWidth: 0,\n\n            padding: 5,\n\n            itemSize: 15,\n\n            itemGap: 8,\n\n            showTitle: true,\n\n            iconStyle: {\n                normal: {\n                    borderColor: '#666',\n                    color: 'none'\n                },\n                emphasis: {\n                    borderColor: '#3E98C5'\n                }\n            }\n            // textStyle: {},\n\n            // feature\n        }\n    });\n\n    module.exports = ToolboxModel;\n\n\n/***/ }),\n\n/***/ 1134:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var featureManager = __webpack_require__(987);\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var Model = __webpack_require__(977);\n    var DataDiffer = __webpack_require__(1001);\n    var listComponentHelper = __webpack_require__(1042);\n    var textContain = __webpack_require__(983);\n\n    module.exports = __webpack_require__(970).extendComponentView({\n\n        type: 'toolbox',\n\n        render: function (toolboxModel, ecModel, api, payload) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!toolboxModel.get('show')) {\n                return;\n            }\n\n            var itemSize = +toolboxModel.get('itemSize');\n            var featureOpts = toolboxModel.get('feature') || {};\n            var features = this._features || (this._features = {});\n\n            var featureNames = [];\n            zrUtil.each(featureOpts, function (opt, name) {\n                featureNames.push(name);\n            });\n\n            (new DataDiffer(this._featureNames || [], featureNames))\n                .add(process)\n                .update(process)\n                .remove(zrUtil.curry(process, null))\n                .execute();\n\n            // Keep for diff.\n            this._featureNames = featureNames;\n\n            function process(newIndex, oldIndex) {\n                var featureName = featureNames[newIndex];\n                var oldName = featureNames[oldIndex];\n                var featureOpt = featureOpts[featureName];\n                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\n                var feature;\n\n                if (featureName && !oldName) { // Create\n                    if (isUserFeatureName(featureName)) {\n                        feature = {\n                            model: featureModel,\n                            onclick: featureModel.option.onclick,\n                            featureName: featureName\n                        };\n                    }\n                    else {\n                        var Feature = featureManager.get(featureName);\n                        if (!Feature) {\n                            return;\n                        }\n                        feature = new Feature(featureModel, ecModel, api);\n                    }\n                    features[featureName] = feature;\n                }\n                else {\n                    feature = features[oldName];\n                    // If feature does not exsit.\n                    if (!feature) {\n                        return;\n                    }\n                    feature.model = featureModel;\n                    feature.ecModel = ecModel;\n                    feature.api = api;\n                }\n\n                if (!featureName && oldName) {\n                    feature.dispose && feature.dispose(ecModel, api);\n                    return;\n                }\n\n                if (!featureModel.get('show') || feature.unusable) {\n                    feature.remove && feature.remove(ecModel, api);\n                    return;\n                }\n\n                createIconPaths(featureModel, feature, featureName);\n\n                featureModel.setIconStatus = function (iconName, status) {\n                    var option = this.option;\n                    var iconPaths = this.iconPaths;\n                    option.iconStatus = option.iconStatus || {};\n                    option.iconStatus[iconName] = status;\n                    // FIXME\n                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\n                };\n\n                if (feature.render) {\n                    feature.render(featureModel, ecModel, api, payload);\n                }\n            }\n\n            function createIconPaths(featureModel, feature, featureName) {\n                var iconStyleModel = featureModel.getModel('iconStyle');\n\n                // If one feature has mutiple icon. they are orginaized as\n                // {\n                //     icon: {\n                //         foo: '',\n                //         bar: ''\n                //     },\n                //     title: {\n                //         foo: '',\n                //         bar: ''\n                //     }\n                // }\n                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\n                var titles = featureModel.get('title') || {};\n                if (typeof icons === 'string') {\n                    var icon = icons;\n                    var title = titles;\n                    icons = {};\n                    titles = {};\n                    icons[featureName] = icon;\n                    titles[featureName] = title;\n                }\n                var iconPaths = featureModel.iconPaths = {};\n                zrUtil.each(icons, function (iconStr, iconName) {\n                    var path = graphic.createIcon(\n                        iconStr,\n                        {},\n                        {\n                            x: -itemSize / 2,\n                            y: -itemSize / 2,\n                            width: itemSize,\n                            height: itemSize\n                        }\n                    );\n                    path.setStyle(iconStyleModel.getModel('normal').getItemStyle());\n                    path.hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\n                    graphic.setHoverStyle(path);\n\n                    if (toolboxModel.get('showTitle')) {\n                        path.__title = titles[iconName];\n                        path.on('mouseover', function () {\n                                // Should not reuse above hoverStyle, which might be modified.\n                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n                                path.setStyle({\n                                    text: titles[iconName],\n                                    textPosition: hoverStyle.textPosition || 'bottom',\n                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\n                                    textAlign: hoverStyle.textAlign || 'center'\n                                });\n                            })\n                            .on('mouseout', function () {\n                                path.setStyle({\n                                    textFill: null\n                                });\n                            });\n                    }\n                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\n\n                    group.add(path);\n                    path.on('click', zrUtil.bind(\n                        feature.onclick, feature, ecModel, api, iconName\n                    ));\n\n                    iconPaths[iconName] = path;\n                });\n            }\n\n            listComponentHelper.layout(group, toolboxModel, api);\n            // Render background after group is layout\n            // FIXME\n            group.add(listComponentHelper.makeBackground(group.getBoundingRect(), toolboxModel));\n\n            // Adjust icon title positions to avoid them out of screen\n            group.eachChild(function (icon) {\n                var titleText = icon.__title;\n                var hoverStyle = icon.hoverStyle;\n                // May be background element\n                if (hoverStyle && titleText) {\n                    var rect = textContain.getBoundingRect(\n                        titleText, textContain.makeFont(hoverStyle)\n                    );\n                    var offsetX = icon.position[0] + group.position[0];\n                    var offsetY = icon.position[1] + group.position[1] + itemSize;\n\n                    var needPutOnTop = false;\n                    if (offsetY + rect.height > api.getHeight()) {\n                        hoverStyle.textPosition = 'top';\n                        needPutOnTop = true;\n                    }\n                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\n                    if (offsetX + rect.width /  2 > api.getWidth()) {\n                        hoverStyle.textPosition = ['100%', topOffset];\n                        hoverStyle.textAlign = 'right';\n                    }\n                    else if (offsetX - rect.width / 2 < 0) {\n                        hoverStyle.textPosition = [0, topOffset];\n                        hoverStyle.textAlign = 'left';\n                    }\n                }\n            });\n        },\n\n        updateView: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\n            });\n        },\n\n        updateLayout: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\n            });\n        },\n\n        remove: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.remove && feature.remove(ecModel, api);\n            });\n            this.group.removeAll();\n        },\n\n        dispose: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.dispose && feature.dispose(ecModel, api);\n            });\n        }\n    });\n\n    function isUserFeatureName(featureName) {\n        return featureName.indexOf('my') === 0;\n    }\n\n\n\n/***/ }),\n\n/***/ 1135:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var env = __webpack_require__(976);\n    var lang = __webpack_require__(995).toolbox.saveAsImage;\n\n    function SaveAsImage (model) {\n        this.model = model;\n    }\n\n    SaveAsImage.defaultOption = {\n        show: true,\n        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n        title: lang.title,\n        type: 'png',\n        // Default use option.backgroundColor\n        // backgroundColor: '#fff',\n        name: '',\n        excludeComponents: ['toolbox'],\n        pixelRatio: 1,\n        lang: lang.lang.slice()\n    };\n\n    SaveAsImage.prototype.unusable = !env.canvasSupported;\n\n    var proto = SaveAsImage.prototype;\n\n    proto.onclick = function (ecModel, api) {\n        var model = this.model;\n        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\n        var $a = document.createElement('a');\n        var type = model.get('type', true) || 'png';\n        $a.download = title + '.' + type;\n        $a.target = '_blank';\n        var url = api.getConnectedDataURL({\n            type: type,\n            backgroundColor: model.get('backgroundColor', true)\n                || ecModel.get('backgroundColor') || '#fff',\n            excludeComponents: model.get('excludeComponents'),\n            pixelRatio: model.get('pixelRatio')\n        });\n        $a.href = url;\n        // Chrome and Firefox\n        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {\n            var evt = new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false\n            });\n            $a.dispatchEvent(evt);\n        }\n        // IE\n        else {\n            if (window.navigator.msSaveOrOpenBlob) {\n                var bstr = atob(url.split(',')[1]);\n                var n = bstr.length;\n                var u8arr = new Uint8Array(n);\n                while(n--) {\n                    u8arr[n] = bstr.charCodeAt(n);\n                }\n                var blob = new Blob([u8arr]);\n                window.navigator.msSaveOrOpenBlob(blob, title + '.' + type);\n            }\n            else {\n                var lang = model.get('lang');\n                var html = '' +\n                    '<body style=\"margin:0;\">' +\n                    '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />' +\n                    '</body>';\n                var tab = window.open();\n                tab.document.write(html);\n            }\n        }\n    };\n\n    __webpack_require__(987).register(\n        'saveAsImage', SaveAsImage\n    );\n\n    module.exports = SaveAsImage;\n\n\n\n/***/ }),\n\n/***/ 1136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var lang = __webpack_require__(995).toolbox.magicType;\n\n    function MagicType(model) {\n        this.model = model;\n    }\n\n    MagicType.defaultOption = {\n        show: true,\n        type: [],\n        // Icon group\n        icon: {\n            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\n            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\n            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\n            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\n        },\n        // `line`, `bar`, `stack`, `tiled`\n        title: zrUtil.clone(lang.title),\n        option: {},\n        seriesIndex: {}\n    };\n\n    var proto = MagicType.prototype;\n\n    proto.getIcons = function () {\n        var model = this.model;\n        var availableIcons = model.get('icon');\n        var icons = {};\n        zrUtil.each(model.get('type'), function (type) {\n            if (availableIcons[type]) {\n                icons[type] = availableIcons[type];\n            }\n        });\n        return icons;\n    };\n\n    var seriesOptGenreator = {\n        'line': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'line',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.line') || {}, true);\n            }\n        },\n        'bar': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'bar',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.bar') || {}, true);\n            }\n        },\n        'stack': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: '__ec_magicType_stack__'\n                }, model.get('option.stack') || {}, true);\n            }\n        },\n        'tiled': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: ''\n                }, model.get('option.tiled') || {}, true);\n            }\n        }\n    };\n\n    var radioTypes = [\n        ['line', 'bar'],\n        ['stack', 'tiled']\n    ];\n\n    proto.onclick = function (ecModel, api, type) {\n        var model = this.model;\n        var seriesIndex = model.get('seriesIndex.' + type);\n        // Not supported magicType\n        if (!seriesOptGenreator[type]) {\n            return;\n        }\n        var newOption = {\n            series: []\n        };\n        var generateNewSeriesTypes = function (seriesModel) {\n            var seriesType = seriesModel.subType;\n            var seriesId = seriesModel.id;\n            var newSeriesOpt = seriesOptGenreator[type](\n                seriesType, seriesId, seriesModel, model\n            );\n            if (newSeriesOpt) {\n                // PENDING If merge original option?\n                zrUtil.defaults(newSeriesOpt, seriesModel.option);\n                newOption.series.push(newSeriesOpt);\n            }\n            // Modify boundaryGap\n            var coordSys = seriesModel.coordinateSystem;\n            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\n                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n                if (categoryAxis) {\n                    var axisDim = categoryAxis.dim;\n                    var axisType = axisDim + 'Axis';\n                    var axisModel = ecModel.queryComponents({\n                        mainType: axisType,\n                        index: seriesModel.get(name + 'Index'),\n                        id: seriesModel.get(name + 'Id')\n                    })[0];\n                    var axisIndex = axisModel.componentIndex;\n\n                    newOption[axisType] = newOption[axisType] || [];\n                    for (var i = 0; i <= axisIndex; i++) {\n                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\n                    }\n                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\n                }\n            }\n        };\n\n        zrUtil.each(radioTypes, function (radio) {\n            if (zrUtil.indexOf(radio, type) >= 0) {\n                zrUtil.each(radio, function (item) {\n                    model.setIconStatus(item, 'normal');\n                });\n            }\n        });\n\n        model.setIconStatus(type, 'emphasis');\n\n        ecModel.eachComponent(\n            {\n                mainType: 'series',\n                query: seriesIndex == null ? null : {\n                    seriesIndex: seriesIndex\n                }\n            }, generateNewSeriesTypes\n        );\n        api.dispatchAction({\n            type: 'changeMagicType',\n            currentType: type,\n            newOption: newOption\n        });\n    };\n\n    var echarts = __webpack_require__(970);\n    echarts.registerAction({\n        type: 'changeMagicType',\n        event: 'magicTypeChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        ecModel.mergeOption(payload.newOption);\n    });\n\n    __webpack_require__(987).register('magicType', MagicType);\n\n    module.exports = MagicType;\n\n\n/***/ }),\n\n/***/ 1137:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/toolbox/feature/DataView\n */\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var eventTool = __webpack_require__(988);\n    var lang = __webpack_require__(995).toolbox.dataView;\n\n    var BLOCK_SPLITER = new Array(60).join('-');\n    var ITEM_SPLITER = '\\t';\n    /**\n     * Group series into two types\n     *  1. on category axis, like line, bar\n     *  2. others, like scatter, pie\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object}\n     * @inner\n     */\n    function groupSeries(ecModel) {\n        var seriesGroupByCategoryAxis = {};\n        var otherSeries = [];\n        var meta = [];\n        ecModel.eachRawSeries(function (seriesModel) {\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\n                var baseAxis = coordSys.getBaseAxis();\n                if (baseAxis.type === 'category') {\n                    var key = baseAxis.dim + '_' + baseAxis.index;\n                    if (!seriesGroupByCategoryAxis[key]) {\n                        seriesGroupByCategoryAxis[key] = {\n                            categoryAxis: baseAxis,\n                            valueAxis: coordSys.getOtherAxis(baseAxis),\n                            series: []\n                        };\n                        meta.push({\n                            axisDim: baseAxis.dim,\n                            axisIndex: baseAxis.index\n                        });\n                    }\n                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\n                }\n                else {\n                    otherSeries.push(seriesModel);\n                }\n            }\n            else {\n                otherSeries.push(seriesModel);\n            }\n        });\n\n        return {\n            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\n            other: otherSeries,\n            meta: meta\n        };\n    }\n\n    /**\n     * Assemble content of series on cateogory axis\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleSeriesWithCategoryAxis(series) {\n        var tables = [];\n        zrUtil.each(series, function (group, key) {\n            var categoryAxis = group.categoryAxis;\n            var valueAxis = group.valueAxis;\n            var valueAxisDim = valueAxis.dim;\n\n            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\n                return series.name;\n            }));\n            var columns = [categoryAxis.model.getCategories()];\n            zrUtil.each(group.series, function (series) {\n                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\n                    return val;\n                }));\n            });\n            // Assemble table content\n            var lines = [headers.join(ITEM_SPLITER)];\n            for (var i = 0; i < columns[0].length; i++) {\n                var items = [];\n                for (var j = 0; j < columns.length; j++) {\n                    items.push(columns[j][i]);\n                }\n                lines.push(items.join(ITEM_SPLITER));\n            }\n            tables.push(lines.join('\\n'));\n        });\n        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * Assemble content of other series\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleOtherSeries(series) {\n        return zrUtil.map(series, function (series) {\n            var data = series.getRawData();\n            var lines = [series.name];\n            var vals = [];\n            data.each(data.dimensions, function () {\n                var argLen = arguments.length;\n                var dataIndex = arguments[argLen - 1];\n                var name = data.getName(dataIndex);\n                for (var i = 0; i < argLen - 1; i++) {\n                    vals[i] = arguments[i];\n                }\n                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\n            });\n            return lines.join('\\n');\n        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * @param {module:echarts/model/Global}\n     * @return {Object}\n     * @inner\n     */\n    function getContentFromModel(ecModel) {\n\n        var result = groupSeries(ecModel);\n\n        return {\n            value: zrUtil.filter([\n                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\n                    assembleOtherSeries(result.other)\n                ], function (str) {\n                    return str.replace(/[\\n\\t\\s]/g, '');\n                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\n\n            meta: result.meta\n        };\n    }\n\n\n    function trim(str) {\n        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n    /**\n     * If a block is tsv format\n     */\n    function isTSVFormat(block) {\n        // Simple method to find out if a block is tsv format\n        var firstLine = block.slice(0, block.indexOf('\\n'));\n        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\n            return true;\n        }\n    }\n\n    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\n    /**\n     * @param {string} tsv\n     * @return {Object}\n     */\n    function parseTSVContents(tsv) {\n        var tsvLines = tsv.split(/\\n+/g);\n        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\n\n        var categories = [];\n        var series = zrUtil.map(headers, function (header) {\n            return {\n                name: header,\n                data: []\n            };\n        });\n        for (var i = 0; i < tsvLines.length; i++) {\n            var items = trim(tsvLines[i]).split(itemSplitRegex);\n            categories.push(items.shift());\n            for (var j = 0; j < items.length; j++) {\n                series[j] && (series[j].data[i] = items[j]);\n            }\n        }\n        return {\n            series: series,\n            categories: categories\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @return {Array.<Object>}\n     * @inner\n     */\n    function parseListContents(str) {\n        var lines = str.split(/\\n+/g);\n        var seriesName = trim(lines.shift());\n\n        var data = [];\n        for (var i = 0; i < lines.length; i++) {\n            var items = trim(lines[i]).split(itemSplitRegex);\n            var name = '';\n            var value;\n            var hasName = false;\n            if (isNaN(items[0])) { // First item is name\n                hasName = true;\n                name = items[0];\n                items = items.slice(1);\n                data[i] = {\n                    name: name,\n                    value: []\n                };\n                value = data[i].value;\n            }\n            else {\n                value = data[i] = [];\n            }\n            for (var j = 0; j < items.length; j++) {\n                value.push(+items[j]);\n            }\n            if (value.length === 1) {\n                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\n            }\n        }\n\n        return {\n            name: seriesName,\n            data: data\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @param {Array.<Object>} blockMetaList\n     * @return {Object}\n     * @inner\n     */\n    function parseContents(str, blockMetaList) {\n        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\n        var newOption = {\n            series: []\n        };\n        zrUtil.each(blocks, function (block, idx) {\n            if (isTSVFormat(block)) {\n                var result = parseTSVContents(block);\n                var blockMeta = blockMetaList[idx];\n                var axisKey = blockMeta.axisDim + 'Axis';\n\n                if (blockMeta) {\n                    newOption[axisKey] = newOption[axisKey] || [];\n                    newOption[axisKey][blockMeta.axisIndex] = {\n                        data: result.categories\n                    };\n                    newOption.series = newOption.series.concat(result.series);\n                }\n            }\n            else {\n                var result = parseListContents(block);\n                newOption.series.push(result);\n            }\n        });\n        return newOption;\n    }\n\n    /**\n     * @alias {module:echarts/component/toolbox/feature/DataView}\n     * @constructor\n     * @param {module:echarts/model/Model} model\n     */\n    function DataView(model) {\n\n        this._dom = null;\n\n        this.model = model;\n    }\n\n    DataView.defaultOption = {\n        show: true,\n        readOnly: false,\n        optionToContent: null,\n        contentToOption: null,\n\n        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\n        title: zrUtil.clone(lang.title),\n        lang: zrUtil.clone(lang.lang),\n        backgroundColor: '#fff',\n        textColor: '#000',\n        textareaColor: '#fff',\n        textareaBorderColor: '#333',\n        buttonColor: '#c23531',\n        buttonTextColor: '#fff'\n    };\n\n    DataView.prototype.onclick = function (ecModel, api) {\n        var container = api.getDom();\n        var model = this.model;\n        if (this._dom) {\n            container.removeChild(this._dom);\n        }\n        var root = document.createElement('div');\n        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\n        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\n\n        // Create elements\n        var header = document.createElement('h4');\n        var lang = model.get('lang') || [];\n        header.innerHTML = lang[0] || model.get('title');\n        header.style.cssText = 'margin: 10px 20px;';\n        header.style.color = model.get('textColor');\n\n        var viewMain = document.createElement('div');\n        var textarea = document.createElement('textarea');\n        viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';\n\n        var optionToContent = model.get('optionToContent');\n        var contentToOption = model.get('contentToOption');\n        var result = getContentFromModel(ecModel);\n        if (typeof optionToContent === 'function') {\n            var htmlOrDom = optionToContent(api.getOption());\n            if (typeof htmlOrDom === 'string') {\n                viewMain.innerHTML = htmlOrDom;\n            }\n            else if (zrUtil.isDom(htmlOrDom)) {\n                viewMain.appendChild(htmlOrDom);\n            }\n        }\n        else {\n            // Use default textarea\n            viewMain.appendChild(textarea);\n            textarea.readOnly = model.get('readOnly');\n            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\n            textarea.style.color = model.get('textColor');\n            textarea.style.borderColor = model.get('textareaBorderColor');\n            textarea.style.backgroundColor = model.get('textareaColor');\n            textarea.value = result.value;\n        }\n\n        var blockMetaList = result.meta;\n\n        var buttonContainer = document.createElement('div');\n        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\n\n        var buttonStyle = 'float:right;margin-right:20px;border:none;'\n            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\n        var closeButton = document.createElement('div');\n        var refreshButton = document.createElement('div');\n\n        buttonStyle += ';background-color:' + model.get('buttonColor');\n        buttonStyle += ';color:' + model.get('buttonTextColor');\n\n        var self = this;\n\n        function close() {\n            container.removeChild(root);\n            self._dom = null;\n        }\n        eventTool.addEventListener(closeButton, 'click', close);\n\n        eventTool.addEventListener(refreshButton, 'click', function () {\n            var newOption;\n            try {\n                if (typeof contentToOption === 'function') {\n                    newOption = contentToOption(viewMain, api.getOption());\n                }\n                else {\n                    newOption = parseContents(textarea.value, blockMetaList);\n                }\n            }\n            catch (e) {\n                close();\n                throw new Error('Data view format error ' + e);\n            }\n            if (newOption) {\n                api.dispatchAction({\n                    type: 'changeDataView',\n                    newOption: newOption\n                });\n            }\n\n            close();\n        });\n\n        closeButton.innerHTML = lang[1];\n        refreshButton.innerHTML = lang[2];\n        refreshButton.style.cssText = buttonStyle;\n        closeButton.style.cssText = buttonStyle;\n\n        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\n        buttonContainer.appendChild(closeButton);\n\n        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n        eventTool.addEventListener(textarea, 'keydown', function (e) {\n            if ((e.keyCode || e.which) === 9) {\n                // get caret position/selection\n                var val = this.value;\n                var start = this.selectionStart;\n                var end = this.selectionEnd;\n\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\n\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n\n                // prevent the focus lose\n                eventTool.stop(e);\n            }\n        });\n\n        root.appendChild(header);\n        root.appendChild(viewMain);\n        root.appendChild(buttonContainer);\n\n        viewMain.style.height = (container.clientHeight - 80) + 'px';\n\n        container.appendChild(root);\n        this._dom = root;\n    };\n\n    DataView.prototype.remove = function (ecModel, api) {\n        this._dom && api.getDom().removeChild(this._dom);\n    };\n\n    DataView.prototype.dispose = function (ecModel, api) {\n        this.remove(ecModel, api);\n    };\n\n    /**\n     * @inner\n     */\n    function tryMergeDataOption(newData, originalData) {\n        return zrUtil.map(newData, function (newVal, idx) {\n            var original = originalData && originalData[idx];\n            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\n                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\n                    newVal = newVal.value;\n                }\n                // Original data has option\n                return zrUtil.defaults({\n                    value: newVal\n                }, original);\n            }\n            else {\n                return newVal;\n            }\n        });\n    }\n\n    __webpack_require__(987).register('dataView', DataView);\n\n    __webpack_require__(970).registerAction({\n        type: 'changeDataView',\n        event: 'dataViewChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        var newSeriesOptList = [];\n        zrUtil.each(payload.newOption.series, function (seriesOpt) {\n            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\n            if (!seriesModel) {\n                // New created series\n                // Geuss the series type\n                newSeriesOptList.push(zrUtil.extend({\n                    // Default is scatter\n                    type: 'scatter'\n                }, seriesOpt));\n            }\n            else {\n                var originalData = seriesModel.get('data');\n                newSeriesOptList.push({\n                    name: seriesOpt.name,\n                    data: tryMergeDataOption(seriesOpt.data, originalData)\n                });\n            }\n        });\n\n        ecModel.mergeOption(zrUtil.defaults({\n            series: newSeriesOptList\n        }, payload.newOption));\n    });\n\n    module.exports = DataView;\n\n\n/***/ }),\n\n/***/ 1138:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var BrushController = __webpack_require__(1053);\n    var BrushTargetManager = __webpack_require__(1069);\n    var history = __webpack_require__(1043);\n    var sliderMove = __webpack_require__(1027);\n    var lang = __webpack_require__(995).toolbox.dataZoom;\n\n    var each = zrUtil.each;\n\n    // Use dataZoomSelect\n    __webpack_require__(1139);\n\n    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\n    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\n\n    function DataZoom(model, ecModel, api) {\n\n        /**\n         * @private\n         * @type {module:echarts/component/helper/BrushController}\n         */\n        (this._brushController = new BrushController(api.getZr()))\n            .on('brush', zrUtil.bind(this._onBrush, this))\n            .mount();\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._isZoomActive;\n    }\n\n    DataZoom.defaultOption = {\n        show: true,\n        // Icon group\n        icon: {\n            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\n            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\n        },\n        // `zoom`, `back`\n        title: zrUtil.clone(lang.title)\n    };\n\n    var proto = DataZoom.prototype;\n\n    proto.render = function (featureModel, ecModel, api, payload) {\n        this.model = featureModel;\n        this.ecModel = ecModel;\n        this.api = api;\n\n        updateZoomBtnStatus(featureModel, ecModel, this, payload, api);\n        updateBackBtnStatus(featureModel, ecModel);\n    };\n\n    proto.onclick = function (ecModel, api, type) {\n        handlers[type].call(this);\n    };\n\n    proto.remove = function (ecModel, api) {\n        this._brushController.unmount();\n    };\n\n    proto.dispose = function (ecModel, api) {\n        this._brushController.dispose();\n    };\n\n    /**\n     * @private\n     */\n    var handlers = {\n\n        zoom: function () {\n            var nextActive = !this._isZoomActive;\n\n            this.api.dispatchAction({\n                type: 'takeGlobalCursor',\n                key: 'dataZoomSelect',\n                dataZoomSelectActive: nextActive\n            });\n        },\n\n        back: function () {\n            this._dispatchZoomAction(history.pop(this.ecModel));\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._onBrush = function (areas, opt) {\n        if (!opt.isEnd || !areas.length) {\n            return;\n        }\n        var snapshot = {};\n        var ecModel = this.ecModel;\n\n        this._brushController.updateCovers([]); // remove cover\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(this.model.option), ecModel, {include: ['grid']}\n        );\n        brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            if (coordSys.type !== 'cartesian2d') {\n                return;\n            }\n\n            var brushType = area.brushType;\n            if (brushType === 'rect') {\n                setBatch('x', coordSys, coordRange[0]);\n                setBatch('y', coordSys, coordRange[1]);\n            }\n            else {\n                setBatch(({lineX: 'x', lineY: 'y'})[brushType], coordSys, coordRange);\n            }\n        });\n\n        history.push(ecModel, snapshot);\n\n        this._dispatchZoomAction(snapshot);\n\n        function setBatch(dimName, coordSys, minMax) {\n            var axis = coordSys.getAxis(dimName);\n            var axisModel = axis.model;\n            var dataZoomModel = findDataZoom(dimName, axisModel, ecModel);\n\n            // Restrict range.\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();\n            if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {\n                minMax = sliderMove(\n                    0, minMax.slice(), axis.scale.getExtent(), 0,\n                    minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan\n                );\n            }\n\n            dataZoomModel && (snapshot[dataZoomModel.id] = {\n                dataZoomId: dataZoomModel.id,\n                startValue: minMax[0],\n                endValue: minMax[1]\n            });\n        }\n\n        function findDataZoom(dimName, axisModel, ecModel) {\n            var found;\n            ecModel.eachComponent({mainType: 'dataZoom', subType: 'select'}, function (dzModel) {\n                var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);\n                has && (found = dzModel);\n            });\n            return found;\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._dispatchZoomAction = function (snapshot) {\n        var batch = [];\n\n        // Convert from hash map to array.\n        each(snapshot, function (batchItem, dataZoomId) {\n            batch.push(zrUtil.clone(batchItem));\n        });\n\n        batch.length && this.api.dispatchAction({\n            type: 'dataZoom',\n            from: this.uid,\n            batch: batch\n        });\n    };\n\n    function retrieveAxisSetting(option) {\n        var setting = {};\n        // Compatible with previous setting: null => all axis, false => no axis.\n        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\n            setting[name] = option[name];\n            setting[name] == null && (setting[name] = 'all');\n            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\n        });\n        return setting;\n    }\n\n    function updateBackBtnStatus(featureModel, ecModel) {\n        featureModel.setIconStatus(\n            'back',\n            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\n        );\n    }\n\n    function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {\n        var zoomActive = view._isZoomActive;\n\n        if (payload && payload.type === 'takeGlobalCursor') {\n            zoomActive = payload.key === 'dataZoomSelect'\n                ? payload.dataZoomSelectActive : false;\n        }\n\n        view._isZoomActive = zoomActive;\n\n        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(featureModel.option), ecModel, {include: ['grid']}\n        );\n\n        view._brushController\n            .setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {\n                return (targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared)\n                    ? 'lineX'\n                    : (!targetInfo.xAxisDeclared && targetInfo.yAxisDeclared)\n                    ? 'lineY'\n                    : 'rect';\n            }))\n            .enableBrush(\n                zoomActive\n                ? {\n                    brushType: 'auto',\n                    brushStyle: {\n                        // FIXME user customized?\n                        lineWidth: 0,\n                        fill: 'rgba(0,0,0,0.2)'\n                    }\n                }\n                : false\n            );\n    }\n\n\n    __webpack_require__(987).register('dataZoom', DataZoom);\n\n\n    // Create special dataZoom option for select\n    __webpack_require__(970).registerPreprocessor(function (option) {\n        if (!option) {\n            return;\n        }\n\n        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\n        if (!zrUtil.isArray(dataZoomOpts)) {\n            option.dataZoom = dataZoomOpts = [dataZoomOpts];\n        }\n\n        var toolboxOpt = option.toolbox;\n        if (toolboxOpt) {\n            // Assume there is only one toolbox\n            if (zrUtil.isArray(toolboxOpt)) {\n                toolboxOpt = toolboxOpt[0];\n            }\n\n            if (toolboxOpt && toolboxOpt.feature) {\n                var dataZoomOpt = toolboxOpt.feature.dataZoom;\n                addForAxis('xAxis', dataZoomOpt);\n                addForAxis('yAxis', dataZoomOpt);\n            }\n        }\n\n        function addForAxis(axisName, dataZoomOpt) {\n            if (!dataZoomOpt) {\n                return;\n            }\n\n            // Try not to modify model, because it is not merged yet.\n            var axisIndicesName = axisName + 'Index';\n            var givenAxisIndices = dataZoomOpt[axisIndicesName];\n            if (givenAxisIndices != null\n                && givenAxisIndices != 'all'\n                && !zrUtil.isArray(givenAxisIndices)\n            ) {\n                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\n            }\n\n            forEachComponent(axisName, function (axisOpt, axisIndex) {\n                if (givenAxisIndices != null\n                    && givenAxisIndices != 'all'\n                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\n                ) {\n                    return;\n                }\n                var newOpt = {\n                    type: 'select',\n                    $fromToolbox: true,\n                    // Id for merge mapping.\n                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\n                };\n                // FIXME\n                // Only support one axis now.\n                newOpt[axisIndicesName] = axisIndex;\n                dataZoomOpts.push(newOpt);\n            });\n        }\n\n        function forEachComponent(mainType, cb) {\n            var opts = option[mainType];\n            if (!zrUtil.isArray(opts)) {\n                opts = opts ? [opts] : [];\n            }\n            each(opts, cb);\n        }\n    });\n\n    module.exports = DataZoom;\n\n\n/***/ }),\n\n/***/ 1139:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * DataZoom component entry\n */\n\n\n    __webpack_require__(1071);\n\n    __webpack_require__(1017);\n    __webpack_require__(1019);\n\n    __webpack_require__(1141);\n    __webpack_require__(1142);\n\n    __webpack_require__(1072);\n    __webpack_require__(1073);\n\n\n\n/***/ }),\n\n/***/ 1140:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Axis operator\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var numberUtil = __webpack_require__(972);\n    var helper = __webpack_require__(1018);\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n\n    /**\n     * Operate single axis.\n     * One axis can only operated by one axis operator.\n     * Different dataZoomModels may be defined to operate the same axis.\n     * (i.e. 'inside' data zoom and 'slider' data zoom components)\n     * So dataZoomModels share one axisProxy in that case.\n     *\n     * @class\n     */\n    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._dimName = dimName;\n\n        /**\n         * @private\n         */\n        this._axisIndex = axisIndex;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._valueWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._percentWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._dataExtent;\n\n        /**\n         * {minSpan, maxSpan, minValueSpan, maxValueSpan}\n         * @private\n         * @type {Object}\n         */\n        this._minMaxSpan;\n\n        /**\n         * @readOnly\n         * @type {module: echarts/model/Global}\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @private\n         * @type {module: echarts/component/dataZoom/DataZoomModel}\n         */\n        this._dataZoomModel = dataZoomModel;\n    };\n\n    AxisProxy.prototype = {\n\n        constructor: AxisProxy,\n\n        /**\n         * Whether the axisProxy is hosted by dataZoomModel.\n         *\n         * @public\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         * @return {boolean}\n         */\n        hostedBy: function (dataZoomModel) {\n            return this._dataZoomModel === dataZoomModel;\n        },\n\n        /**\n         * @return {Array.<number>} Value can only be NaN or finite value.\n         */\n        getDataValueWindow: function () {\n            return this._valueWindow.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getDataPercentWindow: function () {\n            return this._percentWindow.slice();\n        },\n\n        /**\n         * @public\n         * @param {number} axisIndex\n         * @return {Array} seriesModels\n         */\n        getTargetSeriesModels: function () {\n            var seriesModels = [];\n            var ecModel = this.ecModel;\n\n            ecModel.eachSeries(function (seriesModel) {\n                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {\n                    var dimName = this._dimName;\n                    var axisModel = ecModel.queryComponents({\n                        mainType: dimName + 'Axis',\n                        index: seriesModel.get(dimName + 'AxisIndex'),\n                        id: seriesModel.get(dimName + 'AxisId')\n                    })[0];\n                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\n                        seriesModels.push(seriesModel);\n                    }\n                }\n            }, this);\n\n            return seriesModels;\n        },\n\n        getAxisModel: function () {\n            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n        },\n\n        getOtherAxisModel: function () {\n            var axisDim = this._dimName;\n            var ecModel = this.ecModel;\n            var axisModel = this.getAxisModel();\n            var isCartesian = axisDim === 'x' || axisDim === 'y';\n            var otherAxisDim;\n            var coordSysIndexName;\n            if (isCartesian) {\n                coordSysIndexName = 'gridIndex';\n                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\n            }\n            else {\n                coordSysIndexName = 'polarIndex';\n                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\n            }\n            var foundOtherAxisModel;\n            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\n                if ((otherAxisModel.get(coordSysIndexName) || 0)\n                    === (axisModel.get(coordSysIndexName) || 0)\n                ) {\n                    foundOtherAxisModel = otherAxisModel;\n                }\n            });\n            return foundOtherAxisModel;\n        },\n\n        getMinMaxSpan: function () {\n            return zrUtil.clone(this._minMaxSpan);\n        },\n\n        /**\n         * Only calculate by given range and this._dataExtent, do not change anything.\n         *\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         */\n        calculateDataWindow: function (opt) {\n            var dataExtent = this._dataExtent;\n            var axisModel = this.getAxisModel();\n            var scale = axisModel.axis.scale;\n            var rangePropMode = this._dataZoomModel.getRangePropMode();\n            var percentExtent = [0, 100];\n            var percentWindow = [\n                opt.start,\n                opt.end\n            ];\n            var valueWindow = [];\n\n            each(['startValue', 'endValue'], function (prop) {\n                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);\n            });\n\n            // Normalize bound.\n            each([0, 1], function (idx) {\n                var boundValue = valueWindow[idx];\n                var boundPercent = percentWindow[idx];\n\n                // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n                // on `valueProp` ('startValue', 'endValue'). The former one is suitable\n                // for cases that a dataZoom component controls multiple axes with different\n                // unit or extent, and the latter one is suitable for accurate zoom by pixel\n                // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,\n                // but it is awkward that `percentProp` can not be obtained from `valueProp`\n                // accurately (because all of values that are overflow the `dataExtent` will\n                // be calculated to percent '100%'). So we have to use\n                // `dataZoom.getRangePropMode()` to mark which prop is used.\n                // `rangePropMode` is updated only when setOption or dispatchAction, otherwise\n                // it remains its original value.\n\n                if (rangePropMode[idx] === 'percent') {\n                    if (boundPercent == null) {\n                        boundPercent = percentExtent[idx];\n                    }\n                    // Use scale.parse to math round for category or time axis.\n                    boundValue = scale.parse(numberUtil.linearMap(\n                        boundPercent, percentExtent, dataExtent, true\n                    ));\n                }\n                else {\n                    // Calculating `percent` from `value` may be not accurate, because\n                    // This calculation can not be inversed, because all of values that\n                    // are overflow the `dataExtent` will be calculated to percent '100%'\n                    boundPercent = numberUtil.linearMap(\n                        boundValue, dataExtent, percentExtent, true\n                    );\n                }\n\n                // valueWindow[idx] = round(boundValue);\n                // percentWindow[idx] = round(boundPercent);\n                valueWindow[idx] = boundValue;\n                percentWindow[idx] = boundPercent;\n            });\n\n            return {\n                valueWindow: asc(valueWindow),\n                percentWindow: asc(percentWindow)\n            };\n        },\n\n        /**\n         * Notice: reset should not be called before series.restoreData() called,\n         * so it is recommanded to be called in \"process stage\" but not \"model init\n         * stage\".\n         *\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        reset: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            // Culculate data window and data extent, and record them.\n            this._dataExtent = calculateDataExtent(\n                this, this._dimName, this.getTargetSeriesModels()\n            );\n\n            var dataWindow = this.calculateDataWindow(dataZoomModel.option);\n\n            this._valueWindow = dataWindow.valueWindow;\n            this._percentWindow = dataWindow.percentWindow;\n\n            setMinMaxSpan(this);\n\n            // Update axis setting then.\n            setAxisModel(this);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        restore: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            this._valueWindow = this._percentWindow = null;\n            setAxisModel(this, true);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        filterData: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            var axisDim = this._dimName;\n            var seriesModels = this.getTargetSeriesModels();\n            var filterMode = dataZoomModel.get('filterMode');\n            var valueWindow = this._valueWindow;\n\n            if (filterMode === 'none') {\n                return;\n            }\n\n            // FIXME\n            // Toolbox may has dataZoom injected. And if there are stacked bar chart\n            // with NaN data, NaN will be filtered and stack will be wrong.\n            // So we need to force the mode to be set empty.\n            // In fect, it is not a big deal that do not support filterMode-'filter'\n            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n            // selection\" some day, which might need \"adapt to data extent on the\n            // otherAxis\", which is disabled by filterMode-'empty'.\n            var otherAxisModel = this.getOtherAxisModel();\n            if (dataZoomModel.get('$fromToolbox')\n                && otherAxisModel\n                && otherAxisModel.get('type') === 'category'\n            ) {\n                filterMode = 'empty';\n            }\n\n            // Process series data\n            each(seriesModels, function (seriesModel) {\n                var seriesData = seriesModel.getData();\n                var dataDims = seriesModel.coordDimToDataDim(axisDim);\n\n                if (filterMode === 'weakFilter') {\n                    seriesData && seriesData.filterSelf(function (dataIndex) {\n                        var leftOut;\n                        var rightOut;\n                        var hasValue;\n                        for (var i = 0; i < dataDims.length; i++) {\n                            var value = seriesData.get(dataDims[i], dataIndex);\n                            var thisHasValue = !isNaN(value);\n                            var thisLeftOut = value < valueWindow[0];\n                            var thisRightOut = value > valueWindow[1];\n                            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n                                return true;\n                            }\n                            thisHasValue && (hasValue = true);\n                            thisLeftOut && (leftOut = true);\n                            thisRightOut && (rightOut = true);\n                        }\n                        // If both left out and right out, do not filter.\n                        return hasValue && leftOut && rightOut;\n                    });\n                }\n                else {\n                    seriesData && each(dataDims, function (dim) {\n                        if (filterMode === 'empty') {\n                            seriesModel.setData(\n                                seriesData.map(dim, function (value) {\n                                    return !isInWindow(value) ? NaN : value;\n                                })\n                            );\n                        }\n                        else {\n                            seriesData.filterSelf(dim, isInWindow);\n                        }\n                    });\n                }\n            });\n\n            function isInWindow(value) {\n                return value >= valueWindow[0] && value <= valueWindow[1];\n            }\n        }\n    };\n\n    function calculateDataExtent(axisProxy, axisDim, seriesModels) {\n        var dataExtent = [Infinity, -Infinity];\n\n        each(seriesModels, function (seriesModel) {\n            var seriesData = seriesModel.getData();\n            if (seriesData) {\n                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n                    var seriesExtent = seriesData.getDataExtent(dim);\n                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n                });\n            }\n        });\n\n        if (dataExtent[1] < dataExtent[0]) {\n            dataExtent = [NaN, NaN];\n        }\n\n        // It is important to get \"consistent\" extent when more then one axes is\n        // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n        // when zooming. But it is difficult to know what is \"consistent\", considering\n        // axes have different type or even different meanings (For example, two\n        // time axes are used to compare data of the same date in different years).\n        // So basically dataZoom just obtains extent by series.data (in category axis\n        // extent can be obtained from axis.data).\n        // Nevertheless, user can set min/max/scale on axes to make extent of axes\n        // consistent.\n        fixExtentByAxis(axisProxy, dataExtent);\n\n        return dataExtent;\n    }\n\n    function fixExtentByAxis(axisProxy, dataExtent) {\n        var axisModel = axisProxy.getAxisModel();\n        var min = axisModel.getMin(true);\n\n        // For category axis, if min/max/scale are not set, extent is determined\n        // by axis.data by default.\n        var isCategoryAxis = axisModel.get('type') === 'category';\n        var axisDataLen = isCategoryAxis && (axisModel.get('data') || []).length;\n\n        if (min != null && min !== 'dataMin' && typeof min !== 'function') {\n            dataExtent[0] = min;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[0] = axisDataLen > 0 ? 0 : NaN;\n        }\n\n        var max = axisModel.getMax(true);\n        if (max != null && max !== 'dataMax' && typeof max !== 'function') {\n            dataExtent[1] = max;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;\n        }\n\n        if (!axisModel.get('scale', true)) {\n            dataExtent[0] > 0 && (dataExtent[0] = 0);\n            dataExtent[1] < 0 && (dataExtent[1] = 0);\n        }\n\n        // For value axis, if min/max/scale are not set, we just use the extent obtained\n        // by series data, which may be a little different from the extent calculated by\n        // `axisHelper.getScaleExtent`. But the different just affects the experience a\n        // little when zooming. So it will not be fixed until some users require it strongly.\n\n        return dataExtent;\n    }\n\n    function setAxisModel(axisProxy, isRestore) {\n        var axisModel = axisProxy.getAxisModel();\n\n        var percentWindow = axisProxy._percentWindow;\n        var valueWindow = axisProxy._valueWindow;\n\n        if (!percentWindow) {\n            return;\n        }\n\n        // [0, 500]: arbitrary value, guess axis extent.\n        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n        precision = Math.min(precision, 20);\n        // isRestore or isFull\n        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\n\n        axisModel.setRange(\n            useOrigin ? null : +valueWindow[0].toFixed(precision),\n            useOrigin ? null : +valueWindow[1].toFixed(precision)\n        );\n    }\n\n    function setMinMaxSpan(axisProxy) {\n        var minMaxSpan = axisProxy._minMaxSpan = {};\n        var dataZoomModel = axisProxy._dataZoomModel;\n\n        each(['min', 'max'], function (minMax) {\n            minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span');\n\n            // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n            var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n            if (valueSpan != null) {\n                minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n\n                valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);\n                if (valueSpan != null) {\n                    minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(\n                        valueSpan, axisProxy._dataExtent, [0, 100], true\n                    );\n                }\n            }\n        });\n    }\n\n    module.exports = AxisProxy;\n\n\n\n/***/ }),\n\n/***/ 1141:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = __webpack_require__(1017);\n\n    module.exports = DataZoomModel.extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n/***/ }),\n\n/***/ 1142:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    module.exports = __webpack_require__(1019).extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n/***/ }),\n\n/***/ 1143:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var history = __webpack_require__(1043);\n    var lang = __webpack_require__(995).toolbox.restore;\n\n    function Restore(model) {\n        this.model = model;\n    }\n\n    Restore.defaultOption = {\n        show: true,\n        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\n        title: lang.title\n    };\n\n    var proto = Restore.prototype;\n\n    proto.onclick = function (ecModel, api, type) {\n        history.clear(ecModel);\n\n        api.dispatchAction({\n            type: 'restore',\n            from: this.uid\n        });\n    };\n\n\n    __webpack_require__(987).register('restore', Restore);\n\n\n    __webpack_require__(970).registerAction(\n        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\n        function (payload, ecModel) {\n            ecModel.resetOption('recreate');\n        }\n    );\n\n    module.exports = Restore;\n\n\n/***/ }),\n\n/***/ 1144:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (!coordSys) {\n                return;\n            }\n\n            var dims = [];\n            var coordDims = coordSys.dimensions;\n            for (var i = 0; i < coordDims.length; i++) {\n                dims.push(seriesModel.coordDimToDataDim(coordSys.dimensions[i])[0]);\n            }\n\n            if (dims.length === 1) {\n                data.each(dims[0], function (x, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                });\n            }\n            else if (dims.length === 2) {\n                data.each(dims, function (x, y, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(\n                        idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                    );\n                }, true);\n            }\n        });\n    };\n\n\n\n/***/ }),\n\n/***/ 1145:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = __webpack_require__(979);\n    var axisHelper = __webpack_require__(986);\n\n    var zrUtil = __webpack_require__(969);\n    var Cartesian2D = __webpack_require__(1167);\n    var Axis2D = __webpack_require__(1169);\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    __webpack_require__(1170);\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var axisLabelModel = axisModel.getModel('axisLabel');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = axisLabelModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this.model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.axisPointerEnabled = true;\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this.model);\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis.scale, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis.scale, yAxis.model);\n        });\n        each(axesMap.x, function (xAxis) {\n            fixAxisOnZero(axesMap, 'y', xAxis);\n        });\n        each(axesMap.y, function (yAxis) {\n            fixAxisOnZero(axesMap, 'x', yAxis);\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this.model, api);\n    };\n\n    function fixAxisOnZero(axesMap, otherAxisDim, axis) {\n        // onZero can not be enabled in these two situations:\n        // 1. When any other axis is a category axis.\n        // 2. When no axis is cross 0 point.\n        var axes = axesMap[otherAxisDim];\n\n        if (!axis.onZero) {\n            return;\n        }\n\n        var onZeroAxisIndex = axis.onZeroAxisIndex;\n\n        // If target axis is specified.\n        if (onZeroAxisIndex != null) {\n            var otherAxis = axes[onZeroAxisIndex];\n            if (otherAxis && canNotOnZeroToAxis(otherAxis)) {\n                axis.onZero = false;\n            }\n            return;\n        }\n\n        for (var idx in axes) {\n            if (axes.hasOwnProperty(idx)) {\n                var otherAxis = axes[idx];\n                if (otherAxis && !canNotOnZeroToAxis(otherAxis)) {\n                    onZeroAxisIndex = +idx;\n                    break;\n                }\n            }\n        }\n\n        if (onZeroAxisIndex == null) {\n            axis.onZero = false;\n        }\n        axis.onZeroAxisIndex = onZeroAxisIndex;\n    }\n\n    function canNotOnZeroToAxis(axis) {\n        return axis.type === 'category' || axis.type === 'time' || !ifAxisCrossZero(axis);\n    }\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api, ignoreContainLabel) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (!ignoreContainLabel && gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {number} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    /**\n     * @return {Array.<module:echarts/coord/Axis>}\n     */\n    gridProto.getAxes = function () {\n        return this._axesList.slice();\n    };\n\n    /**\n     * Usage:\n     *      grid.getCartesian(xAxisIndex, yAxisIndex);\n     *      grid.getCartesian(xAxisIndex);\n     *      grid.getCartesian(null, yAxisIndex);\n     *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});\n     *\n     * @param {number|Object} [xAxisIndex]\n     * @param {number} [yAxisIndex]\n     */\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n\n        if (zrUtil.isObject(xAxisIndex)) {\n            yAxisIndex = xAxisIndex.yAxisIndex;\n            xAxisIndex = xAxisIndex.xAxisIndex;\n        }\n        // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n        for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n            if (coordList[i].getAxis('x').index === xAxisIndex\n                || coordList[i].getAxis('y').index === yAxisIndex\n            ) {\n                return coordList[i];\n            }\n        }\n    };\n\n    gridProto.getCartesians = function () {\n        return this._coordsList.slice();\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n                cartesian.model = gridModel;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n                axis.onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined\n     * @return {Object} {baseAxes: [], otherAxes: []}\n     */\n    gridProto.getTooltipAxes = function (dim) {\n        var baseAxes = [];\n        var otherAxes = [];\n\n        each(this.getCartesians(), function (cartesian) {\n            var baseAxis = (dim != null && dim !== 'auto')\n                ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n            var otherAxis = cartesian.getOtherAxis(baseAxis);\n            zrUtil.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n            zrUtil.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n        });\n\n        return {baseAxes: baseAxes, otherAxes: otherAxes};\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            // dataSampling requires axis extent, so resize\n            // should be performed in create stage.\n            grid.resize(gridModel, api, true);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;\n\n    __webpack_require__(996).register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n/***/ }),\n\n/***/ 1146:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var ComponentModel = __webpack_require__(981);\n    var zrUtil = __webpack_require__(969);\n    var axisModelCreator = __webpack_require__(1075);\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, __webpack_require__(1016));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n/***/ }),\n\n/***/ 1150:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var modelUtil = __webpack_require__(973);\n\n    var helper = {};\n\n    helper.findLabelValueDim = function (data) {\n        var valueDim;\n        var labelDims = modelUtil.otherDimToDataDim(data, 'label');\n\n        if (labelDims.length) {\n            valueDim = labelDims[0];\n        }\n        else {\n            // Get last value dim\n            var dimensions = data.dimensions.slice();\n            var dataType;\n            while (dimensions.length && (\n                valueDim = dimensions.pop(),\n                dataType = data.getDimensionInfo(valueDim).type,\n                dataType === 'ordinal' || dataType === 'time'\n            )) {} // jshint ignore:line\n        }\n\n        return valueDim;\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ 1151:\n/***/ (function(module, exports, __webpack_require__) {\n\n// Poly path support NaN point\n\n\n    var Path = __webpack_require__(978);\n    var vec2 = __webpack_require__(974);\n    var fixClipWithShadow = __webpack_require__(1047);\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            brush: fixClipWithShadow(Path.prototype.brush),\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            brush: fixClipWithShadow(Path.prototype.brush),\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n/***/ }),\n\n/***/ 1152:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        axisPointer: {},\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            onZeroAxisIndex: null,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            showMinLabel: null, // true | false | null (auto)\n            showMaxLabel: null, // true | false | null (auto)\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            fontSize: 12\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n        // maxInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n\n    var logAxis = zrUtil.defaults({\n        scale: true,\n        logBase: 10\n    }, valueAxis);\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n/***/ }),\n\n/***/ 1162:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var echarts = __webpack_require__(970);\n    var PRIORITY = echarts.PRIORITY;\n\n    __webpack_require__(1163);\n    __webpack_require__(1164);\n\n    echarts.registerVisual(zrUtil.curry(\n        __webpack_require__(1044), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        __webpack_require__(1144), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        __webpack_require__(1166), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    __webpack_require__(1045);\n\n\n/***/ }),\n\n/***/ 1163:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var createListFromArray = __webpack_require__(1006);\n    var SeriesModel = __webpack_require__(992);\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n            // cursor: null,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1164:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// FIXME step not support polar\n\n\n    var zrUtil = __webpack_require__(969);\n    var SymbolDraw = __webpack_require__(1055);\n    var Symbol = __webpack_require__(1074);\n    var lineAnimationDiff = __webpack_require__(1165);\n    var graphic = __webpack_require__(971);\n    var modelUtil = __webpack_require__(973);\n    var polyHelper = __webpack_require__(1151);\n    var ChartView = __webpack_require__(1000);\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n\n        var valueStart = 0;\n        if (!baseAxis.onZero) {\n            var extent = valueAxis.scale.getExtent();\n            if (extent[0] > 0) {\n                // Both positive\n                valueStart = extent[0];\n            }\n            else if (extent[1] < 0) {\n                // Both negative\n                valueStart = extent[1];\n            }\n            // If is one positive, and one negative, onZero shall be true\n        }\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // FIXME\n                // can not downplay completely.\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1165:\n/***/ (function(module, exports) {\n\n\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n/***/ }),\n\n/***/ 1166:\n/***/ (function(module, exports) {\n\n\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n/***/ }),\n\n/***/ 1167:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var Cartesian = __webpack_require__(1168);\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n/***/ }),\n\n/***/ 1168:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = __webpack_require__(969);\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n/***/ }),\n\n/***/ 1169:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var Axis = __webpack_require__(1005);\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        /**\n         * Each item cooresponds to this.getExtent(), which\n         * means globalExtent[0] may greater than globalExtent[1],\n         * unless `asc` is input.\n         *\n         * @param {boolean} [asc]\n         * @return {Array.<number>}\n         */\n        getGlobalExtent: function (asc) {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            asc && ret[0] > ret[1] && ret.reverse();\n            return ret;\n        },\n\n        getOtherAxis: function () {\n            this.grid.getOtherAxis();\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * @override\n         */\n        pointToData: function (point, clamp) {\n            return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n/***/ }),\n\n/***/ 1170:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    __webpack_require__(1146);\n\n    var ComponentModel = __webpack_require__(981);\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n/***/ }),\n\n/***/ 1171:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// TODO boundaryGap\n\n\n    __webpack_require__(1146);\n\n    __webpack_require__(1172);\n\n\n/***/ }),\n\n/***/ 1172:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var AxisBuilder = __webpack_require__(1011);\n    var AxisView = __webpack_require__(1012);\n    var cartesianAxisHelper = __webpack_require__(1050);\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisTickLabel', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var CartesianAxisView = AxisView.extend({\n\n        type: 'cartesianAxis',\n\n        axisPointerClass: 'CartesianAxisPointer',\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n            CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n            var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(\n                    axis, i, lineInterval, ticksCoords.length,\n                    showMinLabel, showMaxLabel\n                )) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n            var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(\n                    axis, i, areaInterval, ticksCoords.length,\n                    showMinLabel, showMaxLabel\n                )) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    CartesianAxisView.extend({\n        type: 'xAxis'\n    });\n    CartesianAxisView.extend({\n        type: 'yAxis'\n    });\n\n\n\n/***/ }),\n\n/***/ 1174:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(1045);\n\n    __webpack_require__(1048);\n\n    __webpack_require__(1020);\n\n\n\n/***/ }),\n\n/***/ 1175:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Legend component entry file8\n */\n\n\n    __webpack_require__(1065);\n\n    __webpack_require__(1176);\n    __webpack_require__(1177);\n    __webpack_require__(1178);\n\n\n\n/***/ }),\n\n/***/ 1176:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var LegendModel = __webpack_require__(1051);\n    var layout = __webpack_require__(979);\n\n    var ScrollableLegendModel = LegendModel.extend({\n\n        type: 'legend.scroll',\n\n        /**\n         * @param {number} scrollDataIndex\n         */\n        setScrollDataIndex: function (scrollDataIndex) {\n            this.option.scrollDataIndex = scrollDataIndex;\n        },\n\n        defaultOption: {\n            scrollDataIndex: 0,\n            pageButtonItemGap: 5,\n            pageButtonGap: null,\n            pageButtonPosition: 'end', // 'start' or 'end'\n            pageFormatter: '{current}/{total}', // If null/undefined, do not show page.\n            pageIcons: {\n                horizontal: ['M0,0L12,-10L12,10z', 'M0,0L-12,-10L-12,10z'],\n                vertical: ['M0,0L20,0L10,-20z', 'M0,0L20,0L10,20z']\n            },\n            pageIconColor: '#2f4554',\n            pageIconInactiveColor: '#aaa',\n            pageIconSize: 15, // Can be [10, 3], which represents [width, height]\n            pageTextStyle: {\n                color: '#333'\n            },\n\n            animationDurationUpdate: 800\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel, extraOpt) {\n            var inputPositionParams = layout.getLayoutParams(option);\n\n            ScrollableLegendModel.superCall(this, 'init', option, parentModel, ecModel, extraOpt);\n\n            mergeAndNormalizeLayoutParams(this, option, inputPositionParams);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (option, extraOpt) {\n            ScrollableLegendModel.superCall(this, 'mergeOption', option, extraOpt);\n\n            mergeAndNormalizeLayoutParams(this, this.option, option);\n        },\n\n        getOrient: function () {\n            return this.get('orient') === 'vertical'\n                ? {index: 1, name: 'vertical'}\n                : {index: 0, name: 'horizontal'};\n        }\n\n    });\n\n    // Do not `ignoreSize` to enable setting {left: 10, right: 10}.\n    function mergeAndNormalizeLayoutParams(legendModel, target, raw) {\n        var orient = legendModel.getOrient();\n        var ignoreSize = [1, 1];\n        ignoreSize[orient.index] = 0;\n        layout.mergeLayoutParam(target, raw, {\n            type: 'box', ignoreSize: ignoreSize\n        });\n    }\n\n    module.exports = ScrollableLegendModel;\n\n\n/***/ }),\n\n/***/ 1177:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Separate legend and scrollable legend to reduce package size.\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var graphic = __webpack_require__(971);\n    var layoutUtil = __webpack_require__(979);\n    var LegendView = __webpack_require__(1052);\n\n    var Group = graphic.Group;\n\n    var WH = ['width', 'height'];\n    var XY = ['x', 'y'];\n\n    var ScrollableLegendView = LegendView.extend({\n\n        type: 'legend.scroll',\n\n        newlineDisabled: true,\n\n        init: function () {\n\n            ScrollableLegendView.superCall(this, 'init');\n\n            /**\n             * @private\n             * @type {number} For `scroll`.\n             */\n            this._currentIndex = 0;\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._containerGroup = new Group());\n            this._containerGroup.add(this.getContentGroup());\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._controllerGroup = new Group());\n        },\n\n        /**\n         * @override\n         */\n        resetInner: function () {\n            ScrollableLegendView.superCall(this, 'resetInner');\n\n            this._controllerGroup.removeAll();\n            this._containerGroup.removeClipPath();\n            this._containerGroup.__rectSize = null;\n        },\n\n        /**\n         * @override\n         */\n        renderInner: function (itemAlign, legendModel, ecModel, api) {\n            var me = this;\n\n            // Render content items.\n            ScrollableLegendView.superCall(this, 'renderInner', itemAlign, legendModel, ecModel, api);\n\n            var controllerGroup = this._controllerGroup;\n\n            var pageIconSize = legendModel.get('pageIconSize', true);\n            if (!zrUtil.isArray(pageIconSize)) {\n                pageIconSize = [pageIconSize, pageIconSize];\n            }\n\n            createPageButton('pagePrev', 0);\n\n            var pageTextStyleModel = legendModel.getModel('pageTextStyle');\n            controllerGroup.add(new graphic.Text({\n                name: 'pageText',\n                style: {\n                    textFill: pageTextStyleModel.getTextColor(),\n                    font: pageTextStyleModel.getFont(),\n                    textVerticalAlign: 'middle',\n                    textAlign: 'center'\n                },\n                silent: true\n            }));\n\n            createPageButton('pageNext', 1);\n\n            function createPageButton(name, iconIdx) {\n                var pageDataIndexName = name + 'DataIndex';\n                var icon = graphic.createIcon(\n                    legendModel.get('pageIcons', true)[legendModel.getOrient().name][iconIdx],\n                    {\n                        // Buttons will be created in each render, so we do not need\n                        // to worry about avoiding using legendModel kept in scope.\n                        onclick: zrUtil.bind(\n                            me._pageGo, me, pageDataIndexName, legendModel, api\n                        )\n                    },\n                    {\n                        x: -pageIconSize[0] / 2,\n                        y: -pageIconSize[1] / 2,\n                        width: pageIconSize[0],\n                        height: pageIconSize[1]\n                    }\n                );\n                icon.name = name;\n                controllerGroup.add(icon);\n            }\n        },\n\n        /**\n         * @override\n         */\n        layoutInner: function (legendModel, itemAlign, maxSize) {\n            var contentGroup = this.getContentGroup();\n            var containerGroup = this._containerGroup;\n            var controllerGroup = this._controllerGroup;\n\n            var orientIdx = legendModel.getOrient().index;\n            var wh = WH[orientIdx];\n            var hw = WH[1 - orientIdx];\n            var yx = XY[1 - orientIdx];\n\n            // Place items in contentGroup.\n            layoutUtil.box(\n                legendModel.get('orient'),\n                contentGroup,\n                legendModel.get('itemGap'),\n                !orientIdx ? null : maxSize.width,\n                orientIdx ? null : maxSize.height\n            );\n\n            layoutUtil.box(\n                // Buttons in controller are layout always horizontally.\n                'horizontal',\n                controllerGroup,\n                legendModel.get('pageButtonItemGap', true)\n            );\n\n            var contentRect = contentGroup.getBoundingRect();\n            var controllerRect = controllerGroup.getBoundingRect();\n            var showController = contentRect[wh] > maxSize[wh];\n\n            var contentPos = [-contentRect.x, -contentRect.y];\n            // Remain contentPos when scroll animation perfroming.\n            contentPos[orientIdx] = contentGroup.position[orientIdx];\n\n            // Layout container group based on 0.\n            var containerPos = [0, 0];\n            var controllerPos = [-controllerRect.x, -controllerRect.y];\n            var pageButtonGap = zrUtil.retrieve2(\n                legendModel.get('pageButtonGap', true), legendModel.get('itemGap', true)\n            );\n\n            // Place containerGroup and controllerGroup and contentGroup.\n            if (showController) {\n                var pageButtonPosition = legendModel.get('pageButtonPosition', true);\n                // controller is on the right / bottom.\n                if (pageButtonPosition === 'end') {\n                    controllerPos[orientIdx] += maxSize[wh] - controllerRect[wh];\n                }\n                // controller is on the left / top.\n                else {\n                    containerPos[orientIdx] += controllerRect[wh] + pageButtonGap;\n                }\n            }\n\n            // Always align controller to content as 'middle'.\n            controllerPos[1 - orientIdx] += contentRect[hw] / 2 - controllerRect[hw] / 2;\n\n            contentGroup.attr('position', contentPos);\n            containerGroup.attr('position', containerPos);\n            controllerGroup.attr('position', controllerPos);\n\n            // Calculate `mainRect` and set `clipPath`.\n            // mainRect should not be calculated by `this.group.getBoundingRect()`\n            // for sake of the overflow.\n            var mainRect = this.group.getBoundingRect();\n            var mainRect = {x: 0, y: 0};\n            // Consider content may be overflow (should be clipped).\n            mainRect[wh] = showController ? maxSize[wh] : contentRect[wh];\n            mainRect[hw] = Math.max(contentRect[hw], controllerRect[hw]);\n            // `containerRect[yx] + containerPos[1 - orientIdx]` is 0.\n            mainRect[yx] = Math.min(0, controllerRect[yx] + controllerPos[1 - orientIdx]);\n\n            containerGroup.__rectSize = maxSize[wh];\n            if (showController) {\n                var clipShape = {x: 0, y: 0};\n                clipShape[wh] = Math.max(maxSize[wh] - controllerRect[wh] - pageButtonGap, 0);\n                clipShape[hw] = mainRect[hw];\n                containerGroup.setClipPath(new graphic.Rect({shape: clipShape}));\n                // Consider content may be larger than container, container rect\n                // can not be obtained from `containerGroup.getBoundingRect()`.\n                containerGroup.__rectSize = clipShape[wh];\n            }\n            else {\n                // Do not remove or ignore controller. Keep them set as place holders.\n                controllerGroup.eachChild(function (child) {\n                    child.attr({invisible: true, silent: true});\n                });\n            }\n\n            // Content translate animation.\n            var pageInfo = this._getPageInfo(legendModel);\n            pageInfo.pageIndex != null && graphic.updateProps(\n                contentGroup, {position: pageInfo.contentPosition}, legendModel\n            );\n\n            this._updatePageInfoView(legendModel, pageInfo);\n\n            return mainRect;\n        },\n\n        _pageGo: function (to, legendModel, api) {\n            var scrollDataIndex = this._getPageInfo(legendModel)[to];\n\n            scrollDataIndex != null && api.dispatchAction({\n                type: 'legendScroll',\n                scrollDataIndex: scrollDataIndex,\n                legendId: legendModel.id\n            });\n        },\n\n        _updatePageInfoView: function (legendModel, pageInfo) {\n            var controllerGroup = this._controllerGroup;\n\n            zrUtil.each(['pagePrev', 'pageNext'], function (name) {\n                var canJump = pageInfo[name + 'DataIndex'] != null;\n                var icon = controllerGroup.childOfName(name);\n                if (icon) {\n                    icon.setStyle(\n                        'fill',\n                        canJump\n                            ? legendModel.get('pageIconColor', true)\n                            : legendModel.get('pageIconInactiveColor', true)\n                    );\n                    icon.cursor = canJump ? 'pointer' : 'default';\n                }\n            });\n\n            var pageText = controllerGroup.childOfName('pageText');\n            var pageFormatter = legendModel.get('pageFormatter');\n            var pageIndex = pageInfo.pageIndex;\n            var current = pageIndex != null ? pageIndex + 1 : 0;\n            var total = pageInfo.pageCount;\n\n            pageText && pageFormatter && pageText.setStyle(\n                'text',\n                zrUtil.isString(pageFormatter)\n                    ? pageFormatter.replace('{current}', current).replace('{total}', total)\n                    : pageFormatter({current: current, total: total})\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Model} legendModel\n         * @return {Object} {\n         *  contentPosition: Array.<number>, null when data item not found.\n         *  pageIndex: number, null when data item not found.\n         *  pageCount: number, always be a number, can be 0.\n         *  pagePrevDataIndex: number, null when no next page.\n         *  pageNextDataIndex: number, null when no previous page.\n         * }\n         */\n        _getPageInfo: function (legendModel) {\n            // Align left or top by the current dataIndex.\n            var currDataIndex = legendModel.get('scrollDataIndex', true);\n            var contentGroup = this.getContentGroup();\n            var contentRect = contentGroup.getBoundingRect();\n            var containerRectSize = this._containerGroup.__rectSize;\n\n            var orientIdx = legendModel.getOrient().index;\n            var wh = WH[orientIdx];\n            var hw = WH[1 - orientIdx];\n            var xy = XY[orientIdx];\n            var contentPos = contentGroup.position.slice();\n\n            var pageIndex;\n            var pagePrevDataIndex;\n            var pageNextDataIndex;\n\n            var targetItemGroup;\n            contentGroup.eachChild(function (child) {\n                if (child.__legendDataIndex === currDataIndex) {\n                    targetItemGroup = child;\n                }\n            });\n\n            var pageCount = containerRectSize ? Math.ceil(contentRect[wh] / containerRectSize) : 0;\n\n            if (targetItemGroup) {\n                var itemRect = targetItemGroup.getBoundingRect();\n                var itemLoc = targetItemGroup.position[orientIdx] + itemRect[xy];\n                contentPos[orientIdx] = -itemLoc - contentRect[xy];\n                pageIndex = Math.floor(\n                    pageCount * (itemLoc + itemRect[xy] + containerRectSize / 2) / contentRect[wh]\n                );\n                pageIndex = (contentRect[wh] && pageCount)\n                    ? Math.max(0, Math.min(pageCount - 1, pageIndex))\n                    : -1;\n\n                var winRect = {x: 0, y: 0};\n                winRect[wh] = containerRectSize;\n                winRect[hw] = contentRect[hw];\n                winRect[xy] = -contentPos[orientIdx] - contentRect[xy];\n\n                var startIdx;\n                var children = contentGroup.children();\n\n                contentGroup.eachChild(function (child, index) {\n                    var itemRect = getItemRect(child);\n\n                    if (itemRect.intersect(winRect)) {\n                        startIdx == null && (startIdx = index);\n                        // It is user-friendly that the last item shown in the\n                        // current window is shown at the begining of next window.\n                        pageNextDataIndex = child.__legendDataIndex;\n                    }\n\n                    // If the last item is shown entirely, no next page.\n                    if (index === children.length - 1\n                        && itemRect[xy] + itemRect[wh] <= winRect[xy] + winRect[wh]\n                    ) {\n                        pageNextDataIndex = null;\n                    }\n                });\n\n                // Always align based on the left/top most item, so the left/top most\n                // item in the previous window is needed to be found here.\n                if (startIdx != null) {\n                    var startItem = children[startIdx];\n                    var startRect = getItemRect(startItem);\n                    winRect[xy] = startRect[xy] + startRect[wh] - winRect[wh];\n\n                    // If the first item is shown entirely, no previous page.\n                    if (startIdx <= 0 && startRect[xy] >= winRect[xy]) {\n                        pagePrevDataIndex = null;\n                    }\n                    else {\n                        while (startIdx > 0 && getItemRect(children[startIdx - 1]).intersect(winRect)) {\n                            startIdx--;\n                        }\n                        pagePrevDataIndex = children[startIdx].__legendDataIndex;\n                    }\n                }\n            }\n\n            return {\n                contentPosition: contentPos,\n                pageIndex: pageIndex,\n                pageCount: pageCount,\n                pagePrevDataIndex: pagePrevDataIndex,\n                pageNextDataIndex: pageNextDataIndex\n            };\n\n            function getItemRect(el) {\n                var itemRect = el.getBoundingRect().clone();\n                itemRect[xy] += el.position[orientIdx];\n                return itemRect;\n            }\n        }\n\n    });\n\n    module.exports = ScrollableLegendView;\n\n\n\n/***/ }),\n\n/***/ 1178:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Legend action\n */\n\n\n    /**\n     * @event legendScroll\n     * @type {Object}\n     * @property {string} type 'legendScroll'\n     * @property {string} scrollDataIndex\n     */\n    __webpack_require__(970).registerAction(\n        'legendScroll', 'legendscroll',\n        function (payload, ecModel) {\n            var scrollDataIndex = payload.scrollDataIndex;\n\n            scrollDataIndex != null && ecModel.eachComponent(\n                {mainType: 'legend', subType: 'scroll', query: payload},\n                function (legendModel) {\n                    legendModel.setScrollDataIndex(scrollDataIndex);\n                }\n            );\n        }\n    );\n\n\n/***/ }),\n\n/***/ 327:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__ = __webpack_require__(970);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_component_tooltip__ = __webpack_require__(1064);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_lib_component_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_lib_component_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_component_grid__ = __webpack_require__(1174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts_lib_component_grid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts_lib_component_grid__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_echarts_lib_chart_line__ = __webpack_require__(1162);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_echarts_lib_chart_line___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_echarts_lib_chart_line__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_echarts_lib_component_legendScroll__ = __webpack_require__(1175);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_echarts_lib_component_legendScroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_echarts_lib_component_legendScroll__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_echarts_lib_component_toolbox__ = __webpack_require__(1067);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_echarts_lib_component_toolbox___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_echarts_lib_component_toolbox__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}//必须\nvar LineReact=function(_React$Component){_inherits(LineReact,_React$Component);function LineReact(props){_classCallCheck(this,LineReact);var _this=_possibleConstructorReturn(this,(LineReact.__proto__||Object.getPrototypeOf(LineReact)).call(this,props));_this.initPie=_this.initPie.bind(_this);return _this;}_createClass(LineReact,[{key:'initPie',value:function initPie(){var _props$option=this.props.option,option=_props$option===undefined?{}:_props$option;//外部传入的data数据\nvar myChart=__WEBPACK_IMPORTED_MODULE_1_echarts_lib_echarts___default.a.init(this.ID);//初始化echarts\n//设置options\nmyChart.setOption(option);window.onresize=function(){myChart.resize();};}},{key:'componentDidMount',value:function componentDidMount(){this.initPie();}},{key:'componentDidUpdate',value:function componentDidUpdate(){this.initPie();}},{key:'render',value:function render(){var _this2=this;var _props=this.props,_props$width=_props.width,width=_props$width===undefined?\"100%\":_props$width,_props$height=_props.height,height=_props$height===undefined?\"300px\":_props$height;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{ref:function ref(ID){return _this2.ID=ID;},style:{width:width,height:height}});}}]);return LineReact;}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);/* harmony default export */ __webpack_exports__[\"default\"] = (LineReact);\n\n/***/ }),\n\n/***/ 969:\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            var Ctor = source.constructor;\n            if (source.constructor.from) {\n                result = Ctor.from(source);\n            }\n            else {\n                result = new Ctor(source.length);\n                for (var i = 0, len = source.length; i < len; i++) {\n                    result[i] = clone(source[i]);\n                }\n            }\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * Low performance.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    function retrieve2(value0, value1) {\n        return value0 != null\n            ? value0\n            : value1;\n    }\n\n    function retrieve3(value0, value1, value2) {\n        return value0 != null\n            ? value0\n            : value1 != null\n            ? value1\n            : value2;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     * @return {Array.<number>}\n     */\n    function normalizeCssArray(val) {\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        var len = val.length;\n        if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     * @param {Object} obj Only apply `ownProperty`.\n     */\n    function HashMap(obj) {\n        obj && each(obj, function (value, key) {\n            this.set(key, value);\n        }, this);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[HASH_MAP_PREFIX + key];\n        }\n    };\n\n    function createHashMap(obj) {\n        return new HashMap(obj);\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        retrieve2: retrieve2,\n        retrieve3: retrieve3,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        normalizeCssArray: normalizeCssArray,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n/***/ }),\n\n/***/ 970:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = __webpack_require__(976);\n\n    var GlobalModel = __webpack_require__(1077);\n    var ExtensionAPI = __webpack_require__(1105);\n    var CoordinateSystemManager = __webpack_require__(996);\n    var OptionManager = __webpack_require__(1106);\n    var backwardCompat = __webpack_require__(1107);\n\n    var ComponentModel = __webpack_require__(981);\n    var SeriesModel = __webpack_require__(992);\n\n    var ComponentView = __webpack_require__(1026);\n    var ChartView = __webpack_require__(1000);\n    var graphic = __webpack_require__(971);\n    var modelUtil = __webpack_require__(973);\n    var throttle = __webpack_require__(1009);\n\n    var zrender = __webpack_require__(1063);\n    var zrUtil = __webpack_require__(969);\n    var colorTool = __webpack_require__(991);\n    var Eventful = __webpack_require__(990);\n    var timsort = __webpack_require__(1015);\n\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts(dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        var theme = zrUtil.clone(theme);\n        theme && backwardCompat(theme, true);\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = theme;\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = createExtensionAPI(this);\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n\n        // ECharts instance can be used as value.\n        zrUtil.setAsPrimitive(this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getDevicePixelRatio = function () {\n        return this._zr.painter.dpr || window.devicePixelRatio || 1;\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n    /**\n     * Get view of corresponding component model\n     * @param  {module:echarts/model/Component} componentModel\n     * @return {module:echarts/view/Component}\n     */\n    echartsProto.getViewOfComponentModel = function (componentModel) {\n        return this._componentsMap[componentModel.__viewId];\n    };\n\n    /**\n     * Get view of corresponding series model\n     * @param  {module:echarts/model/Series} seriesModel\n     * @return {module:echarts/view/Chart}\n     */\n    echartsProto.getViewOfSeriesModel = function (seriesModel) {\n        return this._chartsMap[seriesModel.__viewId];\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.profile && console.profile('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            each(postUpdateFuncs, function (func) {\n                func(ecModel, api);\n            });\n\n            // console.profile && console.profileEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            updateMethods.update.call(this, payload);\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n\n        // broadcast\n        if (!mainType) {\n            each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n            return;\n        }\n\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            callView(ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId]);\n        }, ecIns);\n\n        function callView(view) {\n            view && view.__alive && view[method] && view[method](\n                view.__model, ecModel, ecIns._api, payload\n            );\n        }\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // Avoid dispatch action before setOption. Especially in `connect`.\n        if (!this._model) {\n            return;\n        }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var escapeConnect = payload.escapeConnect;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] != null && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        each(payloads, function (batchItem) {\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model, this._api);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }, this);\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                escapeConnect: escapeConnect,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Post render\n        each(postUpdateFuncs, function (func) {\n            func(ecModel, api);\n        });\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = '_ec_' + model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = view.__id = viewId;\n            view.__alive = true;\n            view.__model = model;\n            view.group.__ecComponentInfo = {\n                mainType: model.mainType,\n                index: model.componentIndex\n            };\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n                view.__id = view.group.__ecComponentInfo = null;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                // Avoid conflict with Object.prototype\n                if (stackedDataMap.hasOwnProperty(stack) && previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n\n    function createExtensionAPI(ecInstance) {\n        var coordSysMgr = ecInstance._coordSysMgr;\n        return zrUtil.extend(new ExtensionAPI(ecInstance), {\n            // Inject methods\n            getCoordinateSystems: zrUtil.bind(\n                coordSysMgr.getCoordinateSystems, coordSysMgr\n            ),\n            getComponentByElement: function (el) {\n                while (el) {\n                    var modelInfo = el.__ecComponentInfo;\n                    if (modelInfo != null) {\n                        return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n                    }\n                    el = el.parent;\n                }\n            }\n        });\n    }\n\n    /**\n     * @type {Object} key: actionType.\n     * @inner\n     */\n    var actions = {};\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var postUpdateFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.7.2',\n        dependencies: {\n            zrender: '3.6.2'\n        }\n    };\n\n    function enableConnect(chart) {\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    if (event && event.escapeConnect) {\n                        return;\n                    }\n\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {HTMLElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n        }\n\n        var existInstance = echarts.getInstanceByDom(dom);\n        if (existInstance) {\n            if (__DEV__) {\n                console.warn('There is a chart instance already initialized on the dom.');\n            }\n            return existInstance;\n        }\n\n        if (__DEV__) {\n            if (zrUtil.isDom(dom)\n                && dom.nodeName.toUpperCase() !== 'CANVAS'\n                && (\n                    (!dom.clientWidth && (!opts || opts.width == null))\n                    || (!dom.clientHeight && (!opts || opts.height == null))\n                )\n            ) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        if (dom.setAttribute) {\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n        }\n        else {\n            dom[DOM_ATTRIBUTE_KEY] = chart.id;\n        }\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @DEPRECATED\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disconnect = echarts.disConnect;\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        else if (!(chart instanceof ECharts)){\n            // Try to treat as dom\n            chart = echarts.getInstanceByDom(chart);\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key;\n        if (dom.getAttribute) {\n            key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        }\n        else {\n            key = dom[DOM_ATTRIBUTE_KEY];\n        }\n        return instances[key];\n    };\n\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Register postUpdater\n     * @param {Function} postUpdateFunc\n     */\n    echarts.registerPostUpdate = function (postUpdateFunc) {\n        postUpdateFuncs.push(postUpdateFunc);\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Get dimensions of specified coordinate system.\n     * @param {string} type\n     * @return {Array.<string|Object>}\n     */\n    echarts.getCoordinateSystemDimensions = function (type) {\n        var coordSysCreator = CoordinateSystemManager.get(type);\n        if (coordSysCreator) {\n            return coordSysCreator.getDimensionsInfo\n                    ? coordSysCreator.getDimensionsInfo()\n                    : coordSysCreator.dimensions.slice();\n        }\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(1117));\n    echarts.registerPreprocessor(backwardCompat);\n    echarts.registerLoading('default', __webpack_require__(1118));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n    // --------\n    // Exports\n    // --------\n    echarts.zrender = zrender;\n\n    echarts.List = __webpack_require__(985);\n    echarts.Model = __webpack_require__(977);\n\n    echarts.Axis = __webpack_require__(1005);\n\n    echarts.graphic = __webpack_require__(971);\n    echarts.number = __webpack_require__(972);\n    echarts.format = __webpack_require__(975);\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = __webpack_require__(984);\n    echarts.vector = __webpack_require__(974);\n    echarts.color = __webpack_require__(991);\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone', 'merge'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    echarts.helper = __webpack_require__(1122);\n\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)))\n\n/***/ }),\n\n/***/ 971:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var pathTool = __webpack_require__(1081);\n    var Path = __webpack_require__(978);\n    var colorTool = __webpack_require__(991);\n    var matrix = __webpack_require__(984);\n    var vector = __webpack_require__(974);\n    var Transformable = __webpack_require__(1022);\n    var BoundingRect = __webpack_require__(980);\n\n    var round = Math.round;\n    var mathMax = Math.max;\n    var mathMin = Math.min;\n\n    var EMPTY_OBJ = {};\n\n    var graphic = {};\n\n    graphic.Group = __webpack_require__(999);\n\n    graphic.Image = __webpack_require__(1025);\n\n    graphic.Text = __webpack_require__(1061);\n\n    graphic.Circle = __webpack_require__(1089);\n\n    graphic.Sector = __webpack_require__(1090);\n\n    graphic.Ring = __webpack_require__(1091);\n\n    graphic.Polygon = __webpack_require__(1092);\n\n    graphic.Polyline = __webpack_require__(1095);\n\n    graphic.Rect = __webpack_require__(1096);\n\n    graphic.Line = __webpack_require__(1097);\n\n    graphic.BezierCurve = __webpack_require__(1098);\n\n    graphic.Arc = __webpack_require__(1099);\n\n    graphic.CompoundPath = __webpack_require__(1100);\n\n    graphic.LinearGradient = __webpack_require__(1062);\n\n    graphic.RadialGradient = __webpack_require__(1101);\n\n    graphic.BoundingRect = BoundingRect;\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    var subPixelOptimize = graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                // See comment in `doSingleEnterHover`.\n                if (hoverStyle[name] != null) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            var style = el.style;\n            var insideRollbackOpt = style.insideRollbackOpt;\n\n            // Consider case: only `position: 'top'` is set on emphasis, then text\n            // color should be returned to `autoColor`, rather than remain '#fff'.\n            // So we should rollback then apply again after style merging.\n            insideRollbackOpt && rollbackInsideStyle(style);\n\n            // styles can be:\n            // {\n            //     label: {\n            //         normal: {\n            //             show: false,\n            //             position: 'outside',\n            //             fontSize: 18\n            //         },\n            //         emphasis: {\n            //             show: true\n            //         }\n            //     }\n            // },\n            // where properties of `emphasis` may not appear in `normal`. We previously use\n            // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.\n            // But consider rich text and setOption in merge mode, it is impossible to cover\n            // all properties in merge. So we use merge mode when setting style here, where\n            // only properties that is not `null/undefined` can be set. The disadventage:\n            // null/undefined can not be used to remove style any more in `emphasis`.\n            style.extendFrom(el.__hoverStl);\n\n            // Do not save `insideRollback`.\n            if (insideRollbackOpt) {\n                applyInsideStyle(style, style.insideOriginalTextPosition, insideRollbackOpt);\n\n                // textFill may be rollbacked to null.\n                if (style.textFill == null) {\n                    style.textFill = insideRollbackOpt.autoColor;\n                }\n            }\n\n            el.dirty(false);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            // Consider null/undefined value, should use\n            // `setStyle` but not `extendFrom(stl, true)`.\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element.\n     * This method can be called repeatly without side-effects.\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * @param {Object|module:zrender/graphic/Style} normalStyle\n     * @param {Object} emphasisStyle\n     * @param {module:echarts/model/Model} normalModel\n     * @param {module:echarts/model/Model} emphasisModel\n     * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.\n     * @param {Object} [opt.defaultText]\n     * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by\n     *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by\n     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by\n     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {Object} [normalSpecified]\n     * @param {Object} [emphasisSpecified]\n     */\n    graphic.setLabelStyle = function (\n        normalStyle, emphasisStyle,\n        normalModel, emphasisModel,\n        opt,\n        normalSpecified, emphasisSpecified\n    ) {\n        opt = opt || EMPTY_OBJ;\n        var labelFetcher = opt.labelFetcher;\n        var labelDataIndex = opt.labelDataIndex;\n        var labelDimIndex = opt.labelDimIndex;\n\n        // This scenario, `label.normal.show = true; label.emphasis.show = false`,\n        // is not supported util someone requests.\n\n        var showNormal = normalModel.getShallow('show');\n        var showEmphasis = emphasisModel.getShallow('show');\n\n        // Consider performance, only fetch label when necessary.\n        // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,\n        // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.\n        var baseText = (showNormal || showEmphasis)\n            ? zrUtil.retrieve2(\n                labelFetcher\n                    ? labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex)\n                    : null,\n                opt.defaultText\n            )\n            : null;\n        var normalStyleText = showNormal ? baseText : null;\n        var emphasisStyleText = showEmphasis\n            ? zrUtil.retrieve2(\n                labelFetcher\n                    ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex)\n                    : null,\n                baseText\n            )\n            : null;\n\n        // Optimize: If style.text is null, text will not be drawn.\n        if (normalStyleText != null || emphasisStyleText != null) {\n            // Always set `textStyle` even if `normalStyle.text` is null, because default\n            // values have to be set on `normalStyle`.\n            // If we set default values on `emphasisStyle`, consider case:\n            // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`\n            // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`\n            // Then the 'red' will not work on emphasis.\n            setTextStyle(normalStyle, normalModel, normalSpecified, opt);\n            setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);\n        }\n\n        normalStyle.text = normalStyleText;\n        emphasisStyle.text = emphasisStyleText;\n    };\n\n    /**\n     * Set basic textStyle properties.\n     * @param {Object|module:zrender/graphic/Style} textStyle\n     * @param {module:echarts/model/Model} model\n     * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.\n     * @param {Object} [opt] See `opt` of `setTextStyleCommon`.\n     * @param {boolean} [isEmphasis]\n     */\n    var setTextStyle = graphic.setTextStyle = function (\n        textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis\n    ) {\n        setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);\n        specifiedTextStyle && zrUtil.extend(textStyle, specifiedTextStyle);\n        textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);\n\n        return textStyle;\n    };\n\n    /**\n     * Set text option in the style.\n     * @deprecated\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string|boolean} defaultColor Default text color.\n     *        If set as false, it will be processed as a emphasis style.\n     */\n    graphic.setText = function (textStyle, labelModel, defaultColor) {\n        var opt = {isRectText: true};\n        var isEmphasis;\n\n        if (defaultColor === false) {\n            isEmphasis = true;\n        }\n        else {\n            // Support setting color as 'auto' to get visual color.\n            opt.autoColor = defaultColor;\n        }\n        setTextStyleCommon(textStyle, labelModel, opt, isEmphasis);\n        textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);\n    };\n\n    /**\n     * {\n     *      disableBox: boolean, Whether diable drawing box of block (outer most).\n     *      isRectText: boolean,\n     *      autoColor: string, specify a color when color is 'auto',\n     *              for textFill, textStroke, textBackgroundColor, and textBorderColor.\n     *              If autoColor specified, it is used as default textFill.\n     *      useInsideStyle:\n     *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)\n     *                  if `textFill` is not specified.\n     *              `false`: Do not use inside style.\n     *              `null/undefined`: use inside style if `isRectText` is true and\n     *                  `textFill` is not specified and textPosition contains `'inside'`.\n     *      forceRich: boolean\n     * }\n     */\n    function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {\n        // Consider there will be abnormal when merge hover style to normal style if given default value.\n        opt = opt || EMPTY_OBJ;\n\n        if (opt.isRectText) {\n            var textPosition = textStyleModel.getShallow('position')\n                || (isEmphasis ? null : 'inside');\n            // 'outside' is not a valid zr textPostion value, but used\n            // in bar series, and magric type should be considered.\n            textPosition === 'outside' && (textPosition = 'top');\n            textStyle.textPosition = textPosition;\n            textStyle.textOffset = textStyleModel.getShallow('offset');\n            var labelRotate = textStyleModel.getShallow('rotate');\n            labelRotate != null && (labelRotate *= Math.PI / 180);\n            textStyle.textRotation = labelRotate;\n            textStyle.textDistance = zrUtil.retrieve2(\n                textStyleModel.getShallow('distance'), isEmphasis ? null : 5\n            );\n        }\n\n        var ecModel = textStyleModel.ecModel;\n        var globalTextStyle = ecModel && ecModel.option.textStyle;\n\n        // Consider case:\n        // {\n        //     data: [{\n        //         value: 12,\n        //         label: {\n        //             normal: {\n        //                 rich: {\n        //                     // no 'a' here but using parent 'a'.\n        //                 }\n        //             }\n        //         }\n        //     }],\n        //     rich: {\n        //         a: { ... }\n        //     }\n        // }\n        var richItemNames = getRichItemNames(textStyleModel);\n        var richResult;\n        if (richItemNames) {\n            richResult = {};\n            for (var name in richItemNames) {\n                if (richItemNames.hasOwnProperty(name)) {\n                    // Cascade is supported in rich.\n                    var richTextStyle = textStyleModel.getModel(['rich', name]);\n                    // In rich, never `disableBox`.\n                    setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);\n                }\n            }\n        }\n        textStyle.rich = richResult;\n\n        setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);\n\n        if (opt.forceRich && !opt.textStyle) {\n            opt.textStyle = {};\n        }\n\n        return textStyle;\n    }\n\n    // Consider case:\n    // {\n    //     data: [{\n    //         value: 12,\n    //         label: {\n    //             normal: {\n    //                 rich: {\n    //                     // no 'a' here but using parent 'a'.\n    //                 }\n    //             }\n    //         }\n    //     }],\n    //     rich: {\n    //         a: { ... }\n    //     }\n    // }\n    function getRichItemNames(textStyleModel) {\n        // Use object to remove duplicated names.\n        var richItemNameMap;\n        while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {\n            var rich = (textStyleModel.option || EMPTY_OBJ).rich;\n            if (rich) {\n                richItemNameMap = richItemNameMap || {};\n                for (var name in rich) {\n                    if (rich.hasOwnProperty(name)) {\n                        richItemNameMap[name] = 1;\n                    }\n                }\n            }\n            textStyleModel = textStyleModel.parentModel;\n        }\n        return richItemNameMap;\n    }\n\n    function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {\n        // In merge mode, default value should not be given.\n        globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;\n\n        textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt)\n            || globalTextStyle.color;\n        textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt)\n            || globalTextStyle.textBorderColor;\n        textStyle.textStrokeWidth = zrUtil.retrieve2(\n            textStyleModel.getShallow('textBorderWidth'),\n            globalTextStyle.textBorderWidth\n        );\n\n        if (!isEmphasis) {\n            if (isBlock) {\n                // Always set `insideRollback`, for clearing previous.\n                var originalTextPosition = textStyle.textPosition;\n                textStyle.insideRollback = applyInsideStyle(textStyle, originalTextPosition, opt);\n                // Save original textPosition, because style.textPosition will be repalced by\n                // real location (like [10, 30]) in zrender.\n                textStyle.insideOriginalTextPosition = originalTextPosition;\n                textStyle.insideRollbackOpt = opt;\n            }\n\n            // Set default finally.\n            if (textStyle.textFill == null) {\n                textStyle.textFill = opt.autoColor;\n            }\n        }\n\n        // Do not use `getFont` here, because merge should be supported, where\n        // part of these properties may be changed in emphasis style, and the\n        // others should remain their original value got from normal style.\n        textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;\n        textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;\n        textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;\n        textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;\n\n        textStyle.textAlign = textStyleModel.getShallow('align');\n        textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign')\n            || textStyleModel.getShallow('baseline');\n\n        textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');\n        textStyle.textWidth = textStyleModel.getShallow('width');\n        textStyle.textHeight = textStyleModel.getShallow('height');\n        textStyle.textTag = textStyleModel.getShallow('tag');\n\n        if (!isBlock || !opt.disableBox) {\n            textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);\n            textStyle.textPadding = textStyleModel.getShallow('padding');\n            textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);\n            textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');\n            textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');\n\n            textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');\n            textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');\n            textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');\n            textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');\n        }\n\n        textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor')\n            || globalTextStyle.textShadowColor;\n        textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur')\n            || globalTextStyle.textShadowBlur;\n        textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX')\n            || globalTextStyle.textShadowOffsetX;\n        textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY')\n            || globalTextStyle.textShadowOffsetY;\n    }\n\n    function getAutoColor(color, opt) {\n        return color !== 'auto' ? color : (opt && opt.autoColor) ? opt.autoColor : null;\n    }\n\n    function applyInsideStyle(textStyle, textPosition, opt) {\n        var useInsideStyle = opt.useInsideStyle;\n        var insideRollback;\n\n        if (textStyle.textFill == null\n            && useInsideStyle !== false\n            && (useInsideStyle === true\n                || (opt.isRectText\n                    && textPosition\n                    // textPosition can be [10, 30]\n                    && typeof textPosition === 'string'\n                    && textPosition.indexOf('inside') >= 0\n                )\n            )\n        ) {\n            insideRollback = {\n                textFill: null,\n                textStroke: textStyle.textStroke,\n                textStrokeWidth: textStyle.textStrokeWidth\n            };\n            textStyle.textFill = '#fff';\n            // Consider text with #fff overflow its container.\n            if (textStyle.textStroke == null) {\n                textStyle.textStroke = opt.autoColor;\n                textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);\n            }\n        }\n\n        return insideRollback;\n    }\n\n    function rollbackInsideStyle(style) {\n        var insideRollback = style.insideRollback;\n        if (insideRollback) {\n            style.textFill = insideRollback.textFill;\n            style.textStroke = insideRollback.textStroke;\n            style.textStrokeWidth = insideRollback.textStrokeWidth;\n        }\n    }\n\n    graphic.getFont = function (opt, ecModel) {\n        // ecModel or default text style model.\n        var gTextStyleModel = ecModel || ecModel.getModel('textStyle');\n        return [\n            // FIXME in node-canvas fontWeight is before fontStyle\n            opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '',\n            opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '',\n            (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px',\n            opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'\n        ].join(' ');\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb)\n                : (el.stopAnimation(), el.attr(props), cb && cb());\n        }\n        else {\n            el.stopAnimation();\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} target [x, y]\n     * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:\n     *      + Transform matrix: like [1, 0, 0, 1, 0, 0]\n     *      + {position, rotation, scale}, the same as `zrender/Transformable`.\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (target, transform, invert) {\n        if (transform && !zrUtil.isArrayLike(transform)) {\n            transform = Transformable.getLocalTransform(transform);\n        }\n\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], target, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2.\n     * If no animatableModel, no animation.\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    /**\n     * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]\n     * @param {Object} rect {x, y, width, height}\n     * @return {Array.<Array.<number>>} A new clipped points.\n     */\n    graphic.clipPointsByRect = function (points, rect) {\n        return zrUtil.map(points, function (point) {\n            var x = point[0];\n            x = mathMax(x, rect.x);\n            x = mathMin(x, rect.x + rect.width);\n            var y = point[1];\n            y = mathMax(y, rect.y);\n            y = mathMin(y, rect.y + rect.height);\n            return [x, y];\n        });\n    };\n\n    /**\n     * @param {Object} targetRect {x, y, width, height}\n     * @param {Object} rect {x, y, width, height}\n     * @return {Object} A new clipped rect. If rect size are negative, return undefined.\n     */\n    graphic.clipRectByRect = function (targetRect, rect) {\n        var x = mathMax(targetRect.x, rect.x);\n        var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);\n        var y = mathMax(targetRect.y, rect.y);\n        var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);\n\n        if (x2 >= x && y2 >= y) {\n            return {\n                x: x,\n                y: y,\n                width: x2 - x,\n                height: y2 - y\n            };\n        }\n    };\n\n    /**\n     * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.\n     * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.\n     * @param {Object} [rect] {x, y, width, height}\n     * @return {module:zrender/Element} Icon path or image element.\n     */\n    graphic.createIcon = function (iconStr, opt, rect) {\n        opt = zrUtil.extend({rectHover: true}, opt);\n        var style = opt.style = {strokeNoScale: true};\n        rect = rect || {x: -1, y: -1, width: 2, height: 2};\n\n        if (iconStr) {\n            return iconStr.indexOf('image://') === 0\n                ? (\n                    style.image = iconStr.slice(8),\n                    zrUtil.defaults(style, rect),\n                    new graphic.Image(opt)\n                )\n                : (\n                    graphic.makePath(\n                        iconStr.replace('path://', ''),\n                        opt,\n                        rect,\n                        'center'\n                    )\n                );\n        }\n\n    };\n\n    module.exports = graphic;\n\n\n\n/***/ }),\n\n/***/ 972:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * (1) Fix rounding error of float numbers.\n     * (2) Support return string to avoid scientific notation like '3.5e-7'.\n     *\n     * @param {number} x\n     * @param {number} [precision]\n     * @param {boolean} [returnStr]\n     * @return {number|string}\n     */\n    number.round = function (x, precision, returnStr) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        x = (+x).toFixed(precision);\n        return returnStr ? x : +x;\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    /**\n     * @param {string|number} val\n     * @return {number}\n     */\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n\n        // Consider scientific notation: '3.4e-12' '3.4e+12'\n        var eIndex = str.indexOf('e');\n        if (eIndex > 0) {\n            var precision = +str.slice(eIndex + 1);\n            return precision < 0 ? -precision : 0;\n        }\n        else {\n            var dotIndex = str.indexOf('.');\n            return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n        }\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     *\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    /**\n     * Get a data of given precision, assuring the sum of percentages\n     * in valueList is 1.\n     * The largest remainer method is used.\n     * https://en.wikipedia.org/wiki/Largest_remainder_method\n     *\n     * @param {Array.<number>} valueList a list of all data\n     * @param {number} idx index of the data to be processed in valueList\n     * @param {number} precision integer number showing digits of precision\n     * @return {number} percent ranging from 0 to 100\n     */\n    number.getPercentWithPrecision = function (valueList, idx, precision) {\n        if (!valueList[idx]) {\n            return 0;\n        }\n\n        var sum = zrUtil.reduce(valueList, function (acc, val) {\n            return acc + (isNaN(val) ? 0 : val);\n        }, 0);\n        if (sum === 0) {\n            return 0;\n        }\n\n        var digits = Math.pow(10, precision);\n        var votesPerQuota = zrUtil.map(valueList, function (val) {\n            return (isNaN(val) ? 0 : val) / sum * digits * 100;\n        });\n        var targetSeats = digits * 100;\n\n        var seats = zrUtil.map(votesPerQuota, function (votes) {\n            // Assign automatic seats.\n            return Math.floor(votes);\n        });\n        var currentSum = zrUtil.reduce(seats, function (acc, val) {\n            return acc + val;\n        }, 0);\n\n        var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n            return votes - seats[idx];\n        });\n\n        // Has remainding votes.\n        while (currentSum < targetSeats) {\n            // Find next largest remainder.\n            var max = Number.NEGATIVE_INFINITY;\n            var maxId = null;\n            for (var i = 0, len = remainder.length; i < len; ++i) {\n                if (remainder[i] > max) {\n                    max = remainder[i];\n                    maxId = i;\n                }\n            }\n\n            // Add a vote to max remainder.\n            ++seats[maxId];\n            remainder[maxId] = 0;\n            ++currentSum;\n        }\n\n        return seats[idx] / digits;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    var TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n    /**\n     * Consider DST, it is incorrect to provide a method `getTimezoneOffset`\n     * without time specified. So this method is removed.\n     *\n     * @return {number} in minutes\n     */\n    // number.getTimezoneOffset = function () {\n    //     return (new Date()).getTimezoneOffset();\n    // };\n\n    /**\n     * @param {string|Date|number} value These values can be accepted:\n     *   + An instance of Date, represent a time in its own time zone.\n     *   + Or string in a subset of ISO 8601, only including:\n     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n     *     all of which will be treated as local time if time zone is not specified\n     *     (see <https://momentjs.com/>).\n     *   + Or other string format, including (all of which will be treated as loacal time):\n     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n     *   + a timestamp, which represent a time in UTC.\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Different browsers parse date in different way, so we parse it manually.\n            // Some other issues:\n            // new Date('1970-01-01') is UTC,\n            // new Date('1970/01/01') and new Date('1970-1-01') is local.\n            // See issue #3623\n            var match = TIME_REG.exec(value);\n\n            if (!match) {\n                // return Invalid Date.\n                return new Date(NaN);\n            }\n\n            // Use local time when no timezone offset specifed.\n            if (!match[8]) {\n                // match[n] can only be string or undefined.\n                // But take care of '12' + 1 => '121'.\n                return new Date(\n                    +match[1],\n                    +(match[2] || 1) - 1,\n                    +match[3] || 1,\n                    +match[4] || 0,\n                    +(match[5] || 0),\n                    +match[6] || 0,\n                    +match[7] || 0\n                );\n            }\n            // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n            // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n            // For example, system timezone is set as \"Time Zone: America/Toronto\",\n            // then these code will get different result:\n            // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n            // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n            // So we should not use `new Date`, but use `Date.UTC`.\n            else {\n                var hour = +match[4] || 0;\n                if (match[8].toUpperCase() !== 'Z') {\n                    hour -= match[8].slice(0, 3);\n                }\n                return new Date(Date.UTC(\n                    +match[1],\n                    +(match[2] || 1) - 1,\n                    +match[3] || 1,\n                    hour,\n                    +(match[5] || 0),\n                    +match[6] || 0,\n                    +match[7] || 0\n                ));\n            }\n        }\n        else if (value == null) {\n            return new Date(NaN);\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     *\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, quantityExponent(val));\n    };\n\n    function quantityExponent(val) {\n        return Math.floor(Math.log(val) / Math.LN10);\n    }\n\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true,\n     * take ceiling if round = false. The primary observation is that the “nicest”\n     * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     *\n     * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n     *\n     * @param  {number} val Non-negative value.\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exponent = quantityExponent(val);\n        var exp10 = Math.pow(10, exponent);\n        var f = val / exp10; // 1 <= f < 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        val = nf * exp10;\n\n        // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n        // 20 is the uppper bound of toFixed.\n        return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     *\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n/***/ }),\n\n/***/ 973:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var formatUtil = __webpack_require__(975);\n    var nubmerUtil = __webpack_require__(972);\n    var Model = __webpack_require__(977);\n    var zrUtil = __webpack_require__(969);\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             fontSize: 18\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            for (var i = 0, len = subOpts.length; i < len; i++) {\n                var subOptName = subOpts[i];\n                if (!emphasisOpt.hasOwnProperty(subOptName)\n                    && normalOpt.hasOwnProperty(subOptName)\n                ) {\n                    emphasisOpt[subOptName] = normalOpt[subOptName];\n                }\n            }\n        }\n    };\n\n    modelUtil.TEXT_STYLE_OPTIONS = [\n        'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n        'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth',\n        'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline',\n        'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY',\n        'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY',\n        'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding'\n    ];\n\n    // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n    //     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n    //     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n    //     // FIXME: deprecated, check and remove it.\n    //     'textStyle'\n    // ]);\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time'\n            // spead up when using timestamp\n            && typeof value !== 'number'\n            && value != null\n            && value !== '-'\n        ) {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n            var color = data.getItemVisual(dataIndex, 'color');\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: this.seriesIndex,\n                seriesId: this.id,\n                seriesName: this.name,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: color,\n                marker: formatUtil.getTooltipMarker(color),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @param {string} [labelProp='label']\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get([labelProp || 'label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = zrUtil.createHashMap();\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && idMap.set(existCpt.id, item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && idMap.set(opt.id, item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-'; // name may be displayed on screen, so use '-'.\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap.get(keyInfo.id));\n            }\n\n            idMap.set(keyInfo.id, item);\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * Enable property storage to any host object.\n     * Notice: Serialization is not supported.\n     *\n     * For example:\n     * var get = modelUitl.makeGetter();\n     *\n     * function some(hostObj) {\n     *      get(hostObj)._someProperty = 1212;\n     *      ...\n     * }\n     *\n     * @return {Function}\n     */\n    modelUtil.makeGetter = (function () {\n        var index = 0;\n        return function () {\n            var key = '\\0__ec_prop_getter_' + index++;\n            return function (hostObj) {\n                return hostObj[key] || (hostObj[key] = {});\n            };\n        };\n    })();\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, geoName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n     *        If nothing or null/undefined specified, return nothing.\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @param {Array.<string>} [opt.includeMainTypes]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = (parsedKey[2] || '').toLowerCase();\n\n            if (!mainType\n                || !queryType\n                || value == null\n                || (queryType === 'index' && value === 'none')\n                || (opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0)\n            ) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            if (queryType !== 'index' || value !== 'all') {\n                queryParam[queryType] = value;\n            }\n\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string|number} dataDim\n     * @return {string}\n     */\n    modelUtil.dataDimToCoordDim = function (data, dataDim) {\n        var dimensions = data.dimensions;\n        dataDim = data.getDimension(dataDim);\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimItem = data.getDimensionInfo(dimensions[i]);\n            if (dimItem.name === dataDim) {\n                return dimItem.coordDim;\n            }\n        }\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} coordDim\n     * @return {Array.<string>} data dimensions on the coordDim.\n     */\n    modelUtil.coordDimToDataDim = function (data, coordDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            if (dimItem.coordDim === coordDim) {\n                dataDim[dimItem.coordDimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} otherDim Can be `otherDims`\n     *                        like 'label' or 'tooltip'.\n     * @return {Array.<string>} data dimensions on the otherDim.\n     */\n    modelUtil.otherDimToDataDim = function (data, otherDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            var otherDims = dimItem.otherDims;\n            var dimIndex = otherDims[otherDim];\n            if (dimIndex != null && dimIndex !== false) {\n                dataDim[dimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n\n/***/ }),\n\n/***/ 974:\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n/***/ }),\n\n/***/ 975:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var numberUtil = __webpack_require__(972);\n    var textContain = __webpack_require__(983);\n\n    var formatUtil = {};\n\n    /**\n     * 每三位默认加,格式化\n     * @param {string|number} x\n     * @return {string}\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    formatUtil.normalizeCssArray = zrUtil.normalizeCssArray;\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n    /**\n     * simple Template formatter\n     *\n     * @param {string} tpl\n     * @param {Object} param\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTplSimple = function (tpl, param, encode) {\n        zrUtil.each(param, function (value, key) {\n            tpl = tpl.replace(\n                '{' + key + '}',\n                encode ? encodeHTML(value) : value\n            );\n        });\n        return tpl;\n    };\n\n    /**\n     * @param {string} color\n     * @param {string} [extraCssText]\n     * @return {string}\n     */\n    formatUtil.getTooltipMarker = function (color, extraCssText) {\n        return color\n            ? '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:'\n                + formatUtil.encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>'\n            : '';\n    };\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @param {boolean} [isUTC=false] Default in local time.\n     *           see `module:echarts/scale/Time`\n     *           and `module:echarts/util/number#parseDate`.\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value, isUTC) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var utc = isUTC ? 'UTC' : '';\n        var y = date['get' + utc + 'FullYear']();\n        var M = date['get' + utc + 'Month']() + 1;\n        var d = date['get' + utc + 'Date']();\n        var h = date['get' + utc + 'Hours']();\n        var m = date['get' + utc + 'Minutes']();\n        var s = date['get' + utc + 'Seconds']();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .replace('M', M)\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    formatUtil.getTextRect = textContain.getBoundingRect;\n\n    module.exports = formatUtil;\n\n\n\n/***/ }),\n\n/***/ 976:\n/***/ (function(module, exports) {\n\n/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n/***/ }),\n\n/***/ 977:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var clazzUtil = __webpack_require__(982);\n    var env = __webpack_require__(976);\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} [path]\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    // `path` can be null/undefined\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, __webpack_require__(1078));\n    mixin(Model, __webpack_require__(1079));\n    mixin(Model, __webpack_require__(1080));\n    mixin(Model, __webpack_require__(1102));\n\n    module.exports = Model;\n\n\n/***/ }),\n\n/***/ 978:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = __webpack_require__(1007);\n    var zrUtil = __webpack_require__(969);\n    var PathProxy = __webpack_require__(997);\n    var pathContain = __webpack_require__(1085);\n\n    var Pattern = __webpack_require__(1035);\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n/***/ }),\n\n/***/ 979:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Layout helpers for each component positioning\n\n\n    var zrUtil = __webpack_require__(969);\n    var BoundingRect = __webpack_require__(980);\n    var numberUtil = __webpack_require__(972);\n    var formatUtil = __webpack_require__(975);\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    /**\n     * @public\n     */\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    /**\n     * @public\n     */\n    var HV_NAMES = layout.HV_NAMES = [\n        ['width', 'left', 'right'],\n        ['height', 'top', 'bottom']\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                // FIXME compare before adding gap?\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    // FIXME: consider rect.y is not `0`?\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect {width, height}\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        if (aspect != null) {\n            // If width and height are not given\n            // 1. Graph should not exceeds the container\n            // 2. Aspect must be keeped\n            // 3. Graph should take the space as more as possible\n            // FIXME\n            // Margin is not considered, because there is no case that both\n            // using margin and aspect so far.\n            if (isNaN(width) && isNaN(height)) {\n                if (aspect > containerWidth / containerHeight) {\n                    width = containerWidth * 0.8;\n                }\n                else {\n                    height = containerHeight * 0.8;\n                }\n            }\n\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - horizontalMargin - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - verticalMargin - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'\n     * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        // The real width and height can not be specified but calculated by the given el.\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * @param {Object} option Contains some of the properties in HV_NAMES.\n     * @param {number} hvIdx 0: horizontal; 1: vertical.\n     */\n    layout.sizeCalculable = function (option, hvIdx) {\n        return option[HV_NAMES[hvIdx][0]] != null\n            || (option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components\n     *  that width (or height) should not be calculated by left and right (or top and bottom).\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n\n        var ignoreSize = opt.ignoreSize;\n        !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n\n        var hResult = merge(HV_NAMES[0], 0);\n        var vResult = merge(HV_NAMES[1], 1);\n\n        copy(HV_NAMES[0], targetOption, hResult);\n        copy(HV_NAMES[1], targetOption, vResult);\n\n        function merge(names, hvIdx) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            if (ignoreSize[hvIdx]) {\n                // Only one of left/right is premitted to exist.\n                if (hasValue(newOption, names[1])) {\n                    merged[names[2]] = null;\n                }\n                else if (hasValue(newOption, names[2])) {\n                    merged[names[1]] = null;\n                }\n                return merged;\n            }\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n\n/***/ }),\n\n/***/ 980:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = __webpack_require__(974);\n    var matrix = __webpack_require__(984);\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n/***/ }),\n\n/***/ 981:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = __webpack_require__(977);\n    var zrUtil = __webpack_require__(969);\n    var arrayPush = Array.prototype.push;\n    var componentUtil = __webpack_require__(1014);\n    var clazzUtil = __webpack_require__(982);\n    var layout = __webpack_require__(979);\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, __webpack_require__(1103));\n\n    module.exports = ComponentModel;\n\n\n/***/ }),\n\n/***/ 982:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * Notice, parseClassType('') should returns {main: '', sub: ''}\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n/***/ }),\n\n/***/ 983:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var util = __webpack_require__(969);\n    var BoundingRect = __webpack_require__(980);\n    var imageHelper = __webpack_require__(1013);\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n\n    var TEXT_CACHE_MAX = 5000;\n    var STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\n    var DEFAULT_FONT = '12px sans-serif';\n\n    var retrieve2 = util.retrieve2;\n    var retrieve3 = util.retrieve3;\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @return {number} width\n     */\n    function getTextWidth(text, font) {\n        font = font || DEFAULT_FONT;\n        var key = text + ':' + font;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // textContain.measureText may be overrided in SVG or VML\n            width = Math.max(textContain.measureText(textLines[i], font).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @param {string} [textAlign='left']\n     * @param {string} [textVerticalAlign='top']\n     * @param {Array.<number>} [textPadding]\n     * @param {Object} [rich]\n     * @param {Object} [truncate]\n     * @return {Object} {x, y, width, height, lineHeight}\n     */\n    function getTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {\n        return rich\n            ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate)\n            : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate);\n    }\n\n    function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate) {\n        var contentBlock = parsePlainText(text, font, textPadding, truncate);\n        var outerWidth = getTextWidth(text, font);\n        if (textPadding) {\n            outerWidth += textPadding[1] + textPadding[3];\n        }\n        var outerHeight = contentBlock.outerHeight;\n\n        var x = adjustTextX(0, outerWidth, textAlign);\n        var y = adjustTextY(0, outerHeight, textVerticalAlign);\n\n        var rect = new BoundingRect(x, y, outerWidth, outerHeight);\n        rect.lineHeight = contentBlock.lineHeight;\n\n        return rect;\n    }\n\n    function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {\n        var contentBlock = parseRichText(text, {\n            rich: rich,\n            truncate: truncate,\n            font: font,\n            textAlign: textAlign,\n            textPadding: textPadding\n        });\n        var outerWidth = contentBlock.outerWidth;\n        var outerHeight = contentBlock.outerHeight;\n\n        var x = adjustTextX(0, outerWidth, textAlign);\n        var y = adjustTextY(0, outerHeight, textVerticalAlign);\n\n        return new BoundingRect(x, y, outerWidth, outerHeight);\n    }\n\n    /**\n     * @public\n     * @param {number} x\n     * @param {number} width\n     * @param {string} [textAlign='left']\n     * @return {number} Adjusted x.\n     */\n    function adjustTextX(x, width, textAlign) {\n        // FIXME Right to left language\n        if (textAlign === 'right') {\n            x -= width;\n        }\n        else if (textAlign === 'center') {\n            x -= width / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @public\n     * @param {number} y\n     * @param {number} height\n     * @param {string} [textVerticalAlign='top']\n     * @return {number} Adjusted y.\n     */\n    function adjustTextY(y, height, textVerticalAlign) {\n        if (textVerticalAlign === 'middle') {\n            y -= height / 2;\n        }\n        else if (textVerticalAlign === 'bottom') {\n            y -= height;\n        }\n        return y;\n    }\n\n    /**\n     * @public\n     * @param {stirng} textPosition\n     * @param {Object} rect {x, y, width, height}\n     * @param {number} distance\n     * @return {Object} {x, y, textAlign, textVerticalAlign}\n     */\n    function adjustTextPositionOnRect(textPosition, rect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n        var halfHeight = height / 2;\n\n        var textAlign = 'left';\n        var textVerticalAlign = 'top';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                textVerticalAlign = 'middle';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textVerticalAlign = 'middle';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance;\n                textAlign = 'center';\n                textVerticalAlign = 'bottom';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - distance;\n                textAlign = 'center';\n                textVerticalAlign = 'bottom';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance;\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - distance;\n                textVerticalAlign = 'bottom';\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - distance;\n                textAlign = 'right';\n                textVerticalAlign = 'bottom';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @public\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} font\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, font, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        var textLines = (text + '').split('\\n');\n        options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n\n        // FIXME\n        // It is not appropriate that every line has '...' when truncate multiple lines.\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            textLines[i] = truncateSingleLine(textLines[i], options);\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n        options = util.extend({}, options);\n\n        options.font = font;\n        var ellipsis = retrieve2(ellipsis, '...');\n        options.maxIterations = retrieve2(options.maxIterations, 2);\n        var minChar = options.minChar = retrieve2(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        options.cnCharWidth = getTextWidth('国', font);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = options.ascCharWidth = getTextWidth('a', font);\n        options.placeholder = retrieve2(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        options.ellipsis = ellipsis;\n        options.ellipsisWidth = ellipsisWidth;\n        options.contentWidth = contentWidth;\n        options.containerWidth = containerWidth;\n\n        return options;\n    }\n\n    function truncateSingleLine(textLine, options) {\n        var containerWidth = options.containerWidth;\n        var font = options.font;\n        var contentWidth = options.contentWidth;\n\n        if (!containerWidth) {\n            return '';\n        }\n\n        var lineWidth = getTextWidth(textLine, font);\n\n        if (lineWidth <= containerWidth) {\n            return textLine;\n        }\n\n        for (var j = 0;; j++) {\n            if (lineWidth <= contentWidth || j >= options.maxIterations) {\n                textLine += options.ellipsis;\n                break;\n            }\n\n            var subLength = j === 0\n                ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth)\n                : lineWidth > 0\n                ? Math.floor(textLine.length * contentWidth / lineWidth)\n                : 0;\n\n            textLine = textLine.substr(0, subLength);\n            lineWidth = getTextWidth(textLine, font);\n        }\n\n        if (textLine === '') {\n            textLine = options.placeholder;\n        }\n\n        return textLine;\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    /**\n     * @public\n     * @param {string} font\n     * @return {number} line height\n     */\n    function getLineHeight(font) {\n        // FIXME A rough approach.\n        return getTextWidth('国', font);\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @return {Object} width\n     */\n    function measureText(text, font) {\n        var ctx = util.getContext();\n        ctx.font = font || DEFAULT_FONT;\n        return ctx.measureText(text);\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @param {Object} [truncate]\n     * @return {Object} block: {lineHeight, lines, height, outerHeight}\n     *  Notice: for performance, do not calculate outerWidth util needed.\n     */\n    function parsePlainText(text, font, padding, truncate) {\n        text != null && (text += '');\n\n        var lineHeight = getLineHeight(font);\n        var lines = text ? text.split('\\n') : [];\n        var height = lines.length * lineHeight;\n        var outerHeight = height;\n\n        if (padding) {\n            outerHeight += padding[0] + padding[2];\n        }\n\n        if (text && truncate) {\n            var truncOuterHeight = truncate.outerHeight;\n            var truncOuterWidth = truncate.outerWidth;\n            if (truncOuterHeight != null && outerHeight > truncOuterHeight) {\n                text = '';\n                lines = [];\n            }\n            else if (truncOuterWidth != null) {\n                var options = prepareTruncateOptions(\n                    truncOuterWidth - (padding ? padding[1] + padding[3] : 0),\n                    font,\n                    truncate.ellipsis,\n                    {minChar: truncate.minChar, placeholder: truncate.placeholder}\n                );\n\n                // FIXME\n                // It is not appropriate that every line has '...' when truncate multiple lines.\n                for (var i = 0, len = lines.length; i < len; i++) {\n                    lines[i] = truncateSingleLine(lines[i], options);\n                }\n            }\n        }\n\n        return {\n            lines: lines,\n            height: height,\n            outerHeight: outerHeight,\n            lineHeight: lineHeight\n        };\n    }\n\n    /**\n     * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'\n     * Also consider 'bbbb{a|xxx\\nzzz}xxxx\\naaaa'.\n     *\n     * @public\n     * @param {string} text\n     * @param {Object} style\n     * @return {Object} block\n     * {\n     *      width,\n     *      height,\n     *      lines: [{\n     *          lineHeight,\n     *          width,\n     *          tokens: [[{\n     *              styleName,\n     *              text,\n     *              width,      // include textPadding\n     *              height,     // include textPadding\n     *              textWidth, // pure text width\n     *              textHeight, // pure text height\n     *              lineHeihgt,\n     *              font,\n     *              textAlign,\n     *              textVerticalAlign\n     *          }], [...], ...]\n     *      }, ...]\n     * }\n     * If styleName is undefined, it is plain text.\n     */\n    function parseRichText(text, style) {\n        var contentBlock = {lines: [], width: 0, height: 0};\n\n        text != null && (text += '');\n        if (!text) {\n            return contentBlock;\n        }\n\n        var lastIndex = STYLE_REG.lastIndex = 0;\n        var result;\n        while ((result = STYLE_REG.exec(text)) != null)  {\n            var matchedIndex = result.index;\n            if (matchedIndex > lastIndex) {\n                pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));\n            }\n            pushTokens(contentBlock, result[2], result[1]);\n            lastIndex = STYLE_REG.lastIndex;\n        }\n\n        if (lastIndex < text.length) {\n            pushTokens(contentBlock, text.substring(lastIndex, text.length));\n        }\n\n        var lines = contentBlock.lines;\n        var contentHeight = 0;\n        var contentWidth = 0;\n        // For `textWidth: 100%`\n        var pendingList = [];\n\n        var stlPadding = style.textPadding;\n\n        var truncate = style.truncate;\n        var truncateWidth = truncate && truncate.outerWidth;\n        var truncateHeight = truncate && truncate.outerHeight;\n        if (stlPadding) {\n            truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);\n            truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);\n        }\n\n        // Calculate layout info of tokens.\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var lineHeight = 0;\n            var lineWidth = 0;\n\n            for (var j = 0; j < line.tokens.length; j++) {\n                var token = line.tokens[j];\n                var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n                // textPadding should not inherit from style.\n                var textPadding = token.textPadding = tokenStyle.textPadding;\n\n                // textFont has been asigned to font by `normalizeStyle`.\n                var font = token.font = tokenStyle.font || style.font;\n\n                // textHeight can be used when textVerticalAlign is specified in token.\n                var tokenHeight = token.textHeight = retrieve2(\n                    // textHeight should not be inherited, consider it can be specified\n                    // as box height of the block.\n                    tokenStyle.textHeight, textContain.getLineHeight(font)\n                );\n                textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n                token.height = tokenHeight;\n                token.lineHeight = retrieve3(\n                    tokenStyle.textLineHeight, style.textLineHeight, tokenHeight\n                );\n\n                token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;\n                token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';\n\n                if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {\n                    return {lines: [], width: 0, height: 0};\n                }\n\n                token.textWidth = textContain.getWidth(token.text, font);\n                var tokenWidth = tokenStyle.textWidth;\n                var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto';\n\n                // Percent width, can be `100%`, can be used in drawing separate\n                // line when box width is needed to be auto.\n                if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {\n                    token.percentWidth = tokenWidth;\n                    pendingList.push(token);\n                    tokenWidth = 0;\n                    // Do not truncate in this case, because there is no user case\n                    // and it is too complicated.\n                }\n                else {\n                    if (tokenWidthNotSpecified) {\n                        tokenWidth = token.textWidth;\n\n                        // FIXME: If image is not loaded and textWidth is not specified, calling\n                        // `getBoundingRect()` will not get correct result.\n                        var textBackgroundColor = tokenStyle.textBackgroundColor;\n                        var bgImg = textBackgroundColor && textBackgroundColor.image;\n\n                        // Use cases:\n                        // (1) If image is not loaded, it will be loaded at render phase and call\n                        // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded\n                        // image, and then the right size will be calculated here at the next tick.\n                        // See `graphic/helper/text.js`.\n                        // (2) If image loaded, and `textBackgroundColor.image` is image src string,\n                        // use `imageHelper.findExistImage` to find cached image.\n                        // `imageHelper.findExistImage` will always be called here before\n                        // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`\n                        // which ensures that image will not be rendered before correct size calcualted.\n                        if (bgImg) {\n                            bgImg = imageHelper.findExistImage(bgImg);\n                            if (imageHelper.isImageReady(bgImg)) {\n                                tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);\n                            }\n                        }\n                    }\n\n                    var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;\n                    tokenWidth += paddingW;\n\n                    var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;\n\n                    if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {\n                        if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {\n                            token.text = '';\n                            token.textWidth = tokenWidth = 0;\n                        }\n                        else {\n                            token.text = truncateText(\n                                token.text, remianTruncWidth - paddingW, font, truncate.ellipsis,\n                                {minChar: truncate.minChar}\n                            );\n                            token.textWidth = textContain.getWidth(token.text, font);\n                            tokenWidth = token.textWidth + paddingW;\n                        }\n                    }\n                }\n\n                lineWidth += (token.width = tokenWidth);\n                tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n            }\n\n            line.width = lineWidth;\n            line.lineHeight = lineHeight;\n            contentHeight += lineHeight;\n            contentWidth = Math.max(contentWidth, lineWidth);\n        }\n\n        contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);\n        contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);\n\n        if (stlPadding) {\n            contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n            contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n        }\n\n        for (var i = 0; i < pendingList.length; i++) {\n            var token = pendingList[i];\n            var percentWidth = token.percentWidth;\n            // Should not base on outerWidth, because token can not be placed out of padding.\n            token.width = parseInt(percentWidth, 10) / 100 * contentWidth;\n        }\n\n        return contentBlock;\n    }\n\n    function pushTokens(block, str, styleName) {\n        var isEmptyStr = str === '';\n        var strs = str.split('\\n');\n        var lines = block.lines;\n\n        for (var i = 0; i < strs.length; i++) {\n            var text = strs[i];\n            var token = {\n                styleName: styleName,\n                text: text,\n                isLineHolder: !text && !isEmptyStr\n            };\n\n            // The first token should be appended to the last line.\n            if (!i) {\n                var tokens = (lines[lines.length - 1] || (lines[0] = {tokens: []})).tokens;\n\n                // Consider cases:\n                // (1) ''.split('\\n') => ['', '\\n', ''], the '' at the first item\n                // (which is a placeholder) should be replaced by new token.\n                // (2) A image backage, where token likes {a|}.\n                // (3) A redundant '' will affect textAlign in line.\n                // (4) tokens with the same tplName should not be merged, because\n                // they should be displayed in different box (with border and padding).\n                var tokensLen = tokens.length;\n                (tokensLen === 1 && tokens[0].isLineHolder)\n                    ? (tokens[0] = token)\n                    // Consider text is '', only insert when it is the \"lineHolder\" or\n                    // \"emptyStr\". Otherwise a redundant '' will affect textAlign in line.\n                    : ((text || !tokensLen || isEmptyStr) && tokens.push(token));\n            }\n            // Other tokens always start a new line.\n            else {\n                // If there is '', insert it as a placeholder.\n                lines.push({tokens: [token]});\n            }\n        }\n    }\n\n    function makeFont(style) {\n        // FIXME in node-canvas fontWeight is before fontStyle\n        // Use `fontSize` `fontFamily` to check whether font properties are defined.\n        return (style.fontSize || style.fontFamily) && [\n            style.fontStyle,\n            style.fontWeight,\n            (style.fontSize || 12) + 'px',\n            // If font properties are defined, `fontFamily` should not be ignored.\n            style.fontFamily || 'sans-serif'\n        ].join(' ') || style.textFont || style.font;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: measureText,\n\n        getLineHeight: getLineHeight,\n\n        parsePlainText: parsePlainText,\n\n        parseRichText: parseRichText,\n\n        adjustTextX: adjustTextX,\n\n        adjustTextY: adjustTextY,\n\n        makeFont: makeFont,\n\n        DEFAULT_FONT: DEFAULT_FONT\n    };\n\n    module.exports = textContain;\n\n\n/***/ }),\n\n/***/ 984:\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n/***/ }),\n\n/***/ 985:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = __webpack_require__(977);\n    var DataDiffer = __webpack_require__(1001);\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    function transferProperties(a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    }\n\n    function DefaultDataProvider(dataArray) {\n        this._array = dataArray || [];\n    }\n\n    DefaultDataProvider.prototype.pure = false;\n\n    DefaultDataProvider.prototype.count = function () {\n        return this._array.length;\n    };\n    DefaultDataProvider.prototype.getItem = function (idx) {\n        return this._array[idx];\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string|Object>} dimensions\n     *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n     *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    coordDim: dimensionName,\n                    coordDimIndex: 0,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n                if (!dimensionInfo.coordDim) {\n                    dimensionInfo.coordDim = dimensionName;\n                    dimensionInfo.coordDimIndex = 0;\n                }\n            }\n            dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        var isDataArray = zrUtil.isArray(data);\n        if (isDataArray) {\n            data = new DefaultDataProvider(data);\n        }\n        if (__DEV__) {\n            if (!isDataArray && (typeof data.getItem != 'function' || typeof data.count != 'function')) {\n                throw new Error('Inavlid data provider.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var size = data.count();\n\n        var idList = [];\n        var nameRepeatCount = {};\n        var nameDimIdx;\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            dimInfo.otherDims.itemName === 0 && (nameDimIdx = i);\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var i = 0; i < size; i++) {\n            // NOTICE: Try not to write things into dataItem\n            var dataItem = data.getItem(i);\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[i] = dimValueGetter(dataItem, dim, i, k);\n            }\n\n            indices.push(i);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < size; i++) {\n            var dataItem = data.getItem(i);\n            if (!nameList[i] && dataItem) {\n                if (dataItem.name != null) {\n                    nameList[i] = dataItem.name;\n                }\n                else if (nameDimIdx != null) {\n                    nameList[i] = storage[dimensions[nameDimIdx]][i];\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = dataItem && dataItem.id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null || !storage[dim]) {\n            return NaN;\n        }\n\n        var value = storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {Array.<number>} Considere multiple points has the same value.\n     */\n    listProto.indicesOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var nearestIndices = [];\n\n        if (!dimData) {\n            return nearestIndices;\n        }\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n        for (var i = 0, len = this.count(); i < len; i++) {\n            var diff = value - this.get(dim, i, stack);\n            var dist = Math.abs(diff);\n            if (diff <= maxDistance && dist <= minDist) {\n                // For the case of two data are same on xAxis, which has sequence data.\n                // Show the nearest index\n                // https://github.com/ecomfe/echarts/issues/2869\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    nearestIndices.length = 0;\n                }\n                nearestIndices.push(i);\n            }\n        }\n        return nearestIndices;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData.getItem(this.getRawIndex(idx));\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (!dimSize) {\n                keep = cb.call(context, i);\n            }\n            else if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData.getItem(idx), hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string|Object} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} [ignoreParent=false]\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)))\n\n/***/ }),\n\n/***/ 986:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var OrdinalScale = __webpack_require__(1119);\n    var IntervalScale = __webpack_require__(1010);\n    __webpack_require__(1120);\n    __webpack_require__(1121);\n    var Scale = __webpack_require__(1002);\n\n    var numberUtil = __webpack_require__(972);\n    var zrUtil = __webpack_require__(969);\n    var textContain = __webpack_require__(983);\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (scale, model) {\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            if (typeof boundaryGap[0] === 'boolean') {\n                if (__DEV__) {\n                    console.warn('Boolean type for boundaryGap is only '\n                        + 'allowed for ordinal axis. Please use string in '\n                        + 'percentage instead, e.g., \"20%\". Currently, '\n                        + 'boundaryGap is set to be 0.');\n                }\n                boundaryGap = [0, 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = (originalExtent[1] - originalExtent[0])\n                || Math.abs(originalExtent[0]);\n        }\n\n        // Notice: When min/max is not set (that is, when there are null/undefined,\n        // which is the most common case), these cases should be ensured:\n        // (1) For 'ordinal', show all axis.data.\n        // (2) For others:\n        //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n        //      disabled).\n        //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n        //      be the result that originalExtent enlarged by boundaryGap.\n        // (3) If no data, it should be ensured that `scale.setBlank` is set.\n\n        // FIXME\n        // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?\n        // (2) When `needCrossZero` and all data is positive/negative, should it be ensured\n        // that the results processed by boundaryGap are positive/negative?\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        else if (typeof min === 'function') {\n            min = min({\n                min: originalExtent[0],\n                max: originalExtent[1]\n            });\n        }\n\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n        else if (typeof max === 'function') {\n            max = max({\n                min: originalExtent[0],\n                max: originalExtent[1]\n            });\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (scale, model) {\n        var extent = axisHelper.getScaleExtent(scale, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        var scaleType = scale.type;\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent({\n            splitNumber: splitNumber,\n            fixMin: fixMin,\n            fixMax: fixMax,\n            minInterval: (scaleType === 'interval' || scaleType === 'time')\n                ? model.get('minInterval') : null,\n            maxInterval: (scaleType === 'interval' || scaleType === 'time')\n                ? model.get('maxInterval') : null\n        });\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axisHelper.getAxisRawValue(axis, tick),\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    axisHelper.getAxisRawValue = function (axis, value) {\n        // In category axis with data zoom, tick is not the original\n        // index of axis.data. So tick should not be exposed to user\n        // in category axis.\n        return axis.type === 'category' ? axis.scale.getLabel(value) : value;\n    };\n\n    module.exports = axisHelper;\n\n\n/***/ }),\n\n/***/ 987:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var features = {};\n\n    module.exports = {\n        register: function (name, ctor) {\n            features[name] = ctor;\n        },\n\n        get: function (name) {\n            return features[name];\n        }\n    };\n\n\n/***/ }),\n\n/***/ 988:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = __webpack_require__(990);\n    var env = __webpack_require__(976);\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;\n        // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js\n        // If e.which has been defined, if may be readonly,\n        // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\n        var button = e.button;\n        if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {\n            e.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    function notLeftMouse(e) {\n        // If e.which is undefined, considered as left mouse event.\n        return e.which > 1;\n    }\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n        notLeftMouse: notLeftMouse,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n/***/ }),\n\n/***/ 989:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(974);\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n/***/ }),\n\n/***/ 990:\n/***/ (function(module, exports) {\n\n/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n/***/ }),\n\n/***/ 991:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = __webpack_require__(1028);\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerpNumber(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than lerp methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastLerp(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function lerp(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastLerp: fastLerp,\n        fastMapToColor: fastLerp, // Deprecated\n        lerp: lerp,\n        mapToColor: lerp, // Deprecated\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n/***/ }),\n\n/***/ 992:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n    var formatUtil = __webpack_require__(975);\n    var classUtil = __webpack_require__(982);\n    var modelUtil = __webpack_require__(973);\n    var ComponentModel = __webpack_require__(981);\n    var colorPaletteMixin = __webpack_require__(1037);\n    var env = __webpack_require__(976);\n    var layout = __webpack_require__(979);\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            var data = this.getInitialData(option, ecModel);\n            if (__DEV__) {\n                zrUtil.assert(data, 'getInitialData returned invalid data.');\n            }\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', data);\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            // Backward compat: using subType on theme.\n            // But if name duplicate between series subType\n            // (for example: parallel) add component mainType,\n            // add suffix 'Series'.\n            var themeSubType = this.subType;\n            if (ComponentModel.hasClass(themeSubType)) {\n                themeSubType += 'Series';\n            }\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `show`\n            modelUtil.defaultEmphasis(option.label, ['show']);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                var props = ['show'];\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, props);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n                    var dimItem = data.getDimensionInfo(idx);\n                    return vertially |= dimItem && dimItem.tooltip !== false && dimItem.tooltipName != null;\n                }, 0);\n\n                var result = [];\n                var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n\n                tooltipDims.length\n                    ? zrUtil.each(tooltipDims, function (dimIdx) {\n                        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n                    })\n                    // By default, all dims is used on tooltip.\n                    : zrUtil.each(value, setEachItem);\n\n                function setEachItem(val, dimIdx) {\n                    var dimInfo = data.getDimensionInfo(dimIdx);\n                    // If `dimInfo.tooltip` is not set, show tooltip.\n                    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n                        return;\n                    }\n                    var dimType = dimInfo.type;\n                    var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '')\n                        + (dimType === 'ordinal'\n                            ? val + ''\n                            : dimType === 'time'\n                            ? (multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val))\n                            : addCommas(val)\n                        );\n                    valStr && result.push(encodeHTML(valStr));\n                }\n\n                return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = zrUtil.isArray(value)\n                ? formatArrayValue(value) : encodeHTML(addCommas(value));\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = formatUtil.getTooltipMarker(color);\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            seriesName = seriesName\n                ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ')\n                : '';\n            return !multipleSeries\n                ? seriesName + colorEl\n                    + (name\n                        ? encodeHTML(name) + ': ' + formattedValue\n                        : formattedValue\n                    )\n                : colorEl + seriesName + formattedValue;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Object} {dataIndices, nestestValue}.\n         */\n        getAxisTooltipData: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n/***/ }),\n\n/***/ 993:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var modelUtil = __webpack_require__(973);\n    var each = zrUtil.each;\n    var isString = zrUtil.isString;\n    var defaults = zrUtil.defaults;\n    var normalizeToArray = modelUtil.normalizeToArray;\n\n    var OTHER_DIMS = {tooltip: 1, label: 1, itemName: 1};\n\n    /**\n     * Complete the dimensions array, by user defined `dimension` and `encode`,\n     * and guessing from the data structure.\n     * If no 'value' dimension specified, the first no-named dimension will be\n     * named as 'value'.\n     *\n     * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n     *      provides not only dim template, but also default order.\n     *      `name` of each item provides default coord name.\n     *      [{dimsDef: []}, ...] can be specified to give names.\n     * @param {Array} data Data list. [[1, 2, 3], [2, 3, 4]].\n     * @param {Object} [opt]\n     * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n     *      For example: ['asdf', {name, type}, ...].\n     * @param {Object} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n     * @param {string} [opt.extraPrefix] Prefix of name when filling the left dimensions.\n     * @param {string} [opt.extraFromZero] If specified, extra dim names will be:\n     *                      extraPrefix + 0, extraPrefix + extraBaseIndex + 1 ...\n     *                      If not specified, extra dim names will be:\n     *                      extraPrefix, extraPrefix + 0, extraPrefix + 1 ...\n     * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n     * @return {Array.<Object>} [{\n     *      name: string mandatory,\n     *      coordDim: string mandatory,\n     *      coordDimIndex: number mandatory,\n     *      type: string optional,\n     *      tooltipName: string optional,\n     *      otherDims: {\n     *          tooltip: number optional,\n     *          label: number optional\n     *      },\n     *      isExtraCoord: boolean true or undefined.\n     *      other props ...\n     * }]\n     */\n    function completeDimensions(sysDims, data, opt) {\n        data = data || [];\n        opt = opt || {};\n        sysDims = (sysDims || []).slice();\n        var dimsDef = (opt.dimsDef || []).slice();\n        var encodeDef = zrUtil.createHashMap(opt.encodeDef);\n        var dataDimNameMap = zrUtil.createHashMap();\n        var coordDimNameMap = zrUtil.createHashMap();\n        // var valueCandidate;\n        var result = [];\n\n        var dimCount = opt.dimCount;\n        if (dimCount == null) {\n            var value0 = retrieveValue(data[0]);\n            dimCount = Math.max(\n                zrUtil.isArray(value0) && value0.length || 1,\n                sysDims.length,\n                dimsDef.length\n            );\n            each(sysDims, function (sysDimItem) {\n                var sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n            });\n        }\n\n        // Apply user defined dims (`name` and `type`) and init result.\n        for (var i = 0; i < dimCount; i++) {\n            var dimDefItem = isString(dimsDef[i]) ? {name: dimsDef[i]} : (dimsDef[i] || {});\n            var userDimName = dimDefItem.name;\n            var resultItem = result[i] = {otherDims: {}};\n            // Name will be applied later for avoiding duplication.\n            if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n                // Only if `series.dimensions` is defined in option, tooltipName\n                // will be set, and dimension will be diplayed vertically in\n                // tooltip by default.\n                resultItem.name = resultItem.tooltipName = userDimName;\n                dataDimNameMap.set(userDimName, i);\n            }\n            dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n        }\n\n        // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n        encodeDef.each(function (dataDims, coordDim) {\n            dataDims = encodeDef.set(coordDim, normalizeToArray(dataDims).slice());\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                // The input resultDimIdx can be dim name or index.\n                isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n                if (resultDimIdx != null && resultDimIdx < dimCount) {\n                    dataDims[coordDimIndex] = resultDimIdx;\n                    applyDim(result[resultDimIdx], coordDim, coordDimIndex);\n                }\n            });\n        });\n\n        // Apply templetes and default order from `sysDims`.\n        var availDimIdx = 0;\n        each(sysDims, function (sysDimItem, sysDimIndex) {\n            var coordDim;\n            var sysDimItem;\n            var sysDimItemDimsDef;\n            var sysDimItemOtherDims;\n            if (isString(sysDimItem)) {\n                coordDim = sysDimItem;\n                sysDimItem = {};\n            }\n            else {\n                coordDim = sysDimItem.name;\n                sysDimItem = zrUtil.clone(sysDimItem);\n                // `coordDimIndex` should not be set directly.\n                sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemOtherDims = sysDimItem.otherDims;\n                sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex\n                    = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n            }\n\n            var dataDims = normalizeToArray(encodeDef.get(coordDim));\n            // dimensions provides default dim sequences.\n            if (!dataDims.length) {\n                for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n                    while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n                        availDimIdx++;\n                    }\n                    availDimIdx < result.length && dataDims.push(availDimIdx++);\n                }\n            }\n            // Apply templates.\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                var resultItem = result[resultDimIdx];\n                applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n                if (resultItem.name == null && sysDimItemDimsDef) {\n                    resultItem.name = resultItem.tooltipName = sysDimItemDimsDef[coordDimIndex];\n                }\n                sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n            });\n        });\n\n        // Make sure the first extra dim is 'value'.\n        var extra = opt.extraPrefix || 'value';\n\n        // Set dim `name` and other `coordDim` and other props.\n        for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n            var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n            var coordDim = resultItem.coordDim;\n\n            coordDim == null && (\n                resultItem.coordDim = genName(extra, coordDimNameMap, opt.extraFromZero),\n                resultItem.coordDimIndex = 0,\n                resultItem.isExtraCoord = true\n            );\n\n            resultItem.name == null && (resultItem.name = genName(\n                resultItem.coordDim,\n                dataDimNameMap\n            ));\n\n            resultItem.type == null && guessOrdinal(data, resultDimIdx)\n                && (resultItem.type = 'ordinal');\n        }\n\n        return result;\n\n        function applyDim(resultItem, coordDim, coordDimIndex) {\n            if (OTHER_DIMS[coordDim]) {\n                resultItem.otherDims[coordDim] = coordDimIndex;\n            }\n            else {\n                resultItem.coordDim = coordDim;\n                resultItem.coordDimIndex = coordDimIndex;\n                coordDimNameMap.set(coordDim, true);\n            }\n        }\n\n        function genName(name, map, fromZero) {\n            if (fromZero || map.get(name) != null) {\n                var i = 0;\n                while (map.get(name + i) != null) {\n                    i++;\n                }\n                name += i;\n            }\n            map.set(name, true);\n            return name;\n        }\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            // Consider usage convenience, '1', '2' will be treated as \"number\".\n            // `isFinit('')` get `true`.\n            if (value != null && isFinite(value) && value !== '') {\n                return false;\n            }\n            else if (isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n/***/ }),\n\n/***/ 994:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Symbol factory\n\n\n    var graphic = __webpack_require__(971);\n    var BoundingRect = __webpack_require__(980);\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            // TODO Support image object, DynamicImage.\n\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n/***/ }),\n\n/***/ 995:\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        toolbox: {\n            brush: {\n                title: {\n                    rect: '矩形选择',\n                    polygon: '圈选',\n                    lineX: '横向选择',\n                    lineY: '纵向选择',\n                    keep: '保持选择',\n                    clear: '清除选择'\n                }\n            },\n            dataView: {\n                title: '数据视图',\n                lang: ['数据视图', '关闭', '刷新']\n            },\n            dataZoom: {\n                title: {\n                    zoom: '区域缩放',\n                    back: '区域缩放还原'\n                }\n            },\n            magicType: {\n                title: {\n                    line: '切换为折线图',\n                    bar: '切换为柱状图',\n                    stack: '切换为堆叠',\n                    tiled: '切换为平铺'\n                }\n            },\n            restore: {\n                title: '还原'\n            },\n            saveAsImage: {\n                title: '保存为图片',\n                lang: ['右键另存为图片']\n            }\n        }\n    };\n\n\n\n/***/ }),\n\n/***/ 996:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(969);\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n/***/ }),\n\n/***/ 997:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = __webpack_require__(989);\n    var vec2 = __webpack_require__(974);\n    var bbox = __webpack_require__(1046);\n    var BoundingRect = __webpack_require__(980);\n    var dpr = __webpack_require__(998).devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n/***/ }),\n\n/***/ 998:\n/***/ (function(module, exports) {\n\n\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n/***/ }),\n\n/***/ 999:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = __webpack_require__(969);\n    var Element = __webpack_require__(1030);\n    var BoundingRect = __webpack_require__(980);\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/LineReact.04a0f4e8.chunk.js","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var zrUtil = require('zrender/lib/core/util');\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/view/Chart.js\n// module id = 1000\n// module chunks = 0 1 2","'use strict';\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    /**\n     * @param {Array} oldArr\n     * @param {Array} newArr\n     * @param {Function} oldKeyGetter\n     * @param {Function} newKeyGetter\n     * @param {Object} [context] Can be visited by this.context in callback.\n     */\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n\n        this.context = context;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\n        for (var i = 0; i < arr.length; i++) {\n            // Add prefix to avoid conflict with Object.prototype.\n            var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/data/DataDiffer.js\n// module id = 1001\n// module chunks = 0 1 2","/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = require('../util/clazz');\n\n    /**\n     * @param {Object} [setting]\n     */\n    function Scale(setting) {\n        this._setting = setting || {};\n\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.getSetting = function (name) {\n        return this._setting[name];\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.isBlank = function () {\n        return this._isBlank;\n    },\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.setBlank = function (isBlank) {\n        this._isBlank = isBlank;\n    };\n\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/Scale.js\n// module id = 1002\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Model = require('../../model/Model');\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n\n    var helper = {};\n\n    // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n    // allAxesInfo should be updated when setOption performed.\n    helper.collect = function (ecModel, api) {\n        var result = {\n            /**\n             * key: makeKey(axis.model)\n             * value: {\n             *      axis,\n             *      coordSys,\n             *      axisPointerModel,\n             *      triggerTooltip,\n             *      involveSeries,\n             *      snap,\n             *      seriesModels,\n             *      seriesDataCount\n             * }\n             */\n            axesInfo: {},\n            seriesInvolved: false,\n            /**\n             * key: makeKey(coordSys.model)\n             * value: Object: key makeKey(axis.model), value: axisInfo\n             */\n            coordSysAxesInfo: {},\n            coordSysMap: {}\n        };\n\n        collectAxesInfo(result, ecModel, api);\n\n        // Check seriesInvolved for performance, in case too many series in some chart.\n        result.seriesInvolved && collectSeriesInfo(result, ecModel);\n\n        return result;\n    };\n\n    function collectAxesInfo(result, ecModel, api) {\n        var globalTooltipModel = ecModel.getComponent('tooltip');\n        var globalAxisPointerModel = ecModel.getComponent('axisPointer');\n        // links can only be set on global.\n        var linksOption = globalAxisPointerModel.get('link', true) || [];\n        var linkGroups = [];\n\n        // Collect axes info.\n        each(api.getCoordinateSystems(), function (coordSys) {\n            // Some coordinate system do not support axes, like geo.\n            if (!coordSys.axisPointerEnabled) {\n                return;\n            }\n\n            var coordSysKey = makeKey(coordSys.model);\n            var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n            result.coordSysMap[coordSysKey] = coordSys;\n\n            // Set tooltip (like 'cross') is a convienent way to show axisPointer\n            // for user. So we enable seting tooltip on coordSys model.\n            var coordSysModel = coordSys.model;\n            var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n\n            each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null));\n\n            // If axis tooltip used, choose tooltip axis for each coordSys.\n            // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n            if (coordSys.getTooltipAxes\n                && globalTooltipModel\n                // If tooltip.showContent is set as false, tooltip will not\n                // show but axisPointer will show as normal.\n                && baseTooltipModel.get('show')\n            ) {\n                // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n                // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n                var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n                var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n                var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n                if (triggerAxis || cross) {\n                    each(tooltipAxes.baseAxes, curry(\n                        saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis\n                    ));\n                }\n                if (cross) {\n                    each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n                }\n            }\n\n            // fromTooltip: true | false | 'cross'\n            // triggerTooltip: true | false | null\n            function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n                var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n\n                var axisPointerShow = axisPointerModel.get('show');\n                if (!axisPointerShow || (\n                    axisPointerShow === 'auto'\n                    && !fromTooltip\n                    && !isHandleTrigger(axisPointerModel)\n                )) {\n                    return;\n                }\n\n                if (triggerTooltip == null) {\n                    triggerTooltip = axisPointerModel.get('triggerTooltip');\n                }\n\n                axisPointerModel = fromTooltip\n                    ? makeAxisPointerModel(\n                        axis, baseTooltipModel, globalAxisPointerModel, ecModel,\n                        fromTooltip, triggerTooltip\n                    )\n                    : axisPointerModel;\n\n                var snap = axisPointerModel.get('snap');\n                var key = makeKey(axis.model);\n                var involveSeries = triggerTooltip || snap || axis.type === 'category';\n\n                // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n                var axisInfo = result.axesInfo[key] = {\n                    key: key,\n                    axis: axis,\n                    coordSys: coordSys,\n                    axisPointerModel: axisPointerModel,\n                    triggerTooltip: triggerTooltip,\n                    involveSeries: involveSeries,\n                    snap: snap,\n                    useHandle: isHandleTrigger(axisPointerModel),\n                    seriesModels: []\n                };\n                axesInfoInCoordSys[key] = axisInfo;\n                result.seriesInvolved |= involveSeries;\n\n                var groupIndex = getLinkGroupIndex(linksOption, axis);\n                if (groupIndex != null) {\n                    var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {axesInfo: {}});\n                    linkGroup.axesInfo[key] = axisInfo;\n                    linkGroup.mapper = linksOption[groupIndex].mapper;\n                    axisInfo.linkGroup = linkGroup;\n                }\n            }\n        });\n    }\n\n    function makeAxisPointerModel(\n        axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip\n    ) {\n        var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n        var volatileOption = {};\n\n        each(\n            [\n                'type', 'snap', 'lineStyle', 'shadowStyle', 'label',\n                'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'\n            ],\n            function (field) {\n                volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n            }\n        );\n\n        // category axis do not auto snap, otherwise some tick that do not\n        // has value can not be hovered. value/time/log axis default snap if\n        // triggered from tooltip and trigger tooltip.\n        volatileOption.snap = axis.type !== 'category' && !!triggerTooltip;\n\n        // Compatibel with previous behavior, tooltip axis do not show label by default.\n        // Only these properties can be overrided from tooltip to axisPointer.\n        if (tooltipAxisPointerModel.get('type') === 'cross') {\n            volatileOption.type = 'line';\n        }\n        var labelOption = volatileOption.label || (volatileOption.label = {});\n        // Follow the convention, do not show label when triggered by tooltip by default.\n        labelOption.show == null && (labelOption.show = false);\n\n        if (fromTooltip === 'cross') {\n            // When 'cross', both axes show labels.\n            labelOption.show = true;\n            // If triggerTooltip, this is a base axis, which should better not use cross style\n            // (cross style is dashed by default)\n            if (!triggerTooltip) {\n                var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n                crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n            }\n        }\n\n        return axis.model.getModel(\n            'axisPointer',\n            new Model(volatileOption, globalAxisPointerModel, ecModel)\n        );\n    }\n\n    function collectSeriesInfo(result, ecModel) {\n        // Prepare data for axis trigger\n        ecModel.eachSeries(function (seriesModel) {\n\n            // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n            var coordSys = seriesModel.coordinateSystem;\n            var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n            var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n            if (!coordSys\n                || seriesTooltipTrigger === 'none'\n                || seriesTooltipTrigger === false\n                || seriesTooltipTrigger === 'item'\n                || seriesTooltipShow === false\n                || seriesModel.get('axisPointer.show', true) === false\n            ) {\n                return;\n            }\n\n            each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n                var axis = axisInfo.axis;\n                if (coordSys.getAxis(axis.dim) === axis) {\n                    axisInfo.seriesModels.push(seriesModel);\n                    axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n                    axisInfo.seriesDataCount += seriesModel.getData().count();\n                }\n            });\n\n        }, this);\n    }\n\n    /**\n     * For example:\n     * {\n     *     axisPointer: {\n     *         links: [{\n     *             xAxisIndex: [2, 4],\n     *             yAxisIndex: 'all'\n     *         }, {\n     *             xAxisId: ['a5', 'a7'],\n     *             xAxisName: 'xxx'\n     *         }]\n     *     }\n     * }\n     */\n    function getLinkGroupIndex(linksOption, axis) {\n        var axisModel = axis.model;\n        var dim = axis.dim;\n        for (var i = 0; i < linksOption.length; i++) {\n            var linkOption = linksOption[i] || {};\n            if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id)\n                || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex)\n                || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)\n            ) {\n                return i;\n            }\n        }\n    }\n\n    function checkPropInLink(linkPropValue, axisPropValue) {\n        return linkPropValue === 'all'\n            || (zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0)\n            || linkPropValue === axisPropValue;\n    }\n\n    helper.fixValue = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        if (!axisInfo) {\n            return;\n        }\n\n        var axisPointerModel = axisInfo.axisPointerModel;\n        var scale = axisInfo.axis.scale;\n        var option = axisPointerModel.option;\n        var status = axisPointerModel.get('status');\n        var value = axisPointerModel.get('value');\n\n        // Parse init value for category and time axis.\n        if (value != null) {\n            value = scale.parse(value);\n        }\n\n        var useHandle = isHandleTrigger(axisPointerModel);\n        // If `handle` used, `axisPointer` will always be displayed, so value\n        // and status should be initialized.\n        if (status == null) {\n            option.status = useHandle ? 'show' : 'hide';\n        }\n\n        var extent = scale.getExtent().slice();\n        extent[0] > extent[1] && extent.reverse();\n\n        if (// Pick a value on axis when initializing.\n            value == null\n            // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n            // where we should re-pick a value to keep `handle` displaying normally.\n            || value > extent[1]\n        ) {\n            // Make handle displayed on the end of the axis when init, which looks better.\n            value = extent[1];\n        }\n        if (value < extent[0]) {\n            value = extent[0];\n        }\n\n        option.value = value;\n\n        if (useHandle) {\n            option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n        }\n    };\n\n    helper.getAxisInfo = function (axisModel) {\n        var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n        return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n    };\n\n    helper.getAxisPointerModel = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        return axisInfo && axisInfo.axisPointerModel;\n    };\n\n    function isHandleTrigger(axisPointerModel) {\n        return !!axisPointerModel.get('handle.show');\n    }\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @return {string} unique key\n     */\n    var makeKey = helper.makeKey = function (model) {\n        return model.type + '||' + model.id;\n    };\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/modelHelper.js\n// module id = 1003\n// module chunks = 0 1 2","// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes, includes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if ((excludes && zrUtil.indexOf(excludes, propName) >= 0)\n                    || (includes && zrUtil.indexOf(includes, propName) < 0)\n                ) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/makeStyleMapper.js\n// module id = 1004\n// module chunks = 0 1 2","\n\n    var numberUtil = require('../util/number');\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('./axisHelper');\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._labelInterval;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            return this._extent.slice();\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n\n        /**\n         * Convert pixel point to data in axis\n         * @param {Array.<number>} point\n         * @param  {boolean} clamp\n         * @return {number} data\n         */\n        pointToData: function (point, clamp) {\n            // Should be implemented in derived class if necessary.\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * Get interval of the axis label.\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                var axisModel = this.model;\n                var labelModel = axisModel.getModel('axisLabel');\n                var interval = labelModel.get('interval');\n                if (!(this.type === 'category' && interval === 'auto')) {\n                    labelInterval = interval === 'auto' ? 0 : interval;\n                }\n                else if (this.isHorizontal){\n                    labelInterval = axisHelper.getAxisLabelInterval(\n                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n                        axisModel.getFormattedLabels(),\n                        labelModel.getFont(),\n                        this.isHorizontal()\n                    );\n                }\n                this._labelInterval = labelInterval;\n            }\n            return labelInterval;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/Axis.js\n// module id = 1005\n// module chunks = 0 1 2","'use strict';\n\n\n    var List = require('../../data/List');\n    var completeDimensions = require('../../data/helper/completeDimensions');\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var CoordinateSystem = require('../../CoordinateSystem');\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        var completeDimOpt = {\n            encodeDef: seriesModel.get('encode'),\n            dimsDef: seriesModel.get('dimensions')\n        };\n\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel, completeDimOpt);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && (\n                registeredCoordSys.getDimensionsInfo\n                    ? registeredCoordSys.getDimensionsInfo()\n                    : registeredCoordSys.dimensions.slice()\n            )) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n        }\n\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel, completeDimOpt) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel, completeDimOpt) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, completeDimOpt)\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/helper/createListFromArray.js\n// module id = 1006\n// module chunks = 0 1 2","/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = require('../core/util');\n\n    var Style = require('./Style');\n\n    var Element = require('../Element');\n    var RectText = require('./mixin/RectText');\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style, this);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj, this);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Displayable.js\n// module id = 1007\n// module chunks = 0 1 2","\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n\n    };\n\n    module.exports = Gradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Gradient.js\n// module id = 1008\n// module chunks = 0 1 2","\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n        var debounceNextCall;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            var thisDelay = debounceNextCall || delay;\n            var thisDebounce = debounceNextCall || debounce;\n            debounceNextCall = null;\n            diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;\n\n            clearTimeout(timer);\n\n            if (thisDebounce) {\n                timer = setTimeout(exec, thisDelay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        /**\n         * Enable debounce once.\n         */\n        cb.debounceNextCall = function (debounceDelay) {\n            debounceNextCall = debounceDelay;\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/throttle.js\n// module id = 1009\n// module chunks = 0 1 2","/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n    var Scale = require('./Scale');\n    var helper = require('./helper');\n\n    var roundNumber = numberUtil.round;\n\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        _intervalPrecision: 2,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n\n            this._intervalPrecision = helper.getIntervalPrecision(interval);\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            return helper.intervalScaleGetTicks(\n                this._interval, this._extent, this._niceExtent, this._intervalPrecision\n            );\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} data\n         * @param {Object} [opt]\n         * @param {number|string} [opt.precision] If 'auto', use nice presision.\n         * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n         * @return {string}\n         */\n        getLabel: function (data, opt) {\n            if (data == null) {\n                return '';\n            }\n\n            var precision = opt && opt.precision;\n\n            if (precision == null) {\n                precision = numberUtil.getPrecisionSafe(data) || 0;\n            }\n            else if (precision === 'auto') {\n                // Should be more precise then tick.\n                precision = this._intervalPrecision;\n            }\n\n            // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n            // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n            data = roundNumber(data, precision, true);\n\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         * @param {number} [minInterval]\n         * @param {number} [maxInterval]\n         */\n        niceTicks: function (splitNumber, minInterval, maxInterval) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            var result = helper.intervalScaleNiceTicks(\n                extent, splitNumber, minInterval, maxInterval\n            );\n\n            this._intervalPrecision = result.intervalPrecision;\n            this._interval = result.interval;\n            this._niceExtent = result.niceTickExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {Object} opt\n         * @param {number} [opt.splitNumber = 5] Given approx tick number\n         * @param {boolean} [opt.fixMin=false]\n         * @param {boolean} [opt.fixMax=false]\n         * @param {boolean} [opt.minInterval]\n         * @param {boolean} [opt.maxInterval]\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!opt.fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/Interval.js\n// module id = 1010\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var graphic = require('../../util/graphic');\n    var Model = require('../../model/Model');\n    var numberUtil = require('../../util/number');\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = require('zrender/lib/core/vector');\n    var matrix = require('zrender/lib/core/matrix');\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotate] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     * @param {number} [opt.nameTruncateMaxWidth]\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTickLabel: function () {\n            var axisModel = this.axisModel;\n            var opt = this.opt;\n\n            var tickEls = buildAxisTick(this, axisModel, opt);\n            var labelEls = buildAxisLabel(this, axisModel, opt);\n\n            fixMinMaxLabelShow(axisModel, labelEls, tickEls);\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (isNameLocationCenter(nameLocation)) {\n                labelLayout = innerTextLayout(\n                    opt.rotation,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(\n                opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth\n            );\n            // FIXME\n            // truncate rich text? (consider performance)\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            graphic.setTextStyle(textEl.style, textStyleModel, {\n                text: truncatedText,\n                textFont: textFont,\n                textFill: textStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color'),\n                textAlign: labelLayout.textAlign,\n                textVerticalAlign: labelLayout.textVerticalAlign\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @public\n     * @static\n     * @param {Object} opt\n     * @param {number} axisRotation in radian\n     * @param {number} textRotation in radian\n     * @param {number} direction\n     * @return {Object} {\n     *  rotation, // according to axis\n     *  textAlign,\n     *  textVerticalAlign\n     * }\n     */\n    var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - axisRotation);\n        var textAlign;\n        var textVerticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    };\n\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var textVerticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            textVerticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            textVerticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {\n        // If min or max are user set, we need to check\n        // If the tick on min(max) are overlap on their neighbour tick\n        // If they are overlapped, we need to hide the min(max) tick label\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        // FIXME\n        // Have not consider onBand yet, where tick els is more than label els.\n\n        labelEls = labelEls || [];\n        tickEls = tickEls || [];\n\n        var firstLabel = labelEls[0];\n        var nextLabel = labelEls[1];\n        var lastLabel = labelEls[labelEls.length - 1];\n        var prevLabel = labelEls[labelEls.length - 2];\n\n        var firstTick = tickEls[0];\n        var nextTick = tickEls[1];\n        var lastTick = tickEls[tickEls.length - 1];\n        var prevTick = tickEls[tickEls.length - 2];\n\n        if (showMinLabel === false) {\n            ignoreEl(firstLabel);\n            ignoreEl(firstTick);\n        }\n        else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\n            if (showMinLabel) {\n                ignoreEl(nextLabel);\n                ignoreEl(nextTick);\n            }\n            else {\n                ignoreEl(firstLabel);\n                ignoreEl(firstTick);\n            }\n        }\n\n        if (showMaxLabel === false) {\n            ignoreEl(lastLabel);\n            ignoreEl(lastTick);\n        }\n        else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\n            if (showMaxLabel) {\n                ignoreEl(prevLabel);\n                ignoreEl(prevTick);\n            }\n            else {\n                ignoreEl(lastLabel);\n                ignoreEl(lastTick);\n            }\n        }\n    }\n\n    function ignoreEl(el) {\n        el && (el.ignore = true);\n    }\n\n    function isTwoLabelOverlapped(current, next, labelLayout) {\n        // current and next has the same rotation.\n        var firstRect = current && current.getBoundingRect().clone();\n        var nextRect = next && next.getBoundingRect().clone();\n\n        if (!firstRect || !nextRect) {\n            return;\n        }\n\n        // When checking intersect of two rotated labels, we use mRotationBack\n        // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.\n        var mRotationBack = matrix.identity([]);\n        matrix.rotate(mRotationBack, mRotationBack, -current.rotation);\n\n        firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));\n        nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));\n\n        return firstRect.intersect(nextRect);\n    }\n\n    function isNameLocationCenter(nameLocation) {\n        return nameLocation === 'middle' || nameLocation === 'center';\n    }\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (\n        axis,\n        i,\n        interval,\n        ticksCnt,\n        showMinLabel,\n        showMaxLabel\n    ) {\n        if (i === 0 && showMinLabel || i === ticksCnt - 1 && showMaxLabel) {\n            return false;\n        }\n\n        // FIXME\n        // Have not consider label overlap (if label is too long) yet.\n\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    function buildAxisTick(axisBuilder, axisModel, opt) {\n        var axis = axisModel.axis;\n\n        if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {\n            return;\n        }\n\n        var tickModel = axisModel.getModel('axisTick');\n\n        var lineStyleModel = tickModel.getModel('lineStyle');\n        var tickLen = tickModel.get('length');\n\n        var tickInterval = getInterval(tickModel, opt.labelInterval);\n        var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n        // FIXME\n        // Corresponds to ticksCoords ?\n        var ticks = axis.scale.getTicks();\n\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        var pt1 = [];\n        var pt2 = [];\n        var matrix = axisBuilder._transform;\n\n        var tickEls = [];\n\n        var ticksCnt = ticksCoords.length;\n        for (var i = 0; i < ticksCnt; i++) {\n            // Only ordinal scale support tick interval\n            if (ifIgnoreOnTick(\n                axis, i, tickInterval, ticksCnt,\n                showMinLabel, showMaxLabel\n            )) {\n                continue;\n            }\n\n            var tickCoord = ticksCoords[i];\n\n            pt1[0] = tickCoord;\n            pt1[1] = 0;\n            pt2[0] = tickCoord;\n            pt2[1] = opt.tickDirection * tickLen;\n\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n            // Tick line, Not use group transform to have better line draw\n            var tickEl = new graphic.Line(graphic.subPixelOptimizeLine({\n                // Id for animation\n                anid: 'tick_' + ticks[i],\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.defaults(\n                    lineStyleModel.getLineStyle(),\n                    {\n                        stroke: axisModel.get('axisLine.lineStyle.color')\n                    }\n                ),\n                z2: 2,\n                silent: true\n            }));\n            axisBuilder.group.add(tickEl);\n            tickEls.push(tickEl);\n        }\n\n        return tickEls;\n    }\n\n    function buildAxisLabel(axisBuilder, axisModel, opt) {\n        var axis = axisModel.axis;\n        var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n        if (!show || axis.scale.isBlank()) {\n            return;\n        }\n\n        var labelModel = axisModel.getModel('axisLabel');\n        var labelMargin = labelModel.get('margin');\n        var ticks = axis.scale.getTicks();\n        var labels = axisModel.getFormattedLabels();\n\n        // Special label rotate.\n        var labelRotation = (\n            retrieve(opt.labelRotate, labelModel.get('rotate')) || 0\n        ) * PI / 180;\n\n        var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);\n        var categoryData = axisModel.get('data');\n\n        var labelEls = [];\n        var silent = isSilent(axisModel);\n        var triggerEvent = axisModel.get('triggerEvent');\n\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n        zrUtil.each(ticks, function (tickVal, index) {\n            if (ifIgnoreOnTick(\n                axis, index, opt.labelInterval, ticks.length,\n                showMinLabel, showMaxLabel\n            )) {\n                    return;\n            }\n\n            var itemLabelModel = labelModel;\n            if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                itemLabelModel = new Model(\n                    categoryData[tickVal].textStyle, labelModel, axisModel.ecModel\n                );\n            }\n\n            var textColor = itemLabelModel.getTextColor()\n                || axisModel.get('axisLine.lineStyle.color');\n\n            var tickCoord = axis.dataToCoord(tickVal);\n            var pos = [\n                tickCoord,\n                opt.labelOffset + opt.labelDirection * labelMargin\n            ];\n            var labelStr = axis.scale.getLabel(tickVal);\n\n            var textEl = new graphic.Text({\n                // Id for animation\n                anid: 'label_' + tickVal,\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: silent,\n                z2: 10\n            });\n\n            graphic.setTextStyle(textEl.style, itemLabelModel, {\n                text: labels[index],\n                textAlign: itemLabelModel.getShallow('align', true)\n                    || labelLayout.textAlign,\n                textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true)\n                    || itemLabelModel.getShallow('baseline', true)\n                    || labelLayout.textVerticalAlign,\n                textFill: typeof textColor === 'function'\n                    ? textColor(\n                        // (1) In category axis with data zoom, tick is not the original\n                        // index of axis.data. So tick should not be exposed to user\n                        // in category axis.\n                        // (2) Compatible with previous version, which always returns labelStr.\n                        // But in interval scale labelStr is like '223,445', which maked\n                        // user repalce ','. So we modify it to return original val but remain\n                        // it as 'string' to avoid error in replacing.\n                        axis.type === 'category' ? labelStr : axis.type === 'value' ? tickVal + '' : tickVal,\n                        index\n                    )\n                    : textColor\n            });\n\n            // Pack data for mouse event\n            if (triggerEvent) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisLabel';\n                textEl.eventData.value = labelStr;\n            }\n\n            // FIXME\n            axisBuilder._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            labelEls.push(textEl);\n            axisBuilder.group.add(textEl);\n\n            textEl.decomposeTransform();\n\n        });\n\n        return labelEls;\n    }\n\n\n    module.exports = AxisBuilder;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axis/AxisBuilder.js\n// module id = 1011\n// module chunks = 0 1 2","\n\n    var axisPointerModelHelper = require('../axisPointer/modelHelper');\n\n    /**\n     * Base class of AxisView.\n     */\n    var AxisView = require('../../echarts').extendComponentView({\n\n        type: 'axis',\n\n        /**\n         * @private\n         */\n        _axisPointer: null,\n\n        /**\n         * @protected\n         * @type {string}\n         */\n        axisPointerClass: null,\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n            // FIXME\n            // This process should proformed after coordinate systems updated\n            // (axis scale updated), and should be performed each time update.\n            // So put it here temporarily, although it is not appropriate to\n            // put a model-writing procedure in `view`.\n            this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n\n            AxisView.superApply(this, 'render', arguments);\n\n            updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n        },\n\n        /**\n         * Action handler.\n         * @public\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} payload\n         */\n        updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n            updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            var axisPointer = this._axisPointer;\n            axisPointer && axisPointer.remove(api);\n            AxisView.superApply(this, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            disposeAxisPointer(this, api);\n            AxisView.superApply(this, 'dispose', arguments);\n        }\n\n    });\n\n    function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n        var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n        if (!Clazz) {\n            return;\n        }\n        var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n        axisPointerModel\n            ? (axisView._axisPointer || (axisView._axisPointer = new Clazz()))\n                .render(axisModel, axisPointerModel, api, forceRender)\n            : disposeAxisPointer(axisView, api);\n    }\n\n    function disposeAxisPointer(axisView, ecModel, api) {\n        var axisPointer = axisView._axisPointer;\n        axisPointer && axisPointer.dispose(ecModel, api);\n        axisView._axisPointer = null;\n    }\n\n    var axisPointerClazz = [];\n\n    AxisView.registerAxisPointerClass = function (type, clazz) {\n        if (__DEV__) {\n            if (axisPointerClazz[type]) {\n                throw new Error('axisPointer ' + type + ' exists');\n            }\n        }\n        axisPointerClazz[type] = clazz;\n    };\n\n    AxisView.getAxisPointerClass = function (type) {\n        return type && axisPointerClazz[type];\n    };\n\n    module.exports = AxisView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axis/AxisView.js\n// module id = 1012\n// module chunks = 0 1 2","\n\n    var LRU = require('../../core/LRU');\n    var globalImageCache = new LRU(50);\n\n    var helper = {};\n\n    /**\n     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n     */\n    helper.findExistImage = function (newImageOrSrc) {\n        if (typeof newImageOrSrc === 'string') {\n            var cachedImgObj = globalImageCache.get(newImageOrSrc);\n            return cachedImgObj && cachedImgObj.image;\n        }\n        else {\n            return newImageOrSrc;\n        }\n    };\n\n    /**\n     * Caution: User should cache loaded images, but not just count on LRU.\n     * Consider if required images more than LRU size, will dead loop occur?\n     *\n     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n     * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.\n     * @param {module:zrender/Element} [hostEl] For calling `dirty`.\n     * @param {Function} [cb] params: (image, cbPayload)\n     * @param {Object} [cbPayload] Payload on cb calling.\n     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n     */\n    helper.createOrUpdateImage = function (newImageOrSrc, image, hostEl, cb, cbPayload) {\n        if (!newImageOrSrc) {\n            return image;\n        }\n        else if (typeof newImageOrSrc === 'string') {\n\n            // Image should not be loaded repeatly.\n            if ((image && image.__zrImageSrc === newImageOrSrc) || !hostEl) {\n                return image;\n            }\n\n            // Only when there is no existent image or existent image src\n            // is different, this method is responsible for load.\n            var cachedImgObj = globalImageCache.get(newImageOrSrc);\n\n            var pendingWrap = {hostEl: hostEl, cb: cb, cbPayload: cbPayload};\n\n            if (cachedImgObj) {\n                image = cachedImgObj.image;\n                !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);\n            }\n            else {\n                !image && (image = new Image());\n                image.onload = imageOnLoad;\n\n                globalImageCache.put(\n                    newImageOrSrc,\n                    image.__cachedImgObj = {\n                        image: image,\n                        pending: [pendingWrap]\n                    }\n                );\n\n                image.src = image.__zrImageSrc = newImageOrSrc;\n            }\n\n            return image;\n        }\n        // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas\n        else {\n            return newImageOrSrc;\n        }\n    };\n\n    function imageOnLoad() {\n        var cachedImgObj = this.__cachedImgObj;\n        this.onload = this.__cachedImgObj = null;\n\n        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n            var pendingWrap = cachedImgObj.pending[i];\n            var cb = pendingWrap.cb;\n            cb && cb(this, pendingWrap.cbPayload);\n            pendingWrap.hostEl.dirty();\n        }\n        cachedImgObj.pending.length = 0;\n    }\n\n    var isImageReady = helper.isImageReady = function (image) {\n        return image && image.width && image.height;\n    };\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/image.js\n// module id = 1013\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazz = require('./clazz');\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/component.js\n// module id = 1014\n// module chunks = 0 1 2","// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/timsort.js\n// module id = 1015\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('./axisHelper');\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj + '';\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (this.axis\n                && min != null\n                && min !== 'dataMin'\n                && typeof min !== 'function'\n                && !zrUtil.eqNaN(min)\n            ) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (this.axis\n                && max != null\n                && max !== 'dataMax'\n                && typeof max !== 'function'\n                && !zrUtil.eqNaN(max)\n            ) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/axisModelCommonMixin.js\n// module id = 1016\n// module chunks = 0 1 2","/**\n * @file Data zoom model\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var env = require('zrender/lib/core/env');\n    var echarts = require('../../echarts');\n    var modelUtil = require('../../util/model');\n    var helper = require('./helper');\n    var AxisProxy = require('./AxisProxy');\n    var each = zrUtil.each;\n    var eachAxisDim = helper.eachAxisDim;\n\n    var DataZoomModel = echarts.extendComponentModel({\n\n        type: 'dataZoom',\n\n        dependencies: [\n            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'\n        ],\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            zlevel: 0,\n            z: 4,                   // Higher than normal component (z: 2).\n            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\n            xAxisIndex: null,       // Default the first horizontal category axis.\n            yAxisIndex: null,       // Default the first vertical category axis.\n\n            filterMode: 'filter',   // Possible values: 'filter' or 'empty' or 'weakFilter'.\n                                    // 'filter': data items which are out of window will be removed. This option is\n                                    //          applicable when filtering outliers. For each data item, it will be\n                                    //          filtered if one of the relevant dimensions is out of the window.\n                                    // 'weakFilter': data items which are out of window will be removed. This option\n                                    //          is applicable when filtering outliers. For each data item, it will be\n                                    //          filtered only if all  of the relevant dimensions are out of the same\n                                    //          side of the window.\n                                    // 'empty': data items which are out of window will be set to empty.\n                                    //          This option is applicable when user should not neglect\n                                    //          that there are some data items out of window.\n                                    // 'none': Do not filter.\n                                    // Taking line chart as an example, line will be broken in\n                                    // the filtered points when filterModel is set to 'empty', but\n                                    // be connected when set to 'filter'.\n\n            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\n                                    // default 100. Do not throttle when use null/undefined.\n                                    // If animation === true and animationDurationUpdate > 0,\n                                    // default value is 100, otherwise 20.\n            start: 0,               // Start percent. 0 ~ 100\n            end: 100,               // End percent. 0 ~ 100\n            startValue: null,       // Start value. If startValue specified, start is ignored.\n            endValue: null,         // End value. If endValue specified, end is ignored.\n            minSpan: null,          // 0 ~ 100\n            maxSpan: null,          // 0 ~ 100\n            minValueSpan: null,     // The range of dataZoom can not be smaller than that.\n            maxValueSpan: null,     // The range of dataZoom can not be larger than that.\n            rangeMode: null         // Array, can be 'value' or 'percent'.\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * key like x_0, y_1\n             * @private\n             * @type {Object}\n             */\n            this._dataIntervalByAxis = {};\n\n            /**\n             * @private\n             */\n            this._dataInfo = {};\n\n            /**\n             * key like x_0, y_1\n             * @private\n             */\n            this._axisProxies = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * @private\n             */\n            this._autoThrottle = true;\n\n            /**\n             * 'percent' or 'value'\n             * @private\n             */\n            this._rangePropMode = ['percent', 'percent'];\n\n            var rawOption = retrieveRaw(option);\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (newOption) {\n            var rawOption = retrieveRaw(newOption);\n\n            //FIX #2591\n            zrUtil.merge(this.option, newOption, true);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @protected\n         */\n        doInit: function (rawOption) {\n            var thisOption = this.option;\n\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            this._setDefaultThrottle(rawOption);\n\n            updateRangeUse(this, rawOption);\n\n            each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n                // start/end has higher priority over startValue/endValue if they\n                // both set, but we should make chart.setOption({endValue: 1000})\n                // effective, rather than chart.setOption({endValue: 1000, end: null}).\n                if (this._rangePropMode[index] === 'value') {\n                    thisOption[names[0]] = null;\n                }\n                // Otherwise do nothing and use the merge result.\n            }, this);\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this._resetTarget();\n\n            this._giveAxisProxies();\n        },\n\n        /**\n         * @private\n         */\n        _giveAxisProxies: function () {\n            var axisProxies = this._axisProxies;\n\n            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\n                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\n\n                // If exists, share axisProxy with other dataZoomModels.\n                var axisProxy = axisModel.__dzAxisProxy || (\n                    // Use the first dataZoomModel as the main model of axisProxy.\n                    axisModel.__dzAxisProxy = new AxisProxy(\n                        dimNames.name, axisIndex, this, ecModel\n                    )\n                );\n                // FIXME\n                // dispose __dzAxisProxy\n\n                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetTarget: function () {\n            var thisOption = this.option;\n\n            var autoMode = this._judgeAutoMode();\n\n            eachAxisDim(function (dimNames) {\n                var axisIndexName = dimNames.axisIndex;\n                thisOption[axisIndexName] = modelUtil.normalizeToArray(\n                    thisOption[axisIndexName]\n                );\n            }, this);\n\n            if (autoMode === 'axisIndex') {\n                this._autoSetAxisIndex();\n            }\n            else if (autoMode === 'orient') {\n                this._autoSetOrient();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _judgeAutoMode: function () {\n            // Auto set only works for setOption at the first time.\n            // The following is user's reponsibility. So using merged\n            // option is OK.\n            var thisOption = this.option;\n\n            var hasIndexSpecified = false;\n            eachAxisDim(function (dimNames) {\n                // When user set axisIndex as a empty array, we think that user specify axisIndex\n                // but do not want use auto mode. Because empty array may be encountered when\n                // some error occured.\n                if (thisOption[dimNames.axisIndex] != null) {\n                    hasIndexSpecified = true;\n                }\n            }, this);\n\n            var orient = thisOption.orient;\n\n            if (orient == null && hasIndexSpecified) {\n                return 'orient';\n            }\n            else if (!hasIndexSpecified) {\n                if (orient == null) {\n                    thisOption.orient = 'horizontal';\n                }\n                return 'axisIndex';\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetAxisIndex: function () {\n            var autoAxisIndex = true;\n            var orient = this.get('orient', true);\n            var thisOption = this.option;\n            var dependentModels = this.dependentModels;\n\n            if (autoAxisIndex) {\n                // Find axis that parallel to dataZoom as default.\n                var dimName = orient === 'vertical' ? 'y' : 'x';\n\n                if (dependentModels[dimName + 'Axis'].length) {\n                    thisOption[dimName + 'AxisIndex'] = [0];\n                    autoAxisIndex = false;\n                }\n                else {\n                    each(dependentModels.singleAxis, function (singleAxisModel) {\n                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {\n                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];\n                            autoAxisIndex = false;\n                        }\n                    });\n                }\n            }\n\n            if (autoAxisIndex) {\n                // Find the first category axis as default. (consider polar)\n                eachAxisDim(function (dimNames) {\n                    if (!autoAxisIndex) {\n                        return;\n                    }\n                    var axisIndices = [];\n                    var axisModels = this.dependentModels[dimNames.axis];\n                    if (axisModels.length && !axisIndices.length) {\n                        for (var i = 0, len = axisModels.length; i < len; i++) {\n                            if (axisModels[i].get('type') === 'category') {\n                                axisIndices.push(i);\n                            }\n                        }\n                    }\n                    thisOption[dimNames.axisIndex] = axisIndices;\n                    if (axisIndices.length) {\n                        autoAxisIndex = false;\n                    }\n                }, this);\n            }\n\n            if (autoAxisIndex) {\n                // FIXME\n                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\n                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\n\n                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\n                // dataZoom component auto adopts series that reference to\n                // both xAxis and yAxis which type is 'value'.\n                this.ecModel.eachSeries(function (seriesModel) {\n                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\n                        eachAxisDim(function (dimNames) {\n                            var axisIndices = thisOption[dimNames.axisIndex];\n\n                            var axisIndex = seriesModel.get(dimNames.axisIndex);\n                            var axisId = seriesModel.get(dimNames.axisId);\n\n                            var axisModel = seriesModel.ecModel.queryComponents({\n                                mainType: dimNames.axis,\n                                index: axisIndex,\n                                id: axisId\n                            })[0];\n\n                            if (__DEV__) {\n                                if (!axisModel) {\n                                    throw new Error(\n                                        dimNames.axis + ' \"' + zrUtil.retrieve(\n                                            axisIndex,\n                                            axisId,\n                                            0\n                                        ) + '\" not found'\n                                    );\n                                }\n                            }\n                            axisIndex = axisModel.componentIndex;\n\n                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\n                                axisIndices.push(axisIndex);\n                            }\n                        });\n                    }\n                }, this);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetOrient: function () {\n            var dim;\n\n            // Find the first axis\n            this.eachTargetAxis(function (dimNames) {\n                !dim && (dim = dimNames.name);\n            }, this);\n\n            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\n        },\n\n        /**\n         * @private\n         */\n        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\n            // FIXME\n            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\n            // 例如series.type === scatter时。\n\n            var is = true;\n            eachAxisDim(function (dimNames) {\n                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\n                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\n\n                if (!axisModel || axisModel.get('type') !== axisType) {\n                    is = false;\n                }\n            }, this);\n            return is;\n        },\n\n        /**\n         * @private\n         */\n        _setDefaultThrottle: function (rawOption) {\n            // When first time user set throttle, auto throttle ends.\n            if (rawOption.hasOwnProperty('throttle')) {\n                this._autoThrottle = false;\n            }\n            if (this._autoThrottle) {\n                var globalOption = this.ecModel.option;\n                this.option.throttle =\n                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\n                    ? 100 : 20;\n            }\n        },\n\n        /**\n         * @public\n         */\n        getFirstTargetAxisModel: function () {\n            var firstAxisModel;\n            eachAxisDim(function (dimNames) {\n                if (firstAxisModel == null) {\n                    var indices = this.get(dimNames.axisIndex);\n                    if (indices.length) {\n                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\n                    }\n                }\n            }, this);\n\n            return firstAxisModel;\n        },\n\n        /**\n         * @public\n         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\n         */\n        eachTargetAxis: function (callback, context) {\n            var ecModel = this.ecModel;\n            eachAxisDim(function (dimNames) {\n                each(\n                    this.get(dimNames.axisIndex),\n                    function (axisIndex) {\n                        callback.call(context, dimNames, axisIndex, this, ecModel);\n                    },\n                    this\n                );\n            }, this);\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.\n         */\n        getAxisProxy: function (dimName, axisIndex) {\n            return this._axisProxies[dimName + '_' + axisIndex];\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/model/Model} If not found, return null/undefined.\n         */\n        getAxisModel: function (dimName, axisIndex) {\n            var axisProxy = this.getAxisProxy(dimName, axisIndex);\n            return axisProxy && axisProxy.getAxisModel();\n        },\n\n        /**\n         * If not specified, set to undefined.\n         *\n         * @public\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         * @param {boolean} [ignoreUpdateRangeUsg=false]\n         */\n        setRawRange: function (opt, ignoreUpdateRangeUsg) {\n            each(['start', 'end', 'startValue', 'endValue'], function (name) {\n                // If any of those prop is null/undefined, we should alos set\n                // them, because only one pair between start/end and\n                // startValue/endValue can work.\n                this.option[name] = opt[name];\n            }, this);\n\n            !ignoreUpdateRangeUsg && updateRangeUse(this, opt);\n        },\n\n        /**\n         * @public\n         * @return {Array.<number>} [startPercent, endPercent]\n         */\n        getPercentRange: function () {\n            var axisProxy = this.findRepresentativeAxisProxy();\n            if (axisProxy) {\n                return axisProxy.getDataPercentWindow();\n            }\n        },\n\n        /**\n         * @public\n         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\n         *\n         * @param {string} [axisDimName]\n         * @param {number} [axisIndex]\n         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.\n         */\n        getValueRange: function (axisDimName, axisIndex) {\n            if (axisDimName == null && axisIndex == null) {\n                var axisProxy = this.findRepresentativeAxisProxy();\n                if (axisProxy) {\n                    return axisProxy.getDataValueWindow();\n                }\n            }\n            else {\n                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\n            }\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy\n         *      corresponding to the axisModel\n         * @return {module:echarts/component/dataZoom/AxisProxy}\n         */\n        findRepresentativeAxisProxy: function (axisModel) {\n            if (axisModel) {\n                return axisModel.__dzAxisProxy;\n            }\n\n            // Find the first hosted axisProxy\n            var axisProxies = this._axisProxies;\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n\n            // If no hosted axis find not hosted axisProxy.\n            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\n            // and the option.start or option.end settings are different. The percentRange\n            // should follow axisProxy.\n            // (We encounter this problem in toolbox data zoom.)\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getRangePropMode: function () {\n            return this._rangePropMode.slice();\n        }\n\n    });\n\n    function retrieveRaw(option) {\n        var ret = {};\n        each(\n            ['start', 'end', 'startValue', 'endValue', 'throttle'],\n            function (name) {\n                option.hasOwnProperty(name) && (ret[name] = option[name]);\n            }\n        );\n        return ret;\n    }\n\n    function updateRangeUse(dataZoomModel, rawOption) {\n        var rangePropMode = dataZoomModel._rangePropMode;\n        var rangeModeInOption = dataZoomModel.get('rangeMode');\n\n        each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n            var percentSpecified = rawOption[names[0]] != null;\n            var valueSpecified = rawOption[names[1]] != null;\n            if (percentSpecified && !valueSpecified) {\n                rangePropMode[index] = 'percent';\n            }\n            else if (!percentSpecified && valueSpecified) {\n                rangePropMode[index] = 'value';\n            }\n            else if (rangeModeInOption) {\n                rangePropMode[index] = rangeModeInOption[index];\n            }\n            else if (percentSpecified) { // percentSpecified && valueSpecified\n                rangePropMode[index] = 'percent';\n            }\n            // else remain its original setting.\n        });\n    }\n\n    module.exports = DataZoomModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/DataZoomModel.js\n// module id = 1017\n// module chunks = 0 1 2","\n    var formatUtil = require('../../util/format');\n    var zrUtil = require('zrender/lib/core/util');\n\n    var helper = {};\n\n    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];\n    // Supported coords.\n    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n\n    /**\n     * @param {string} coordType\n     * @return {boolean}\n     */\n    helper.isCoordSupported = function (coordType) {\n        return zrUtil.indexOf(COORDS, coordType) >= 0;\n    };\n\n    /**\n     * Create \"each\" method to iterate names.\n     *\n     * @pubilc\n     * @param  {Array.<string>} names\n     * @param  {Array.<string>=} attrs\n     * @return {Function}\n     */\n    helper.createNameEach = function (names, attrs) {\n        names = names.slice();\n        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n        attrs = (attrs || []).slice();\n        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n\n        return function (callback, context) {\n            zrUtil.each(names, function (name, index) {\n                var nameObj = {name: name, capital: capitalNames[index]};\n\n                for (var j = 0; j < attrs.length; j++) {\n                    nameObj[attrs[j]] = name + capitalAttrs[j];\n                }\n\n                callback.call(context, nameObj);\n            });\n        };\n    };\n\n    /**\n     * Iterate each dimension name.\n     *\n     * @public\n     * @param {Function} callback The parameter is like:\n     *                            {\n     *                                name: 'angle',\n     *                                capital: 'Angle',\n     *                                axis: 'angleAxis',\n     *                                axisIndex: 'angleAixs',\n     *                                index: 'angleIndex'\n     *                            }\n     * @param {Object} context\n     */\n    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n\n    /**\n     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n     * dataZoomModels and 'links' make up one or more graphics.\n     * This function finds the graphic where the source dataZoomModel is in.\n     *\n     * @public\n     * @param {Function} forEachNode Node iterator.\n     * @param {Function} forEachEdgeType edgeType iterator\n     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n     */\n    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\n\n        return function (sourceNode) {\n            var result = {\n                nodes: [],\n                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n            };\n\n            forEachEdgeType(function (edgeType) {\n                result.records[edgeType.name] = {};\n            });\n\n            if (!sourceNode) {\n                return result;\n            }\n\n            absorb(sourceNode, result);\n\n            var existsLink;\n            do {\n                existsLink = false;\n                forEachNode(processSingleNode);\n            }\n            while (existsLink);\n\n            function processSingleNode(node) {\n                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n                    absorb(node, result);\n                    existsLink = true;\n                }\n            }\n\n            return result;\n        };\n\n        function isNodeAbsorded(node, result) {\n            return zrUtil.indexOf(result.nodes, node) >= 0;\n        }\n\n        function isLinked(node, result) {\n            var hasLink = false;\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] && (hasLink = true);\n                });\n            });\n            return hasLink;\n        }\n\n        function absorb(node, result) {\n            result.nodes.push(node);\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] = true;\n                });\n            });\n        }\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/helper.js\n// module id = 1018\n// module chunks = 0 1 2","\n\n    var ComponentView = require('../../view/Component');\n\n    module.exports = ComponentView.extend({\n\n        type: 'dataZoom',\n\n        render: function (dataZoomModel, ecModel, api, payload) {\n            this.dataZoomModel = dataZoomModel;\n            this.ecModel = ecModel;\n            this.api = api;\n        },\n\n        /**\n         * Find the first target coordinate system.\n         *\n         * @protected\n         * @return {Object} {\n         *                   grid: [\n         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\n         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\n         *                       ...\n         *                   ],  // cartesians must not be null/undefined.\n         *                   polar: [\n         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\n         *                       ...\n         *                   ],  // polars must not be null/undefined.\n         *                   singleAxis: [\n         *                       {model: coord0, axisModels: [], coordIndex: 0}\n         *                   ]\n         */\n        getTargetCoordInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var ecModel = this.ecModel;\n            var coordSysLists = {};\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\n                if (axisModel) {\n                    var coordModel = axisModel.getCoordSysModel();\n                    coordModel && save(\n                        coordModel,\n                        axisModel,\n                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),\n                        coordModel.componentIndex\n                    );\n                }\n            }, this);\n\n            function save(coordModel, axisModel, store, coordIndex) {\n                var item;\n                for (var i = 0; i < store.length; i++) {\n                    if (store[i].model === coordModel) {\n                        item = store[i];\n                        break;\n                    }\n                }\n                if (!item) {\n                    store.push(item = {\n                        model: coordModel, axisModels: [], coordIndex: coordIndex\n                    });\n                }\n                item.axisModels.push(axisModel);\n            }\n\n            return coordSysLists;\n        }\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/DataZoomView.js\n// module id = 1019\n// module chunks = 0 1 2","\n\n    var echarts = require('../echarts');\n    var axisPointerModelHelper = require('./axisPointer/modelHelper');\n    var axisTrigger = require('./axisPointer/axisTrigger');\n    var zrUtil = require('zrender/lib/core/util');\n\n    require('./axisPointer/AxisPointerModel');\n    require('./axisPointer/AxisPointerView');\n\n    // CartesianAxisPointer is not supposed to be required here. But consider\n    // echarts.simple.js and online build tooltip, which only require gridSimple,\n    // CartesianAxisPointer should be able to required somewhere.\n    require('./axisPointer/CartesianAxisPointer');\n\n    echarts.registerPreprocessor(function (option) {\n        // Always has a global axisPointerModel for default setting.\n        if (option) {\n            (!option.axisPointer || option.axisPointer.length === 0)\n                && (option.axisPointer = {});\n\n            var link = option.axisPointer.link;\n            // Normalize to array to avoid object mergin. But if link\n            // is not set, remain null/undefined, otherwise it will\n            // override existent link setting.\n            if (link && !zrUtil.isArray(link)) {\n                option.axisPointer.link = [link];\n            }\n        }\n    });\n\n    // This process should proformed after coordinate systems created\n    // and series data processed. So put it on statistic processing stage.\n    echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {\n        // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n        // allAxesInfo should be updated when setOption performed.\n        ecModel.getComponent('axisPointer').coordSysAxesInfo\n            = axisPointerModelHelper.collect(ecModel, api);\n    });\n\n    // Broadcast to all views.\n    echarts.registerAction({\n        type: 'updateAxisPointer',\n        event: 'updateAxisPointer',\n        update: ':updateAxisPointer'\n    }, axisTrigger);\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer.js\n// module id = 1020\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var textContain = require('zrender/lib/contain/text');\n    var formatUtil = require('../../util/format');\n    var matrix = require('zrender/lib/core/matrix');\n    var axisHelper = require('../../coord/axisHelper');\n    var AxisBuilder = require('../axis/AxisBuilder');\n\n    var helper = {};\n\n    /**\n     * @param {module:echarts/model/Model} axisPointerModel\n     */\n    helper.buildElStyle = function (axisPointerModel) {\n        var axisPointerType = axisPointerModel.get('type');\n        var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n        var style;\n        if (axisPointerType === 'line') {\n            style = styleModel.getLineStyle();\n            style.fill = null;\n        }\n        else if (axisPointerType === 'shadow') {\n            style = styleModel.getAreaStyle();\n            style.stroke = null;\n        }\n        return style;\n    };\n\n    /**\n     * @param {Function} labelPos {align, verticalAlign, position}\n     */\n    helper.buildLabelElOption = function (\n        elOption, axisModel, axisPointerModel, api, labelPos\n    ) {\n        var value = axisPointerModel.get('value');\n        var text = helper.getValueLabel(\n            value, axisModel.axis, axisModel.ecModel,\n            axisPointerModel.get('seriesDataIndices'),\n            {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            }\n        );\n        var labelModel = axisPointerModel.getModel('label');\n        var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n\n        var font = labelModel.getFont();\n        var textRect = textContain.getBoundingRect(text, font);\n\n        var position = labelPos.position;\n        var width = textRect.width + paddings[1] + paddings[3];\n        var height = textRect.height + paddings[0] + paddings[2];\n\n        // Adjust by align.\n        var align = labelPos.align;\n        align === 'right' && (position[0] -= width);\n        align === 'center' && (position[0] -= width / 2);\n        var verticalAlign = labelPos.verticalAlign;\n        verticalAlign === 'bottom' && (position[1] -= height);\n        verticalAlign === 'middle' && (position[1] -= height / 2);\n\n        // Not overflow ec container\n        confineInContainer(position, width, height, api);\n\n        var bgColor = labelModel.get('backgroundColor');\n        if (!bgColor || bgColor === 'auto') {\n            bgColor = axisModel.get('axisLine.lineStyle.color');\n        }\n\n        elOption.label = {\n            shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},\n            position: position.slice(),\n            // TODO: rich\n            style: {\n                text: text,\n                textFont: font,\n                textFill: labelModel.getTextColor(),\n                textPosition: 'inside',\n                fill: bgColor,\n                stroke: labelModel.get('borderColor') || 'transparent',\n                lineWidth: labelModel.get('borderWidth') || 0,\n                shadowBlur: labelModel.get('shadowBlur'),\n                shadowColor: labelModel.get('shadowColor'),\n                shadowOffsetX: labelModel.get('shadowOffsetX'),\n                shadowOffsetY: labelModel.get('shadowOffsetY')\n            },\n            // Lable should be over axisPointer.\n            z2: 10\n        };\n    };\n\n    // Do not overflow ec container\n    function confineInContainer(position, width, height, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n        position[0] = Math.min(position[0] + width, viewWidth) - width;\n        position[1] = Math.min(position[1] + height, viewHeight) - height;\n        position[0] = Math.max(position[0], 0);\n        position[1] = Math.max(position[1], 0);\n    }\n\n    /**\n     * @param {number} value\n     * @param {module:echarts/coord/Axis} axis\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} opt\n     * @param {Array.<Object>} seriesDataIndices\n     * @param {number|string} opt.precision 'auto' or a number\n     * @param {string|Function} opt.formatter label formatter\n     */\n    helper.getValueLabel = function (value, axis, ecModel, seriesDataIndices, opt) {\n        var text = axis.scale.getLabel(\n            // If `precision` is set, width can be fixed (like '12.00500'), which\n            // helps to debounce when when moving label.\n            value, {precision: opt.precision}\n        );\n        var formatter = opt.formatter;\n\n        if (formatter) {\n            var params = {\n                value: axisHelper.getAxisRawValue(axis, value),\n                seriesData: []\n            };\n            zrUtil.each(seriesDataIndices, function (idxItem) {\n                var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                var dataIndex = idxItem.dataIndexInside;\n                var dataParams = series && series.getDataParams(dataIndex);\n                dataParams && params.seriesData.push(dataParams);\n            });\n\n            if (zrUtil.isString(formatter)) {\n                text = formatter.replace('{value}', text);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                text = formatter(params);\n            }\n        }\n\n        return text;\n    };\n\n    /**\n     * @param {module:echarts/coord/Axis} axis\n     * @param {number} value\n     * @param {Object} layoutInfo {\n     *  rotation, position, labelOffset, labelDirection, labelMargin\n     * }\n     */\n    helper.getTransformedPosition = function (axis, value, layoutInfo) {\n        var transform = matrix.create();\n        matrix.rotate(transform, transform, layoutInfo.rotation);\n        matrix.translate(transform, transform, layoutInfo.position);\n\n        return graphic.applyTransform([\n            axis.dataToCoord(value),\n            (layoutInfo.labelOffset || 0)\n                + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)\n        ], transform);\n    };\n\n    helper.buildCartesianSingleLabelElOption = function (\n        value, elOption, layoutInfo, axisModel, axisPointerModel, api\n    ) {\n        var textLayout = AxisBuilder.innerTextLayout(\n            layoutInfo.rotation, 0, layoutInfo.labelDirection\n        );\n        layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n        helper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n            position: helper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n            align: textLayout.textAlign,\n            verticalAlign: textLayout.textVerticalAlign\n        });\n    };\n\n    /**\n     * @param {Array.<number>} p1\n     * @param {Array.<number>} p2\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeLineShape = function (p1, p2, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x1: p1[xDimIndex],\n            y1: p1[1 - xDimIndex],\n            x2: p2[xDimIndex],\n            y2: p2[1 - xDimIndex]\n        };\n    };\n\n    /**\n     * @param {Array.<number>} xy\n     * @param {Array.<number>} wh\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeRectShape = function (xy, wh, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x: xy[xDimIndex],\n            y: xy[1 - xDimIndex],\n            width: wh[xDimIndex],\n            height: wh[1 - xDimIndex]\n        };\n    };\n\n    helper.makeSectorShape = function (cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/viewHelper.js\n// module id = 1021\n// module chunks = 0 1 2","'use strict';\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = require('../core/matrix');\n    var vector = require('../core/vector');\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {CanvasRenderingContext2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {        \n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/mixin/Transformable.js\n// module id = 1022\n// module chunks = 0 1 2","\n        var config = require('../config');\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/log.js\n// module id = 1023\n// module chunks = 0 1 2","\n\n    var textContain = require('../../contain/text');\n    var util = require('../../core/util');\n    var roundRectHelper = require('./roundRect');\n    var imageHelper = require('./image');\n\n    var retrieve3 = util.retrieve3;\n    var retrieve2 = util.retrieve2;\n\n    // TODO: Have not support 'start', 'end' yet.\n    var VALID_TEXT_ALIGN = {left: 1, right: 1, center: 1};\n    var VALID_TEXT_VERTICAL_ALIGN = {top: 1, bottom: 1, middle: 1};\n\n    var helper = {};\n\n    /**\n     * @param {module:zrender/graphic/Style} style\n     * @return {module:zrender/graphic/Style} The input style.\n     */\n    helper.normalizeTextStyle = function (style) {\n        normalizeStyle(style);\n        util.each(style.rich, normalizeStyle);\n        return style;\n    };\n\n    function normalizeStyle(style) {\n        if (style) {\n\n            style.font = textContain.makeFont(style);\n\n            var textAlign = style.textAlign;\n            textAlign === 'middle' && (textAlign = 'center');\n            style.textAlign = (\n                textAlign == null || VALID_TEXT_ALIGN[textAlign]\n            ) ? textAlign : 'left';\n\n            // Compatible with textBaseline.\n            var textVerticalAlign = style.textVerticalAlign || style.textBaseline;\n            textVerticalAlign === 'center' && (textVerticalAlign = 'middle');\n            style.textVerticalAlign = (\n                textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign]\n            ) ? textVerticalAlign : 'top';\n\n            var textPadding = style.textPadding;\n            if (textPadding) {\n                style.textPadding = util.normalizeCssArray(style.textPadding);\n            }\n        }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} text\n     * @param {module:zrender/graphic/Style} style\n     * @param {Object|boolean} [rect] {x, y, width, height}\n     *                  If set false, rect text is not used.\n     */\n    helper.renderText = function (hostEl, ctx, text, style, rect) {\n        style.rich\n            ? renderRichText(hostEl, ctx, text, style, rect)\n            : renderPlainText(hostEl, ctx, text, style, rect);\n    };\n\n    function renderPlainText(hostEl, ctx, text, style, rect) {\n        var font = setCtx(ctx, 'font', style.font || textContain.DEFAULT_FONT);\n\n        var textPadding = style.textPadding;\n\n        var contentBlock = hostEl.__textCotentBlock;\n        if (!contentBlock || hostEl.__dirty) {\n            contentBlock = hostEl.__textCotentBlock = textContain.parsePlainText(\n                text, font, textPadding, style.truncate\n            );\n        }\n\n        var outerHeight = contentBlock.outerHeight;\n\n        var textLines = contentBlock.lines;\n        var lineHeight = contentBlock.lineHeight;\n\n        var boxPos = getBoxPosition(outerHeight, style, rect);\n        var baseX = boxPos.baseX;\n        var baseY = boxPos.baseY;\n        var textAlign = boxPos.textAlign;\n        var textVerticalAlign = boxPos.textVerticalAlign;\n\n        // Origin of textRotation should be the base point of text drawing.\n        applyTextRotation(ctx, style, rect, baseX, baseY);\n\n        var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);\n        var textX = baseX;\n        var textY = boxY;\n\n        var needDrawBg = needDrawBackground(style);\n        if (needDrawBg || textPadding) {\n            // Consider performance, do not call getTextWidth util necessary.\n            var textWidth = textContain.getWidth(text, font);\n            var outerWidth = textWidth;\n            textPadding && (outerWidth += textPadding[1] + textPadding[3]);\n            var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);\n\n            needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);\n\n            if (textPadding) {\n                textX = getTextXForPadding(baseX, textAlign, textPadding);\n                textY += textPadding[0];\n            }\n        }\n\n        setCtx(ctx, 'textAlign', textAlign || 'left');\n        // Force baseline to be \"middle\". Otherwise, if using \"top\", the\n        // text will offset downward a little bit in font \"Microsoft YaHei\".\n        setCtx(ctx, 'textBaseline', 'middle');\n\n        // Always set shadowBlur and shadowOffset to avoid leak from displayable.\n        setCtx(ctx, 'shadowBlur', style.textShadowBlur || 0);\n        setCtx(ctx, 'shadowColor', style.textShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', style.textShadowOffsetX || 0);\n        setCtx(ctx, 'shadowOffsetY', style.textShadowOffsetY || 0);\n\n        // `textBaseline` is set as 'middle'.\n        textY += lineHeight / 2;\n\n        var textStrokeWidth = style.textStrokeWidth;\n        var textStroke = getStroke(style.textStroke, textStrokeWidth);\n        var textFill = getFill(style.textFill);\n\n        if (textStroke) {\n            setCtx(ctx, 'lineWidth', textStrokeWidth);\n            setCtx(ctx, 'strokeStyle', textStroke);\n        }\n        if (textFill) {\n            setCtx(ctx, 'fillStyle', textFill);\n        }\n\n        for (var i = 0; i < textLines.length; i++) {\n            // Fill after stroke so the outline will not cover the main part.\n            textStroke && ctx.strokeText(textLines[i], textX, textY);\n            textFill && ctx.fillText(textLines[i], textX, textY);\n            textY += lineHeight;\n        }\n    }\n\n    function renderRichText(hostEl, ctx, text, style, rect) {\n        var contentBlock = hostEl.__textCotentBlock;\n\n        if (!contentBlock || hostEl.__dirty) {\n            contentBlock = hostEl.__textCotentBlock = textContain.parseRichText(text, style);\n        }\n\n        drawRichText(hostEl, ctx, contentBlock, style, rect);\n    }\n\n    function drawRichText(hostEl, ctx, contentBlock, style, rect) {\n        var contentWidth = contentBlock.width;\n        var outerWidth = contentBlock.outerWidth;\n        var outerHeight = contentBlock.outerHeight;\n        var textPadding = style.textPadding;\n\n        var boxPos = getBoxPosition(outerHeight, style, rect);\n        var baseX = boxPos.baseX;\n        var baseY = boxPos.baseY;\n        var textAlign = boxPos.textAlign;\n        var textVerticalAlign = boxPos.textVerticalAlign;\n\n        // Origin of textRotation should be the base point of text drawing.\n        applyTextRotation(ctx, style, rect, baseX, baseY);\n\n        var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);\n        var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);\n        var xLeft = boxX;\n        var lineTop = boxY;\n        if (textPadding) {\n            xLeft += textPadding[3];\n            lineTop += textPadding[0];\n        }\n        var xRight = xLeft + contentWidth;\n\n        needDrawBackground(style) && drawBackground(\n            hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight\n        );\n\n        for (var i = 0; i < contentBlock.lines.length; i++) {\n            var line = contentBlock.lines[i];\n            var tokens = line.tokens;\n            var tokenCount = tokens.length;\n            var lineHeight = line.lineHeight;\n            var usedWidth = line.width;\n\n            var leftIndex = 0;\n            var lineXLeft = xLeft;\n            var lineXRight = xRight;\n            var rightIndex = tokenCount - 1;\n            var token;\n\n            while (\n                leftIndex < tokenCount\n                && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')\n            ) {\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');\n                usedWidth -= token.width;\n                lineXLeft += token.width;\n                leftIndex++;\n            }\n\n            while (\n                rightIndex >= 0\n                && (token = tokens[rightIndex], token.textAlign === 'right')\n            ) {\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');\n                usedWidth -= token.width;\n                lineXRight -= token.width;\n                rightIndex--;\n            }\n\n            // The other tokens are placed as textAlign 'center' if there is enough space.\n            lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;\n            while (leftIndex <= rightIndex) {\n                token = tokens[leftIndex];\n                // Consider width specified by user, use 'center' rather than 'left'.\n                placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');\n                lineXLeft += token.width;\n                leftIndex++;\n            }\n\n            lineTop += lineHeight;\n        }\n    }\n\n    function applyTextRotation(ctx, style, rect, x, y) {\n        // textRotation only apply in RectText.\n        if (rect && style.textRotation) {\n            var origin = style.textOrigin;\n            if (origin === 'center') {\n                x = rect.width / 2 + rect.x;\n                y = rect.height / 2 + rect.y;\n            }\n            else if (origin) {\n                x = origin[0] + rect.x;\n                y = origin[1] + rect.y;\n            }\n\n            ctx.translate(x, y);\n            // Positive: anticlockwise\n            ctx.rotate(-style.textRotation);\n            ctx.translate(-x, -y);\n        }\n    }\n\n    function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {\n        var tokenStyle = style.rich[token.styleName] || {};\n\n        // 'ctx.textBaseline' is always set as 'middle', for sake of\n        // the bias of \"Microsoft YaHei\".\n        var textVerticalAlign = token.textVerticalAlign;\n        var y = lineTop + lineHeight / 2;\n        if (textVerticalAlign === 'top') {\n            y = lineTop + token.height / 2;\n        }\n        else if (textVerticalAlign === 'bottom') {\n            y = lineTop + lineHeight - token.height / 2;\n        }\n\n        !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(\n            hostEl,\n            ctx,\n            tokenStyle,\n            textAlign === 'right'\n                ? x - token.width\n                : textAlign === 'center'\n                ? x - token.width / 2\n                : x,\n            y - token.height / 2,\n            token.width,\n            token.height\n        );\n\n        var textPadding = token.textPadding;\n        if (textPadding) {\n            x = getTextXForPadding(x, textAlign, textPadding);\n            y -= token.height / 2 - textPadding[2] - token.textHeight / 2;\n        }\n\n        setCtx(ctx, 'shadowBlur', retrieve3(tokenStyle.textShadowBlur, style.textShadowBlur, 0));\n        setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', retrieve3(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));\n        setCtx(ctx, 'shadowOffsetY', retrieve3(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));\n\n        setCtx(ctx, 'textAlign', textAlign);\n        // Force baseline to be \"middle\". Otherwise, if using \"top\", the\n        // text will offset downward a little bit in font \"Microsoft YaHei\".\n        setCtx(ctx, 'textBaseline', 'middle');\n\n        setCtx(ctx, 'font', token.font || textContain.DEFAULT_FONT);\n\n        var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);\n        var textFill = getFill(tokenStyle.textFill || style.textFill);\n        var textStrokeWidth = retrieve2(tokenStyle.textStrokeWidth, style.textStrokeWidth);\n\n        // Fill after stroke so the outline will not cover the main part.\n        if (textStroke) {\n            setCtx(ctx, 'lineWidth', textStrokeWidth);\n            setCtx(ctx, 'strokeStyle', textStroke);\n            ctx.strokeText(token.text, x, y);\n        }\n        if (textFill) {\n            setCtx(ctx, 'fillStyle', textFill);\n            ctx.fillText(token.text, x, y);\n        }\n    }\n\n    function needDrawBackground(style) {\n        return style.textBackgroundColor\n            || (style.textBorderWidth && style.textBorderColor);\n    }\n\n    // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius}\n    // shape: {x, y, width, height}\n    function drawBackground(hostEl, ctx, style, x, y, width, height) {\n        var textBackgroundColor = style.textBackgroundColor;\n        var textBorderWidth = style.textBorderWidth;\n        var textBorderColor = style.textBorderColor;\n        var isPlainBg = util.isString(textBackgroundColor);\n\n        setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);\n        setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');\n        setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);\n        setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);\n\n        if (isPlainBg || (textBorderWidth && textBorderColor)) {\n            ctx.beginPath();\n            var textBorderRadius = style.textBorderRadius;\n            if (!textBorderRadius) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, {\n                    x: x, y: y, width: width, height: height, r: textBorderRadius\n                });\n            }\n            ctx.closePath();\n        }\n\n        if (isPlainBg) {\n            setCtx(ctx, 'fillStyle', textBackgroundColor);\n            ctx.fill();\n        }\n        else if (util.isObject(textBackgroundColor)) {\n            var image = textBackgroundColor.image;\n\n            image = imageHelper.createOrUpdateImage(\n                image, null, hostEl, onBgImageLoaded, textBackgroundColor\n            );\n            if (image && imageHelper.isImageReady(image)) {\n                ctx.drawImage(image, x, y, width, height);\n            }\n        }\n\n        if (textBorderWidth && textBorderColor) {\n            setCtx(ctx, 'lineWidth', textBorderWidth);\n            setCtx(ctx, 'strokeStyle', textBorderColor);\n            ctx.stroke();\n        }\n    }\n\n    function onBgImageLoaded(image, textBackgroundColor) {\n        // Replace image, so that `contain/text.js#parseRichText`\n        // will get correct result in next tick.\n        textBackgroundColor.image = image;\n    }\n\n    function getBoxPosition(blockHeiht, style, rect) {\n        var baseX = style.x || 0;\n        var baseY = style.y || 0;\n        var textAlign = style.textAlign;\n        var textVerticalAlign = style.textVerticalAlign;\n\n        // Text position represented by coord\n        if (rect) {\n            var textPosition = style.textPosition;\n            if (textPosition instanceof Array) {\n                // Percent\n                baseX = rect.x + parsePercent(textPosition[0], rect.width);\n                baseY = rect.y + parsePercent(textPosition[1], rect.height);\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, style.textDistance\n                );\n                baseX = res.x;\n                baseY = res.y;\n                // Default align and baseline when has textPosition\n                textAlign = textAlign || res.textAlign;\n                textVerticalAlign = textVerticalAlign || res.textVerticalAlign;\n            }\n\n            // textOffset is only support in RectText, otherwise\n            // we have to adjust boundingRect for textOffset.\n            var textOffset = style.textOffset;\n            if (textOffset) {\n                baseX += textOffset[0];\n                baseY += textOffset[1];\n            }\n        }\n\n        return {\n            baseX: baseX,\n            baseY: baseY,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function setCtx(ctx, prop, value) {\n        // FIXME ??? performance try\n        // if (ctx.__currentValues[prop] !== value) {\n            // ctx[prop] = ctx.__currentValues[prop] = value;\n        ctx[prop] = value;\n        // }\n        return ctx[prop];\n    }\n\n    /**\n     * @param {string} [stroke] If specified, do not check style.textStroke.\n     * @param {string} [lineWidth] If specified, do not check style.textStroke.\n     * @param {number} style\n     */\n    var getStroke = helper.getStroke = function (stroke, lineWidth) {\n        return (stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none')\n            ? null\n            // TODO pattern and gradient?\n            : (stroke.image || stroke.colorStops)\n            ? '#000'\n            : stroke;\n    };\n\n    var getFill = helper.getFill = function (fill) {\n        return (fill == null || fill === 'none')\n            ? null\n            // TODO pattern and gradient?\n            : (fill.image || fill.colorStops)\n            ? '#000'\n            : fill;\n    };\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    function getTextXForPadding(x, textAlign, textPadding) {\n        return textAlign === 'right'\n            ? (x - textPadding[1])\n            : textAlign === 'center'\n            ? (x + textPadding[3] / 2 - textPadding[1] / 2)\n            : (x + textPadding[3]);\n    }\n\n    /**\n     * @param {string} text\n     * @param {module:zrender/Style} style\n     * @return {boolean}\n     */\n    helper.needDrawText = function (text, style) {\n        return text != null\n            && (text\n                || style.textBackgroundColor\n                || (style.textBorderWidth && style.textBorderColor)\n                || style.textPadding\n            );\n    };\n\n    module.exports = helper;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/text.js\n// module id = 1024\n// module chunks = 0 1 2","/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var BoundingRect = require('../core/BoundingRect');\n    var zrUtil = require('../core/util');\n    var imageHelper = require('./helper/image');\n\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n\n            var image = this._image = imageHelper.createOrUpdateImage(src, this._image, this);\n\n            if (!image || !imageHelper.isImageReady(image)) {\n                return;\n            }\n\n            // 图片已经加载完成\n            // if (image.nodeName.toUpperCase() == 'IMG') {\n            //     if (!image.complete) {\n            //         return;\n            //     }\n            // }\n            // Else is canvas\n\n            var x = style.x || 0;\n            var y = style.y || 0;\n            var width = style.width;\n            var height = style.height;\n            var aspect = image.width / image.height;\n            if (width == null && height != null) {\n                // Keep image/height ratio\n                width = height * aspect;\n            }\n            else if (height == null && width != null) {\n                height = width / aspect;\n            }\n            else if (width == null && height == null) {\n                width = image.width;\n                height = image.height;\n            }\n\n            // 设置transform\n            this.setTransform(ctx);\n\n            if (style.sWidth && style.sHeight) {\n                var sx = style.sx || 0;\n                var sy = style.sy || 0;\n                ctx.drawImage(\n                    image,\n                    sx, sy, style.sWidth, style.sHeight,\n                    x, y, width, height\n                );\n            }\n            else if (style.sx && style.sy) {\n                var sx = style.sx;\n                var sy = style.sy;\n                var sWidth = width - sx;\n                var sHeight = height - sy;\n                ctx.drawImage(\n                    image,\n                    sx, sy, sWidth, sHeight,\n                    x, y, width, height\n                );\n            }\n            else {\n                ctx.drawImage(image, x, y, width, height);\n            }\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Image.js\n// module id = 1025\n// module chunks = 0 1 2","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/view/Component.js\n// module id = 1026\n// module chunks = 0 1 2","\n\n    /**\n     * Calculate slider move result.\n     * Usage:\n     * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as\n     * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.\n     * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].\n     *              handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *              extent[0] should less or equals than extent[1].\n     * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,\n     *              where the input minSpan and maxSpan will not work.\n     * @param {number} [minSpan] The range of dataZoom can not be smaller than that.\n     *              If not set, handle0 and cross handle1. If set as a non-negative\n     *              number (including `0`), handles will push each other when reaching\n     *              the minSpan.\n     * @param {number} [maxSpan] The range of dataZoom can not be larger than that.\n     * @return {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {\n        // Normalize firstly.\n        handleEnds[0] = restrict(handleEnds[0], extent);\n        handleEnds[1] = restrict(handleEnds[1], extent);\n\n        delta = delta || 0;\n\n        var extentSpan = extent[1] - extent[0];\n\n        // Notice maxSpan and minSpan can be null/undefined.\n        if (minSpan != null) {\n            minSpan = restrict(minSpan, [0, extentSpan]);\n        }\n        if (maxSpan != null) {\n            maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);\n        }\n        if (handleIndex === 'all') {\n            minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);\n            handleIndex = 0;\n        }\n\n        var originalDistSign = getSpanSign(handleEnds, handleIndex);\n\n        handleEnds[handleIndex] += delta;\n\n        // Restrict in extent.\n        var extentMinSpan = minSpan || 0;\n        var realExtent = extent.slice();\n        originalDistSign.sign < 0 ? (realExtent[0] += extentMinSpan) : (realExtent[1] -= extentMinSpan);\n        handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent);\n\n        // Expand span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (minSpan != null && (\n            currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan\n        )) {\n            // If minSpan exists, 'cross' is forbinden.\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;\n        }\n\n        // Shrink span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (maxSpan != null && currDistSign.span > maxSpan) {\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;\n        }\n\n        return handleEnds;\n    };\n\n    function getSpanSign(handleEnds, handleIndex) {\n        var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex];\n        // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]\n        // is at left of handleEnds[1] for non-cross case.\n        return {span: Math.abs(dist), sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1};\n    }\n\n    function restrict(value, extend) {\n        return Math.min(extend[1], Math.max(extend[0], value));\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/sliderMove.js\n// module id = 1027\n// module chunks = 0 1 2","// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/LRU.js\n// module id = 1028\n// module chunks = 0 1 2","/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts, host) {\n        this.extendFrom(opts, false);\n        this.host = host;\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {module:zrender/graphic/Displayable}\n         */\n        host: null,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * If `fontSize` or `fontFamily` exists, `font` will be reset by\n         * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.\n         * So do not visit it directly in upper application (like echarts),\n         * but use `contain/text#makeFont` instead.\n         * @type {string}\n         */\n        font: null,\n\n        /**\n         * The same as font. Use font please.\n         * @deprecated\n         * @type {string}\n         */\n        textFont: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontStyle: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontWeight: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * Should be 12 but not '12px'.\n         * @type {number}\n         */\n        fontSize: null,\n\n        /**\n         * It helps merging respectively, rather than parsing an entire font string.\n         * @type {string}\n         */\n        fontFamily: null,\n\n        /**\n         * Reserved for special functinality, like 'hr'.\n         * @type {string}\n         */\n        textTag: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * @type {number}\n         */\n        textWidth: null,\n\n        /**\n         * Only for textBackground.\n         * @type {number}\n         */\n        textHeight: null,\n\n        /**\n         * textStroke may be set as some color as a default\n         * value in upper applicaion, where the default value\n         * of textStrokeWidth should be 0 to make sure that\n         * user can choose to do not use text stroke.\n         * @type {number}\n         */\n        textStrokeWidth: 0,\n\n        /**\n         * @type {number}\n         */\n        textLineHeight: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * Based on x, y of rect.\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * If not specified, use the boundingRect of a `displayable`.\n         * @type {Object}\n         */\n        textRect: null,\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * @type {string}\n         */\n        textShadowColor: 'transparent',\n\n        /**\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * @type {string}\n         */\n        textBoxShadowColor: 'transparent',\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        textBoxShadowOffsetY: 0,\n\n        /**\n         * Whether transform text.\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        transformText: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and transformText is false.\n         */\n        textRotation: 0,\n\n        /**\n         * Text origin of text rotation, like [10, 40].\n         * Based on x, y of rect.\n         * Useful in label rotation of circular symbol.\n         * By default, this origin is textPosition.\n         * Can be 'center'.\n         * @type {string|Array.<number>}\n         */\n        textOrigin: null,\n\n        /**\n         * @type {string}\n         */\n        textBackgroundColor: null,\n\n        /**\n         * @type {string}\n         */\n        textBorderColor: null,\n\n        /**\n         * @type {number}\n         */\n        textBorderWidth: 0,\n\n        /**\n         * @type {number}\n         */\n        textBorderRadius: 0,\n\n        /**\n         * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`\n         * @type {number|Array.<number>}\n         */\n        textPadding: null,\n\n        /**\n         * Text styles for rich text.\n         * @type {Object}\n         */\n        rich: null,\n\n        /**\n         * {outerWidth, outerHeight, ellipsis, placeholder}\n         * @type {Object}\n         */\n        truncate: null,\n\n        /**\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         * @type {string}\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite true: overwrirte any way.\n         *                            false: overwrite only when !target.hasOwnProperty\n         *                            others: overwrite when property is not null/undefined.\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite === true\n                            || (\n                                overwrite === false\n                                    ? !this.hasOwnProperty(name)\n                                    : otherStyle[name] != null\n                            )\n                        )\n                    ) {\n                        this[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Style.js\n// module id = 1029\n// module chunks = 0 1 2","'use strict';\n/**\n * @module zrender/Element\n */\n\n\n    var guid = require('./core/guid');\n    var Eventful = require('./mixin/Eventful');\n    var Transformable = require('./mixin/Transformable');\n    var Animatable = require('./mixin/Animatable');\n    var zrUtil = require('./core/util');\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/Element.js\n// module id = 1030\n// module chunks = 0 1 2","/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/guid.js\n// module id = 1031\n// module chunks = 0 1 2","/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = require('./Clip');\n    var color = require('../tool/color');\n    var util = require('../core/util');\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = len && p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function getArrayDim(keyframes) {\n        var lastValue = keyframes[keyframes.length - 1].value;\n        return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;\n    }\n\n    function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = isValueArray ? getArrayDim(keyframes) : 0;\n\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (!forceAnimate && isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} [easing]\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @param  {boolean} forceAnimate\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing, forceAnimate) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName, forceAnimate\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            // This optimization will help the case that in the upper application\n            // the view may be refreshed frequently, where animation will be\n            // called repeatly but nothing changed.\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/animation/Animator.js\n// module id = 1032\n// module chunks = 0 1 2","\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/roundRect.js\n// module id = 1033\n// module chunks = 0 1 2","\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/util.js\n// module id = 1034\n// module chunks = 0 1 2","\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Pattern.js\n// module id = 1035\n// module chunks = 0 1 2","\n\n    var smoothSpline = require('./smoothSpline');\n    var smoothBezier = require('./smoothBezier');\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/poly.js\n// module id = 1036\n// module chunks = 0 1 2","\n\n    var classUtil = require('../../util/clazz');\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            // Use `hasOwnProperty` to avoid conflict with Object.prototype.\n            if (colorNameMap.hasOwnProperty(name)) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/colorPalette.js\n// module id = 1037\n// module chunks = 0 1 2","\n\n    module.exports = (typeof window !== 'undefined' &&\n                ((window.requestAnimationFrame && window.requestAnimationFrame.bind(window))\n                // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809\n                || (window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window))\n                || window.mozRequestAnimationFrame\n                || window.webkitRequestAnimationFrame)\n            )\n            || function (func) {\n                setTimeout(func, 16);\n            };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/animation/requestAnimationFrame.js\n// module id = 1038\n// module chunks = 0 1 2","/**\n * For testable.\n */\n\n\n    var numberUtil = require('../util/number');\n\n    var roundNumber = numberUtil.round;\n\n    var helper = {};\n\n    /**\n     * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.\n     *                                Should be extent[0] < extent[1].\n     * @param {number} splitNumber splitNumber should be >= 1.\n     * @param {number} [minInterval]\n     * @param {number} [maxInterval]\n     * @return {Object} {interval, intervalPrecision, niceTickExtent}\n     */\n    helper.intervalScaleNiceTicks = function (extent, splitNumber, minInterval, maxInterval) {\n        var result = {};\n        var span = extent[1] - extent[0];\n\n        var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n        if (minInterval != null && interval < minInterval) {\n            interval = result.interval = minInterval;\n        }\n        if (maxInterval != null && interval > maxInterval) {\n            interval = result.interval = maxInterval;\n        }\n        // Tow more digital for tick.\n        var precision = result.intervalPrecision = helper.getIntervalPrecision(interval);\n        // Niced extent inside original extent\n        var niceTickExtent = result.niceTickExtent = [\n            roundNumber(Math.ceil(extent[0] / interval) * interval, precision),\n            roundNumber(Math.floor(extent[1] / interval) * interval, precision)\n        ];\n\n        helper.fixExtent(niceTickExtent, extent);\n\n        return result;\n    };\n\n    /**\n     * @param {number} interval\n     * @return {number} interval precision\n     */\n    helper.getIntervalPrecision = function (interval) {\n        // Tow more digital for tick.\n        return numberUtil.getPrecisionSafe(interval) + 2;\n    };\n\n    function clamp(niceTickExtent, idx, extent) {\n        niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n    }\n\n    // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n    helper.fixExtent = function (niceTickExtent, extent) {\n        !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n        !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n        clamp(niceTickExtent, 0, extent);\n        clamp(niceTickExtent, 1, extent);\n        if (niceTickExtent[0] > niceTickExtent[1]) {\n            niceTickExtent[0] = niceTickExtent[1];\n        }\n    };\n\n    helper.intervalScaleGetTicks = function (interval, extent, niceTickExtent, intervalPrecision) {\n        var ticks = [];\n\n        // If interval is 0, return [];\n        if (!interval) {\n            return ticks;\n        }\n\n        // Consider this case: using dataZoom toolbox, zoom and zoom.\n        var safeLimit = 10000;\n\n        if (extent[0] < niceTickExtent[0]) {\n            ticks.push(extent[0]);\n        }\n        var tick = niceTickExtent[0];\n\n        while (tick <= niceTickExtent[1]) {\n            ticks.push(tick);\n            // Avoid rounding error\n            tick = roundNumber(tick + interval, intervalPrecision);\n            if (tick === ticks[ticks.length - 1]) {\n                // Consider out of safe float point, e.g.,\n                // -3711126.9907707 + 2e-10 === -3711126.9907707\n                break;\n            }\n            if (ticks.length > safeLimit) {\n                return [];\n            }\n        }\n        // Consider this case: the last item of ticks is smaller\n        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n        if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {\n            ticks.push(extent[1]);\n        }\n\n        return ticks;\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/helper.js\n// module id = 1039\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n\n    /**\n     * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object} {point: [x, y], el: ...} point Will not be null.\n     */\n    module.exports = function (finder, ecModel) {\n        var point = [];\n        var seriesIndex = finder.seriesIndex;\n        var seriesModel;\n        if (seriesIndex == null || !(\n            seriesModel = ecModel.getSeriesByIndex(seriesIndex)\n        )) {\n            return {point: []};\n        }\n\n        var data = seriesModel.getData();\n        var dataIndex = modelUtil.queryDataIndex(data, finder);\n        if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n            return {point: []};\n        }\n\n        var el = data.getItemGraphicEl(dataIndex);\n        var coordSys = seriesModel.coordinateSystem;\n\n        if (seriesModel.getTooltipPosition) {\n            point = seriesModel.getTooltipPosition(dataIndex) || [];\n        }\n        else if (coordSys && coordSys.dataToPoint) {\n            point = coordSys.dataToPoint(\n                data.getValues(\n                    zrUtil.map(coordSys.dimensions, function (dim) {\n                        return seriesModel.coordDimToDataDim(dim)[0];\n                    }), dataIndex, true\n                )\n            ) || [];\n        }\n        else if (el) {\n            // Use graphic bounding rect\n            var rect = el.getBoundingRect().clone();\n            rect.applyTransform(el.transform);\n            point = [\n                rect.x + rect.width / 2,\n                rect.y + rect.height / 2\n            ];\n        }\n\n        return {point: point, el: el};\n    };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js\n// module id = 1040\n// module chunks = 0 1 2","\n\n    var env = require('zrender/lib/core/env');\n    var zrUtil = require('zrender/lib/core/util');\n    var get = require('../../util/model').makeGetter();\n\n    var each = zrUtil.each;\n\n    var globalListener = {};\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Function} handler\n     *      param: {string} currTrigger\n     *      param: {Array.<number>} point\n     */\n    globalListener.register = function (key, api, handler) {\n        if (env.node) {\n            return;\n        }\n\n        var zr = api.getZr();\n        get(zr).records || (get(zr).records = {});\n\n        initGlobalListeners(zr, api);\n\n        var record = get(zr).records[key] || (get(zr).records[key] = {});\n        record.handler = handler;\n    };\n\n    function initGlobalListeners(zr, api) {\n        if (get(zr).initialized) {\n            return;\n        }\n\n        get(zr).initialized = true;\n\n        useHandler('click', zrUtil.curry(doEnter, 'click'));\n        useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove'));\n        // useHandler('mouseout', onLeave);\n        useHandler('globalout', onLeave);\n\n        function useHandler(eventType, cb) {\n            zr.on(eventType, function (e) {\n                var dis = makeDispatchAction(api);\n\n                each(get(zr).records, function (record) {\n                    record && cb(record, e, dis.dispatchAction);\n                });\n\n                dispatchTooltipFinally(dis.pendings, api);\n            });\n        }\n    }\n\n    function dispatchTooltipFinally(pendings, api) {\n        var showLen = pendings.showTip.length;\n        var hideLen = pendings.hideTip.length;\n\n        var actuallyPayload;\n        if (showLen) {\n            actuallyPayload = pendings.showTip[showLen - 1];\n        }\n        else if (hideLen) {\n            actuallyPayload = pendings.hideTip[hideLen - 1];\n        }\n        if (actuallyPayload) {\n            actuallyPayload.dispatchAction = null;\n            api.dispatchAction(actuallyPayload);\n        }\n    }\n\n    function onLeave(record, e, dispatchAction) {\n        record.handler('leave', null, dispatchAction);\n    }\n\n    function doEnter(currTrigger, record, e, dispatchAction) {\n        record.handler(currTrigger, e, dispatchAction);\n    }\n\n    function makeDispatchAction(api) {\n        var pendings = {\n            showTip: [],\n            hideTip: []\n        };\n        // FIXME\n        // better approach?\n        // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,\n        // which may be conflict, (axisPointer call showTip but tooltip call hideTip);\n        // So we have to add \"final stage\" to merge those dispatched actions.\n        var dispatchAction = function (payload) {\n            var pendingList = pendings[payload.type];\n            if (pendingList) {\n                pendingList.push(payload);\n            }\n            else {\n                payload.dispatchAction = dispatchAction;\n                api.dispatchAction(payload);\n            }\n        };\n\n        return {\n            dispatchAction: dispatchAction,\n            pendings: pendings\n        };\n    }\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    globalListener.unregister = function (key, api) {\n        if (env.node) {\n            return;\n        }\n        var zr = api.getZr();\n        var record = (get(zr).records || {})[key];\n        if (record) {\n            get(zr).records[key] = null;\n        }\n    };\n\n    module.exports = globalListener;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/globalListener.js\n// module id = 1041\n// module chunks = 0 1 2","\n    // List layout\n    var layout = require('../../util/layout');\n    var formatUtil = require('../../util/format');\n    var graphic = require('../../util/graphic');\n\n    module.exports = {\n        /**\n         * Layout list like component.\n         * It will box layout each items in group of component and then position the whole group in the viewport\n         * @param {module:zrender/group/Group} group\n         * @param {module:echarts/model/Component} componentModel\n         * @param {module:echarts/ExtensionAPI}\n         */\n        layout: function (group, componentModel, api) {\n            var boxLayoutParams = componentModel.getBoxLayoutParams();\n            var padding = componentModel.get('padding');\n            var viewportSize = {width: api.getWidth(), height: api.getHeight()};\n\n            var rect = layout.getLayoutRect(\n                boxLayoutParams,\n                viewportSize,\n                padding\n            );\n\n            layout.box(\n                componentModel.get('orient'),\n                group,\n                componentModel.get('itemGap'),\n                rect.width,\n                rect.height\n            );\n\n            layout.positionElement(\n                group,\n                boxLayoutParams,\n                viewportSize,\n                padding\n            );\n        },\n\n        makeBackground: function (rect, componentModel) {\n            var padding = formatUtil.normalizeCssArray(\n                componentModel.get('padding')\n            );\n            var style = componentModel.getItemStyle(['color', 'opacity']);\n            style.fill = componentModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: rect.x - padding[3],\n                    y: rect.y - padding[0],\n                    width: rect.width + padding[1] + padding[3],\n                    height: rect.height + padding[0] + padding[2],\n                    r: componentModel.get('borderRadius')\n                },\n                style: style,\n                silent: true,\n                z2: -1\n            });\n            // FIXME\n            // `subPixelOptimizeRect` may bring some gap between edge of viewpart\n            // and background rect when setting like `left: 0`, `top: 0`.\n            // graphic.subPixelOptimizeRect(rect);\n\n            return rect;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/listComponent.js\n// module id = 1042\n// module chunks = 0 1 2","/**\n * @file History manager.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n\n    var ATTR = '\\0_ec_hist_store';\n\n    var history = {\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\n         */\n        push: function (ecModel, newSnapshot) {\n            var store = giveStore(ecModel);\n\n            // If previous dataZoom can not be found,\n            // complete an range with current range.\n            each(newSnapshot, function (batchItem, dataZoomId) {\n                var i = store.length - 1;\n                for (; i >= 0; i--) {\n                    var snapshot = store[i];\n                    if (snapshot[dataZoomId]) {\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    // No origin range set, create one by current range.\n                    var dataZoomModel = ecModel.queryComponents(\n                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\n                    )[0];\n                    if (dataZoomModel) {\n                        var percentRange = dataZoomModel.getPercentRange();\n                        store[0][dataZoomId] = {\n                            dataZoomId: dataZoomId,\n                            start: percentRange[0],\n                            end: percentRange[1]\n                        };\n                    }\n                }\n            });\n\n            store.push(newSnapshot);\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object} snapshot\n         */\n        pop: function (ecModel) {\n            var store = giveStore(ecModel);\n            var head = store[store.length - 1];\n            store.length > 1 && store.pop();\n\n            // Find top for all dataZoom.\n            var snapshot = {};\n            each(head, function (batchItem, dataZoomId) {\n                for (var i = store.length - 1; i >= 0; i--) {\n                    var batchItem = store[i][dataZoomId];\n                    if (batchItem) {\n                        snapshot[dataZoomId] = batchItem;\n                        break;\n                    }\n                }\n            });\n\n            return snapshot;\n        },\n\n        /**\n         * @public\n         */\n        clear: function (ecModel) {\n            ecModel[ATTR] = null;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {number} records. always >= 1.\n         */\n        count: function (ecModel) {\n            return giveStore(ecModel).length;\n        }\n\n    };\n\n    /**\n     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\n     * History length of each dataZoom may be different.\n     * this._history[0] is used to store origin range.\n     * @type {Array.<Object>}\n     */\n    function giveStore(ecModel) {\n        var store = ecModel[ATTR];\n        if (!store) {\n            store = ecModel[ATTR] = [{}];\n        }\n        return store;\n    }\n\n    module.exports = history;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/history.js\n// module id = 1043\n// module chunks = 0 1 2","\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/visual/symbol.js\n// module id = 1044\n// module chunks = 0 1","'use strict';\n\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n\n    require('../coord/cartesian/Grid');\n\n    require('./axis');\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/gridSimple.js\n// module id = 1045\n// module chunks = 0 1","/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var curve = require('./curve');\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/bbox.js\n// module id = 1046\n// module chunks = 0 1 2","\n\n    var env = require('../../core/env');\n\n    // Fix weird bug in some version of IE11 (like 11.0.9600.178**),\n    // where exception \"unexpected call to method or property access\"\n    // might be thrown when calling ctx.fill or ctx.stroke after a path\n    // whose area size is zero is drawn and ctx.clip() is called and\n    // shadowBlur is set. See #4572, #3112, #5777.\n    // (e.g.,\n    //  ctx.moveTo(10, 10);\n    //  ctx.lineTo(20, 10);\n    //  ctx.closePath();\n    //  ctx.clip();\n    //  ctx.shadowBlur = 10;\n    //  ...\n    //  ctx.fill();\n    // )\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = function (orignalBrush) {\n\n        // version string can be: '11.0'\n        return (env.browser.ie && env.browser.version >= 11)\n\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var clipPath = clipPaths[i];\n                        var shape = clipPath && clipPath.shape;\n                        var type = clipPath && clipPath.type;\n\n                        if (shape && (\n                            (type === 'sector' && shape.startAngle === shape.endAngle)\n                            || (type === 'rect' && (!shape.width || !shape.height))\n                        )) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                // It is save to put shadowTemp static, because shadowTemp\n                                // will be all modified each item brush called.\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                orignalBrush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n\n            : orignalBrush;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/fixClipWithShadow.js\n// module id = 1047\n// module chunks = 0 1 2","'use strict';\n\n\n    var graphic = require('../../util/graphic');\n    var BaseAxisPointer = require('./BaseAxisPointer');\n    var viewHelper = require('./viewHelper');\n    var cartesianAxisHelper = require('../axis/cartesianAxisHelper');\n    var AxisView = require('../axis/AxisView');\n\n    var CartesianAxisPointer = BaseAxisPointer.extend({\n\n        /**\n         * @override\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisPointerType = axisPointerModel.get('type');\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n            if (axisPointerType && axisPointerType !== 'none') {\n                var elStyle = viewHelper.buildElStyle(axisPointerModel);\n                var pointerOption = pointerShapeBuilder[axisPointerType](\n                    axis, pixelValue, otherExtent, elStyle\n                );\n                pointerOption.style = elStyle;\n                elOption.graphicKey = pointerOption.type;\n                elOption.pointer = pointerOption;\n            }\n\n            var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n            viewHelper.buildCartesianSingleLabelElOption(\n                value, elOption, layoutInfo, axisModel, axisPointerModel, api\n            );\n        },\n\n        /**\n         * @override\n         */\n        getHandleTransform: function (value, axisModel, axisPointerModel) {\n            var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n                labelInside: false\n            });\n            layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n            return {\n                position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n                rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n            };\n        },\n\n        /**\n         * @override\n         */\n        updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisExtent = axis.getGlobalExtent(true);\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var dimIndex = axis.dim === 'x' ? 0 : 1;\n\n            var currPosition = transform.position;\n            currPosition[dimIndex] += delta[dimIndex];\n            currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n            currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n\n            var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n            var cursorPoint = [cursorOtherValue, cursorOtherValue];\n            cursorPoint[dimIndex] = currPosition[dimIndex];\n\n            // Make tooltip do not overlap axisPointer and in the middle of the grid.\n            var tooltipOptions = [{verticalAlign: 'middle'}, {align: 'center'}];\n\n            return {\n                position: currPosition,\n                rotation: transform.rotation,\n                cursorPoint: cursorPoint,\n                tooltipOption: tooltipOptions[dimIndex]\n            };\n        }\n\n    });\n\n    function getCartesian(grid, axis) {\n        var opt = {};\n        opt[axis.dim + 'AxisIndex'] = axis.index;\n        return grid.getCartesian(opt);\n    }\n\n    var pointerShapeBuilder = {\n\n        line: function (axis, pixelValue, otherExtent, elStyle) {\n            var targetShape = viewHelper.makeLineShape(\n                [pixelValue, otherExtent[0]],\n                [pixelValue, otherExtent[1]],\n                getAxisDimIndex(axis)\n            );\n            graphic.subPixelOptimizeLine({\n                shape: targetShape,\n                style: elStyle\n            });\n            return {\n                type: 'Line',\n                shape: targetShape\n            };\n        },\n\n        shadow: function (axis, pixelValue, otherExtent, elStyle) {\n            var bandWidth = axis.getBandWidth();\n            var span = otherExtent[1] - otherExtent[0];\n            return {\n                type: 'Rect',\n                shape: viewHelper.makeRectShape(\n                    [pixelValue - bandWidth / 2, otherExtent[0]],\n                    [bandWidth, span],\n                    getAxisDimIndex(axis)\n                )\n            };\n        }\n    };\n\n    function getAxisDimIndex(axis) {\n        return axis.dim === 'x' ? 0 : 1;\n    }\n\n    AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\n\n    module.exports = CartesianAxisPointer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js\n// module id = 1048\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazzUtil = require('../../util/clazz');\n    var graphic = require('../../util/graphic');\n    var get = require('../../util/model').makeGetter();\n    var axisPointerModelHelper = require('./modelHelper');\n    var eventTool = require('zrender/lib/core/event');\n    var throttle = require('../../util/throttle');\n\n    var clone = zrUtil.clone;\n    var bind = zrUtil.bind;\n\n    /**\n     * Base axis pointer class in 2D.\n     * Implemenents {module:echarts/component/axis/IAxisPointer}.\n     */\n    function BaseAxisPointer () {\n    }\n\n    BaseAxisPointer.prototype = {\n\n        /**\n         * @private\n         */\n        _group: null,\n\n        /**\n         * @private\n         */\n        _lastGraphicKey: null,\n\n        /**\n         * @private\n         */\n        _handle: null,\n\n        /**\n         * @private\n         */\n        _dragging: false,\n\n        /**\n         * @private\n         */\n        _lastValue: null,\n\n        /**\n         * @private\n         */\n        _lastStatus: null,\n\n        /**\n         * @private\n         */\n        _payloadInfo: null,\n\n        /**\n         * In px, arbitrary value. Do not set too small,\n         * no animation is ok for most cases.\n         * @protected\n         */\n        animationThreshold: 15,\n\n        /**\n         * @implement\n         */\n        render: function (axisModel, axisPointerModel, api, forceRender) {\n            var value = axisPointerModel.get('value');\n            var status = axisPointerModel.get('status');\n\n            // Bind them to `this`, not in closure, otherwise they will not\n            // be replaced when user calling setOption in not merge mode.\n            this._axisModel = axisModel;\n            this._axisPointerModel = axisPointerModel;\n            this._api = api;\n\n            // Optimize: `render` will be called repeatly during mouse move.\n            // So it is power consuming if performing `render` each time,\n            // especially on mobile device.\n            if (!forceRender\n                && this._lastValue === value\n                && this._lastStatus === status\n            ) {\n                return;\n            }\n            this._lastValue = value;\n            this._lastStatus = status;\n\n            var group = this._group;\n            var handle = this._handle;\n\n            if (!status || status === 'hide') {\n                // Do not clear here, for animation better.\n                group && group.hide();\n                handle && handle.hide();\n                return;\n            }\n            group && group.show();\n            handle && handle.show();\n\n            // Otherwise status is 'show'\n            var elOption = {};\n            this.makeElOption(elOption, value, axisModel, axisPointerModel, api);\n\n            // Enable change axis pointer type.\n            var graphicKey = elOption.graphicKey;\n            if (graphicKey !== this._lastGraphicKey) {\n                this.clear(api);\n            }\n            this._lastGraphicKey = graphicKey;\n\n            var moveAnimation = this._moveAnimation =\n                this.determineAnimation(axisModel, axisPointerModel);\n\n            if (!group) {\n                group = this._group = new graphic.Group();\n                this.createPointerEl(group, elOption, axisModel, axisPointerModel);\n                this.createLabelEl(group, elOption, axisModel, axisPointerModel);\n                api.getZr().add(group);\n            }\n            else {\n                var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);\n                this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);\n                this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);\n            }\n\n            updateMandatoryProps(group, axisPointerModel, true);\n\n            this._renderHandle(value);\n        },\n\n        /**\n         * @implement\n         */\n        remove: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @implement\n         */\n        dispose: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @protected\n         */\n        determineAnimation: function (axisModel, axisPointerModel) {\n            var animation = axisPointerModel.get('animation');\n            var axis = axisModel.axis;\n            var isCategoryAxis = axis.type === 'category';\n            var useSnap = axisPointerModel.get('snap');\n\n            // Value axis without snap always do not snap.\n            if (!useSnap && !isCategoryAxis) {\n                return false;\n            }\n\n            if (animation === 'auto' || animation == null) {\n                var animationThreshold = this.animationThreshold;\n                if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {\n                    return true;\n                }\n\n                // It is important to auto animation when snap used. Consider if there is\n                // a dataZoom, animation will be disabled when too many points exist, while\n                // it will be enabled for better visual effect when little points exist.\n                if (useSnap) {\n                    var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;\n                    var axisExtent = axis.getExtent();\n                    // Approximate band width\n                    return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;\n                }\n\n                return false;\n            }\n\n            return animation === true;\n        },\n\n        /**\n         * add {pointer, label, graphicKey} to elOption\n         * @protected\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            // Shoule be implemenented by sub-class.\n        },\n\n        /**\n         * @protected\n         */\n        createPointerEl: function (group, elOption, axisModel, axisPointerModel) {\n            var pointerOption = elOption.pointer;\n            if (pointerOption) {\n                var pointerEl = get(group).pointerEl = new graphic[pointerOption.type](\n                    clone(elOption.pointer)\n                );\n                group.add(pointerEl);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        createLabelEl: function (group, elOption, axisModel, axisPointerModel) {\n            if (elOption.label) {\n                var labelEl = get(group).labelEl = new graphic.Rect(\n                    clone(elOption.label)\n                );\n\n                group.add(labelEl);\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updatePointerEl: function (group, elOption, updateProps) {\n            var pointerEl = get(group).pointerEl;\n            if (pointerEl) {\n                pointerEl.setStyle(elOption.pointer.style);\n                updateProps(pointerEl, {shape: elOption.pointer.shape});\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {\n            var labelEl = get(group).labelEl;\n            if (labelEl) {\n                labelEl.setStyle(elOption.label.style);\n                updateProps(labelEl, {\n                    // Consider text length change in vertical axis, animation should\n                    // be used on shape, otherwise the effect will be weird.\n                    shape: elOption.label.shape,\n                    position: elOption.label.position\n                });\n\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderHandle: function (value) {\n            if (this._dragging || !this.updateHandleTransform) {\n                return;\n            }\n\n            var axisPointerModel = this._axisPointerModel;\n            var zr = this._api.getZr();\n            var handle = this._handle;\n            var handleModel = axisPointerModel.getModel('handle');\n\n            var status = axisPointerModel.get('status');\n            if (!handleModel.get('show') || !status || status === 'hide') {\n                handle && zr.remove(handle);\n                this._handle = null;\n                return;\n            }\n\n            var isInit;\n            if (!this._handle) {\n                isInit = true;\n                handle = this._handle = graphic.createIcon(\n                    handleModel.get('icon'), \n                    {\n                        cursor: 'move',\n                        draggable: true,\n                        onmousemove: function (e) {\n                            // Fot mobile devicem, prevent screen slider on the button.\n                            eventTool.stop(e.event);\n                        },\n                        onmousedown: bind(this._onHandleDragMove, this, 0, 0),\n                        drift: bind(this._onHandleDragMove, this),\n                        ondragend: bind(this._onHandleDragEnd, this)\n                    }\n                );\n                zr.add(handle);\n            }\n\n            updateMandatoryProps(handle, axisPointerModel, false);\n\n            // update style\n            var includeStyles = [\n                'color', 'borderColor', 'borderWidth', 'opacity',\n                'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'\n            ];\n            handle.setStyle(handleModel.getItemStyle(null, includeStyles));\n\n            // update position\n            var handleSize = handleModel.get('size');\n            if (!zrUtil.isArray(handleSize)) {\n                handleSize = [handleSize, handleSize];\n            }\n            handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);\n\n            throttle.createOrUpdate(\n                this,\n                '_doDispatchAxisPointer',\n                handleModel.get('throttle') || 0,\n                'fixRate'\n            );\n\n            this._moveHandleToValue(value, isInit);\n        },\n\n        /**\n         * @private\n         */\n        _moveHandleToValue: function (value, isInit) {\n            updateProps(\n                this._axisPointerModel,\n                !isInit && this._moveAnimation,\n                this._handle,\n                getHandleTransProps(this.getHandleTransform(\n                    value, this._axisModel, this._axisPointerModel\n                ))\n            );\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragMove: function (dx, dy) {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            this._dragging = true;\n\n            // Persistent for throttle.\n            var trans = this.updateHandleTransform(\n                getHandleTransProps(handle),\n                [dx, dy],\n                this._axisModel,\n                this._axisPointerModel\n            );\n            this._payloadInfo = trans;\n\n            handle.stopAnimation();\n            handle.attr(getHandleTransProps(trans));\n            get(handle).lastProp = null;\n\n            this._doDispatchAxisPointer();\n        },\n\n        /**\n         * Throttled method.\n         * @private\n         */\n        _doDispatchAxisPointer: function () {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var payloadInfo = this._payloadInfo;\n            var axisModel = this._axisModel;\n            this._api.dispatchAction({\n                type: 'updateAxisPointer',\n                x: payloadInfo.cursorPoint[0],\n                y: payloadInfo.cursorPoint[1],\n                tooltipOption: payloadInfo.tooltipOption,\n                axesInfo: [{\n                    axisDim: axisModel.axis.dim,\n                    axisIndex: axisModel.componentIndex\n                }]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragEnd: function (moveAnimation) {\n            this._dragging = false;\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var value = this._axisPointerModel.get('value');\n            // Consider snap or categroy axis, handle may be not consistent with\n            // axisPointer. So move handle to align the exact value position when\n            // drag ended.\n            this._moveHandleToValue(value);\n\n            // For the effect: tooltip will be shown when finger holding on handle\n            // button, and will be hidden after finger left handle button.\n            this._api.dispatchAction({\n                type: 'hideTip'\n            });\n        },\n\n        /**\n         * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {number} value\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0}\n         */\n        getHandleTransform: null,\n\n        /**\n         * * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {Object} transform {position, rotation}\n         * @param {Array.<number>} delta [dx, dy]\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}\n         */\n        updateHandleTransform: null,\n\n        /**\n         * @private\n         */\n        clear: function (api) {\n            this._lastValue = null;\n            this._lastStatus = null;\n\n            var zr = api.getZr();\n            var group = this._group;\n            var handle = this._handle;\n            if (zr && group) {\n                this._lastGraphicKey = null;\n                group && zr.remove(group);\n                handle && zr.remove(handle);\n                this._group = null;\n                this._handle = null;\n                this._payloadInfo = null;\n            }\n        },\n\n        /**\n         * @protected\n         */\n        doClear: function () {\n            // Implemented by sub-class if necessary.\n        },\n\n        /**\n         * @protected\n         * @param {Array.<number>} xy\n         * @param {Array.<number>} wh\n         * @param {number} [xDimIndex=0] or 1\n         */\n        buildLabel: function (xy, wh, xDimIndex) {\n            xDimIndex = xDimIndex || 0;\n            return {\n                x: xy[xDimIndex],\n                y: xy[1 - xDimIndex],\n                width: wh[xDimIndex],\n                height: wh[1 - xDimIndex]\n            };\n        }\n    };\n\n    BaseAxisPointer.prototype.constructor = BaseAxisPointer;\n\n\n    function updateProps(animationModel, moveAnimation, el, props) {\n        // Animation optimize.\n        if (!propsEqual(get(el).lastProp, props)) {\n            get(el).lastProp = props;\n            moveAnimation\n                ? graphic.updateProps(el, props, animationModel)\n                : (el.stopAnimation(), el.attr(props));\n        }\n    }\n\n    function propsEqual(lastProps, newProps) {\n        if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {\n            var equals = true;\n            zrUtil.each(newProps, function (item, key) {\n                equals = equals && propsEqual(lastProps[key], item);\n            });\n            return !!equals;\n        }\n        else {\n            return lastProps === newProps;\n        }\n    }\n\n    function updateLabelShowHide(labelEl, axisPointerModel) {\n        labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();\n    }\n\n    function getHandleTransProps(trans) {\n        return {\n            position: trans.position.slice(),\n            rotation: trans.rotation || 0\n        };\n    }\n\n    function updateMandatoryProps(group, axisPointerModel, silent) {\n        var z = axisPointerModel.get('z');\n        var zlevel = axisPointerModel.get('zlevel');\n\n        group && group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n                el.silent = silent;\n            }\n        });\n    }\n\n    clazzUtil.enableClassExtend(BaseAxisPointer);\n\n    module.exports = BaseAxisPointer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/BaseAxisPointer.js\n// module id = 1049\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var helper = {};\n\n    /**\n     * @param {Object} opt {labelInside}\n     * @return {Object} {\n     *  position, rotation, labelDirection, labelOffset,\n     *  tickDirection, labelRotate, labelInterval, z2\n     * }\n     */\n    helper.layout = function (gridModel, axisModel, opt) {\n        opt = opt || {};\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n        var idx = {left: 0, right: 1, top: 0, bottom: 1, onZero: 2};\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posBound = axisDim === 'x'\n            ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset]\n            : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];\n\n        if (axis.onZero) {\n            var otherAxis = grid.getAxis(axisDim === 'x' ? 'y' : 'x', axis.onZeroAxisIndex);\n            var onZeroCoord = otherAxis.toGlobalCoord(otherAxis.dataToCoord(0));\n            posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0],\n            axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        layout.labelOffset = axis.onZero ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;\n\n        if (axisModel.get('axisTick.inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotate = axisModel.get('axisLabel.rotate');\n        layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    };\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axis/cartesianAxisHelper.js\n// module id = 1050\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Model = require('../../model/Model');\n\n    var LegendModel = require('../../echarts').extendComponentModel({\n\n        type: 'legend.plain',\n\n        dependencies: ['series'],\n\n        layoutMode: {\n            type: 'box',\n            // legend.width/height are maxWidth/maxHeight actually,\n            // whereas realy width/height is calculated by its content.\n            // (Setting {left: 10, right: 10} does not make sense).\n            // So consider the case:\n            // `setOption({legend: {left: 10});`\n            // then `setOption({legend: {right: 10});`\n            // The previous `left` should be cleared by setting `ignoreSize`.\n            ignoreSize: true\n        },\n\n        init: function (option, parentModel, ecModel) {\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            option.selected = option.selected || {};\n        },\n\n        mergeOption: function (option) {\n            LegendModel.superCall(this, 'mergeOption', option);\n        },\n\n        optionUpdated: function () {\n            this._updateData(this.ecModel);\n\n            var legendData = this._data;\n\n            // If selectedMode is single, try to select one\n            if (legendData[0] && this.get('selectedMode') === 'single') {\n                var hasSelected = false;\n                // If has any selected in option.selected\n                for (var i = 0; i < legendData.length; i++) {\n                    var name = legendData[i].get('name');\n                    if (this.isSelected(name)) {\n                        // Force to unselect others\n                        this.select(name);\n                        hasSelected = true;\n                        break;\n                    }\n                }\n                // Try select the first if selectedMode is single\n                !hasSelected && this.select(legendData[0].get('name'));\n            }\n        },\n\n        _updateData: function (ecModel) {\n            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\n                // Can be string or number\n                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\n                    dataItem = {\n                        name: dataItem\n                    };\n                }\n                return new Model(dataItem, this, this.ecModel);\n            }, this);\n            this._data = legendData;\n\n            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\n                return series.name;\n            });\n            ecModel.eachSeries(function (seriesModel) {\n                if (seriesModel.legendDataProvider) {\n                    var data = seriesModel.legendDataProvider();\n                    availableNames = availableNames.concat(data.mapArray(data.getName));\n                }\n            });\n            /**\n             * @type {Array.<string>}\n             * @private\n             */\n            this._availableNames = availableNames;\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Model>}\n         */\n        getData: function () {\n            return this._data;\n        },\n\n        /**\n         * @param {string} name\n         */\n        select: function (name) {\n            var selected = this.option.selected;\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                var data = this._data;\n                zrUtil.each(data, function (dataItem) {\n                    selected[dataItem.get('name')] = false;\n                });\n            }\n            selected[name] = true;\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            if (this.get('selectedMode') !== 'single') {\n                this.option.selected[name] = false;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var selected = this.option.selected;\n            // Default is true\n            if (!selected.hasOwnProperty(name)) {\n                selected[name] = true;\n            }\n            this[selected[name] ? 'unSelect' : 'select'](name);\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var selected = this.option.selected;\n            return !(selected.hasOwnProperty(name) && !selected[name])\n                && zrUtil.indexOf(this._availableNames, name) >= 0;\n        },\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 4,\n            show: true,\n\n            // 布局方式，默认为水平布局，可选为：\n            // 'horizontal' | 'vertical'\n            orient: 'horizontal',\n\n            left: 'center',\n            // right: 'center',\n\n            top: 0,\n            // bottom: null,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right'\n            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\n            align: 'auto',\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            // 图例边框颜色\n            borderColor: '#ccc',\n            borderRadius: 0,\n            // 图例边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n            // 图例内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n            // 各个item之间的间隔，单位px，默认为10，\n            // 横向布局时为水平间隔，纵向布局时为纵向间隔\n            itemGap: 10,\n            // 图例图形宽度\n            itemWidth: 25,\n            // 图例图形高度\n            itemHeight: 14,\n\n            // 图例关闭时候的颜色\n            inactiveColor: '#ccc',\n\n            textStyle: {\n                // 图例文字颜色\n                color: '#333'\n            },\n            // formatter: '',\n            // 选择模式，默认开启图例开关\n            selectedMode: true,\n            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\n            // selected: null,\n            // 图例内容（详见legend.data，数组中每一项代表一个item\n            // data: [],\n\n            // Tooltip 相关配置\n            tooltip: {\n                show: false\n            }\n        }\n    });\n\n    module.exports = LegendModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/LegendModel.js\n// module id = 1051\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var symbolCreator = require('../../util/symbol');\n    var graphic = require('../../util/graphic');\n    var listComponentHelper = require('../helper/listComponent');\n    var layoutUtil = require('../../util/layout');\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var Group = graphic.Group;\n\n    module.exports = require('../../echarts').extendComponentView({\n\n        type: 'legend.plain',\n\n        newlineDisabled: false,\n\n        /**\n         * @override\n         */\n        init: function () {\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._contentGroup = new Group());\n\n            /**\n             * @private\n             * @type {module:zrender/Element}\n             */\n            this._backgroundEl;\n        },\n\n        /**\n         * @protected\n         */\n        getContentGroup: function () {\n            return this._contentGroup;\n        },\n\n        /**\n         * @override\n         */\n        render: function (legendModel, ecModel, api) {\n\n            this.resetInner();\n\n            if (!legendModel.get('show', true)) {\n                return;\n            }\n\n            var itemAlign = legendModel.get('align');\n            if (!itemAlign || itemAlign === 'auto') {\n                itemAlign = (\n                    legendModel.get('left') === 'right'\n                    && legendModel.get('orient') === 'vertical'\n                ) ? 'right' : 'left';\n            }\n\n            this.renderInner(itemAlign, legendModel, ecModel, api);\n\n            // Perform layout.\n            var positionInfo = legendModel.getBoxLayoutParams();\n            var viewportSize = {width: api.getWidth(), height: api.getHeight()};\n            var padding = legendModel.get('padding');\n\n            var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n            var mainRect = this.layoutInner(legendModel, itemAlign, maxSize);\n\n            // Place mainGroup, based on the calculated `mainRect`.\n            var layoutRect = layoutUtil.getLayoutRect(\n                zrUtil.defaults({width: mainRect.width, height: mainRect.height}, positionInfo),\n                viewportSize,\n                padding\n            );\n            this.group.attr('position', [layoutRect.x - mainRect.x, layoutRect.y - mainRect.y]);\n\n            // Render background after group is layout.\n            this.group.add(\n                this._backgroundEl = listComponentHelper.makeBackground(mainRect, legendModel)\n            );\n        },\n\n        /**\n         * @protected\n         */\n        resetInner: function () {\n            this.getContentGroup().removeAll();\n            this._backgroundEl && this.group.remove(this._backgroundEl);\n        },\n\n        /**\n         * @protected\n         */\n        renderInner: function (itemAlign, legendModel, ecModel, api) {\n            var contentGroup = this.getContentGroup();\n            var legendDrawnMap = zrUtil.createHashMap();\n            var selectMode = legendModel.get('selectedMode');\n\n            each(legendModel.getData(), function (itemModel, dataIndex) {\n                var name = itemModel.get('name');\n\n                // Use empty string or \\n as a newline string\n                if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n                    contentGroup.add(new Group({\n                        newline: true\n                    }));\n                    return;\n                }\n\n                var seriesModel = ecModel.getSeriesByName(name)[0];\n\n                if (legendDrawnMap.get(name)) {\n                    // Have been drawed\n                    return;\n                }\n\n                // Series legend\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var color = data.getVisual('color');\n\n                    // If color is a callback function\n                    if (typeof color === 'function') {\n                        // Use the first data\n                        color = color(seriesModel.getDataParams(0));\n                    }\n\n                    // Using rect symbol defaultly\n                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n                    var symbolType = data.getVisual('symbol');\n\n                    var itemGroup = this._createItem(\n                        name, dataIndex, itemModel, legendModel,\n                        legendSymbolType, symbolType,\n                        itemAlign, color,\n                        selectMode\n                    );\n\n                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\n                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\n\n                    legendDrawnMap.set(name, true);\n                }\n                else {\n                    // Data legend of pie, funnel\n                    ecModel.eachRawSeries(function (seriesModel) {\n                        // In case multiple series has same data name\n                        if (legendDrawnMap.get(name)) {\n                            return;\n                        }\n                        if (seriesModel.legendDataProvider) {\n                            var data = seriesModel.legendDataProvider();\n                            var idx = data.indexOfName(name);\n                            if (idx < 0) {\n                                return;\n                            }\n\n                            var color = data.getItemVisual(idx, 'color');\n\n                            var legendSymbolType = 'roundRect';\n\n                            var itemGroup = this._createItem(\n                                name, dataIndex, itemModel, legendModel,\n                                legendSymbolType, null,\n                                itemAlign, color,\n                                selectMode\n                            );\n\n                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                                // FIXME Should not specify the series name\n                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\n                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\n\n                            legendDrawnMap.set(name, true);\n                        }\n                    }, this);\n                }\n\n                if (__DEV__) {\n                    if (!legendDrawnMap.get(name)) {\n                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n                    }\n                }\n            }, this);\n        },\n\n        _createItem: function (\n            name, dataIndex, itemModel, legendModel,\n            legendSymbolType, symbolType,\n            itemAlign, color, selectMode\n        ) {\n            var itemWidth = legendModel.get('itemWidth');\n            var itemHeight = legendModel.get('itemHeight');\n            var inactiveColor = legendModel.get('inactiveColor');\n\n            var isSelected = legendModel.isSelected(name);\n            var itemGroup = new Group();\n\n            var textStyleModel = itemModel.getModel('textStyle');\n\n            var itemIcon = itemModel.get('icon');\n\n            var tooltipModel = itemModel.getModel('tooltip');\n            var legendGlobalTooltipModel = tooltipModel.parentModel;\n\n            // Use user given icon first\n            legendSymbolType = itemIcon || legendSymbolType;\n            itemGroup.add(symbolCreator.createSymbol(\n                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\n            ));\n\n            // Compose symbols\n            // PENDING\n            if (!itemIcon && symbolType\n                // At least show one symbol, can't be all none\n                && ((symbolType !== legendSymbolType) || symbolType == 'none')\n            ) {\n                var size = itemHeight * 0.8;\n                if (symbolType === 'none') {\n                    symbolType = 'circle';\n                }\n                // Put symbol in the center\n                itemGroup.add(symbolCreator.createSymbol(\n                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\n                    isSelected ? color : inactiveColor\n                ));\n            }\n\n            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n            var textAlign = itemAlign;\n\n            var formatter = legendModel.get('formatter');\n            var content = name;\n            if (typeof formatter === 'string' && formatter) {\n                content = formatter.replace('{name}', name != null ? name : '');\n            }\n            else if (typeof formatter === 'function') {\n                content = formatter(name);\n            }\n\n            itemGroup.add(new graphic.Text({\n                style: graphic.setTextStyle({}, textStyleModel, {\n                    text: content,\n                    x: textX,\n                    y: itemHeight / 2,\n                    textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n                    textAlign: textAlign,\n                    textVerticalAlign: 'middle'\n                })\n            }));\n\n            // Add a invisible rect to increase the area of mouse hover\n            var hitRect = new graphic.Rect({\n                shape: itemGroup.getBoundingRect(),\n                invisible: true,\n                tooltip: tooltipModel.get('show') ? zrUtil.extend({\n                    content: name,\n                    // Defaul formatter\n                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\n                        return name;\n                    },\n                    formatterParams: {\n                        componentType: 'legend',\n                        legendIndex: legendModel.componentIndex,\n                        name: name,\n                        $vars: ['name']\n                    }\n                }, tooltipModel.option) : null\n            });\n            itemGroup.add(hitRect);\n\n            itemGroup.eachChild(function (child) {\n                child.silent = true;\n            });\n\n            hitRect.silent = !selectMode;\n\n            this.getContentGroup().add(itemGroup);\n\n            graphic.setHoverStyle(itemGroup);\n\n            itemGroup.__legendDataIndex = dataIndex;\n\n            return itemGroup;\n        },\n\n        /**\n         * @protected\n         */\n        layoutInner: function (legendModel, itemAlign, maxSize) {\n            var contentGroup = this.getContentGroup();\n\n            // Place items in contentGroup.\n            layoutUtil.box(\n                legendModel.get('orient'),\n                contentGroup,\n                legendModel.get('itemGap'),\n                maxSize.width,\n                maxSize.height\n            );\n\n            var contentRect = contentGroup.getBoundingRect();\n            contentGroup.attr('position', [-contentRect.x, -contentRect.y]);\n\n            return this.group.getBoundingRect();\n        }\n\n    });\n\n    function dispatchSelectAction(name, api) {\n        api.dispatchAction({\n            type: 'legendToggleSelect',\n            name: name\n        });\n    }\n\n    function dispatchHighlightAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'highlight',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    function dispatchDownplayAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'downplay',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/LegendView.js\n// module id = 1052\n// module chunks = 0 1 2","/**\n * Box selection tool.\n *\n * @module echarts/component/helper/BrushController\n */\n\n\n\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var interactionMutex = require('./interactionMutex');\n    var DataDiffer = require('../../data/DataDiffer');\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var map = zrUtil.map;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathPow = Math.pow;\n\n    var COVER_Z = 10000;\n    var UNSELECT_THRESHOLD = 6;\n    var MIN_RESIZE_LINE_WIDTH = 6;\n    var MUTEX_RESOURCE_KEY = 'globalPan';\n\n    var DIRECTION_MAP = {\n        w: [0, 0],\n        e: [0, 1],\n        n: [1, 0],\n        s: [1, 1]\n    };\n    var CURSOR_MAP = {\n        w: 'ew',\n        e: 'ew',\n        n: 'ns',\n        s: 'ns',\n        ne: 'nesw',\n        sw: 'nesw',\n        nw: 'nwse',\n        se: 'nwse'\n    };\n    var DEFAULT_BRUSH_OPT = {\n        brushStyle: {\n            lineWidth: 2,\n            stroke: 'rgba(0,0,0,0.3)',\n            fill: 'rgba(0,0,0,0.1)'\n        },\n        transformable: true,\n        brushMode: 'single',\n        removeOnClick: false\n    };\n\n    var baseUID = 0;\n\n    /**\n     * @alias module:echarts/component/helper/BrushController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     * @event module:echarts/component/helper/BrushController#brush\n     *        params:\n     *            areas: Array.<Array>, coord relates to container group,\n     *                                    If no container specified, to global.\n     *            opt {\n     *                isEnd: boolean,\n     *                removeOnClick: boolean\n     *            }\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function BrushController(zr) {\n\n        if (__DEV__) {\n            zrUtil.assert(zr);\n        }\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:zrender/zrender~ZRender}\n         * @private\n         */\n        this._zr = zr;\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *     'line', 'rect', 'polygon' or false\n         *     If passing false/null/undefined, disable brush.\n         *     If passing 'auto', determined by panel.defaultBrushType\n         * @private\n         * @type {string}\n         */\n        this._brushType;\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *\n         * @private\n         * @type {Object}\n         */\n        this._brushOption;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._panels;\n\n        /**\n         * @private\n         * @type {Array.<nubmer>}\n         */\n        this._track = [];\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._dragging;\n\n        /**\n         * @private\n         * @type {Array}\n         */\n        this._covers = [];\n\n        /**\n         * @private\n         * @type {moudule:zrender/container/Group}\n         */\n        this._creatingCover;\n\n        /**\n         * `true` means global panel\n         * @private\n         * @type {module:zrender/container/Group|boolean}\n         */\n        this._creatingPanel;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._enableGlobalPan;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        if (__DEV__) {\n            this._mounted;\n        }\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._uid = 'brushController_' + baseUID++;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._handlers = {};\n        each(mouseHandlers, function (handler, eventName) {\n            this._handlers[eventName] = zrUtil.bind(handler, this);\n        }, this);\n    }\n\n    BrushController.prototype = {\n\n        constructor: BrushController,\n\n        /**\n         * If set to null/undefined/false, select disabled.\n         * @param {Object} brushOption\n         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n         *                          If passing false/null/undefined, disable brush.\n         *                          If passing 'auto', determined by panel.defaultBrushType.\n         *                              ('auto' can not be used in global panel)\n         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n         * @param {boolean} [brushOption.transformable=true]\n         * @param {boolean} [brushOption.removeOnClick=false]\n         * @param {Object} [brushOption.brushStyle]\n         * @param {number} [brushOption.brushStyle.width]\n         * @param {number} [brushOption.brushStyle.lineWidth]\n         * @param {string} [brushOption.brushStyle.stroke]\n         * @param {string} [brushOption.brushStyle.fill]\n         * @param {number} [brushOption.z]\n         */\n        enableBrush: function (brushOption) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            this._brushType && doDisableBrush(this);\n            brushOption.brushType && doEnableBrush(this, brushOption);\n\n            return this;\n        },\n\n        /**\n         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n         *        Each items: {\n         *            panelId, // mandatory.\n         *            clipPath, // mandatory. function.\n         *            isTargetByCursor, // mandatory. function.\n         *            defaultBrushType, // optional, only used when brushType is 'auto'.\n         *            getLinearBrushOtherExtent, // optional. function.\n         *        }\n         */\n        setPanels: function (panelOpts) {\n            if (panelOpts && panelOpts.length) {\n                var panels = this._panels = {};\n                zrUtil.each(panelOpts, function (panelOpts) {\n                    panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n                });\n            }\n            else {\n                this._panels = null;\n            }\n            return this;\n        },\n\n        /**\n         * @param {Object} [opt]\n         * @return {boolean} [opt.enableGlobalPan=false]\n         */\n        mount: function (opt) {\n            opt = opt || {};\n\n            if (__DEV__) {\n                this._mounted = true; // should be at first.\n            }\n\n            this._enableGlobalPan = opt.enableGlobalPan;\n\n            var thisGroup = this.group;\n            this._zr.add(thisGroup);\n\n            thisGroup.attr({\n                position: opt.position || [0, 0],\n                rotation: opt.rotation || 0,\n                scale: opt.scale || [1, 1]\n            });\n            this._transform = thisGroup.getLocalTransform();\n\n            return this;\n        },\n\n        eachCover: function (cb, context) {\n            each(this._covers, cb, context);\n        },\n\n        /**\n         * Update covers.\n         * @param {Array.<Object>} brushOptionList Like:\n         *        [\n         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n         *            ...\n         *        ]\n         *        `brushType` is required in each cover info. (can not be 'auto')\n         *        `id` is not mandatory.\n         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n         *        If brushOptionList is null/undefined, all covers removed.\n         */\n        updateCovers: function (brushOptionList) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n            });\n\n            var tmpIdPrefix = '\\0-brush-index-';\n            var oldCovers = this._covers;\n            var newCovers = this._covers = [];\n            var controller = this;\n            var creatingCover = this._creatingCover;\n\n            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\n                .add(addOrUpdate)\n                .update(addOrUpdate)\n                .remove(remove)\n                .execute();\n\n            return this;\n\n            function getKey(brushOption, index) {\n                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\n                    + '-' + brushOption.brushType;\n            }\n\n            function oldGetKey(cover, index) {\n                return getKey(cover.__brushOption, index);\n            }\n\n            function addOrUpdate(newIndex, oldIndex) {\n                var newBrushOption = brushOptionList[newIndex];\n                // Consider setOption in event listener of brushSelect,\n                // where updating cover when creating should be forbiden.\n                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n                    newCovers[newIndex] = oldCovers[oldIndex];\n                }\n                else {\n                    var cover = newCovers[newIndex] = oldIndex != null\n                        ? (\n                            oldCovers[oldIndex].__brushOption = newBrushOption,\n                            oldCovers[oldIndex]\n                        )\n                        : endCreating(controller, createCover(controller, newBrushOption));\n                    updateCoverAfterCreation(controller, cover);\n                }\n            }\n\n            function remove(oldIndex) {\n                if (oldCovers[oldIndex] !== creatingCover) {\n                    controller.group.remove(oldCovers[oldIndex]);\n                }\n            }\n        },\n\n        unmount: function () {\n            if (__DEV__) {\n                if (!this._mounted) {\n                    return;\n                }\n            }\n\n            this.enableBrush(false);\n\n            // container may 'removeAll' outside.\n            clearCovers(this);\n            this._zr.remove(this.group);\n\n            if (__DEV__) {\n                this._mounted = false; // should be at last.\n            }\n\n            return this;\n        },\n\n        dispose: function () {\n            this.unmount();\n            this.off();\n        }\n    };\n\n    zrUtil.mixin(BrushController, Eventful);\n\n    function doEnableBrush(controller, brushOption) {\n        var zr = controller._zr;\n\n        // Consider roam, which takes globalPan too.\n        if (!controller._enableGlobalPan) {\n            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n        }\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.on(eventName, handler);\n        });\n\n        controller._brushType = brushOption.brushType;\n        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    }\n\n    function doDisableBrush(controller) {\n        var zr = controller._zr;\n\n        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.off(eventName, handler);\n        });\n\n        controller._brushType = controller._brushOption = null;\n    }\n\n    function createCover(controller, brushOption) {\n        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n        cover.__brushOption = brushOption;\n        updateZ(cover, brushOption);\n        controller.group.add(cover);\n        return cover;\n    }\n\n    function endCreating(controller, creatingCover) {\n        var coverRenderer = getCoverRenderer(creatingCover);\n        if (coverRenderer.endCreating) {\n            coverRenderer.endCreating(controller, creatingCover);\n            updateZ(creatingCover, creatingCover.__brushOption);\n        }\n        return creatingCover;\n    }\n\n    function updateCoverShape(controller, cover) {\n        var brushOption = cover.__brushOption;\n        getCoverRenderer(cover).updateCoverShape(\n            controller, cover, brushOption.range, brushOption\n        );\n    }\n\n    function updateZ(cover, brushOption) {\n        var z = brushOption.z;\n        z == null && (z = COVER_Z);\n        cover.traverse(function (el) {\n            el.z = z;\n            el.z2 = z; // Consider in given container.\n        });\n    }\n\n    function updateCoverAfterCreation(controller, cover) {\n        getCoverRenderer(cover).updateCommon(controller, cover);\n        updateCoverShape(controller, cover);\n    }\n\n    function getCoverRenderer(cover) {\n        return coverRenderers[cover.__brushOption.brushType];\n    }\n\n    // return target panel or `true` (means global panel)\n    function getPanelByPoint(controller, e, localCursorPoint) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panel;\n        var transform = controller._transform;\n        each(panels, function (pn) {\n            pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n        });\n        return panel;\n    }\n\n    // Return a panel or true\n    function getPanelByCover(controller, cover) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panelId = cover.__brushOption.panelId;\n        // User may give cover without coord sys info,\n        // which is then treated as global panel.\n        return panelId != null ? panels[panelId] : true;\n    }\n\n    function clearCovers(controller) {\n        var covers = controller._covers;\n        var originalLength = covers.length;\n        each(covers, function (cover) {\n            controller.group.remove(cover);\n        }, controller);\n        covers.length = 0;\n\n        return !!originalLength;\n    }\n\n    function trigger(controller, opt) {\n        var areas = map(controller._covers, function (cover) {\n            var brushOption = cover.__brushOption;\n            var range = zrUtil.clone(brushOption.range);\n            return {\n                brushType: brushOption.brushType,\n                panelId: brushOption.panelId,\n                range: range\n            };\n        });\n\n        controller.trigger('brush', areas, {\n            isEnd: !!opt.isEnd,\n            removeOnClick: !!opt.removeOnClick\n        });\n    }\n\n    function shouldShowCover(controller) {\n        var track = controller._track;\n\n        if (!track.length) {\n            return false;\n        }\n\n        var p2 = track[track.length - 1];\n        var p1 = track[0];\n        var dx = p2[0] - p1[0];\n        var dy = p2[1] - p1[1];\n        var dist = mathPow(dx * dx + dy * dy, 0.5);\n\n        return dist > UNSELECT_THRESHOLD;\n    }\n\n    function getTrackEnds(track) {\n        var tail = track.length - 1;\n        tail < 0 && (tail = 0);\n        return [track[0], track[tail]];\n    }\n\n    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n        var cover = new graphic.Group();\n\n        cover.add(new graphic.Rect({\n            name: 'main',\n            style: makeStyle(brushOption),\n            silent: true,\n            draggable: true,\n            cursor: 'move',\n            drift: curry(doDrift, controller, cover, 'nswe'),\n            ondragend: curry(trigger, controller, {isEnd: true})\n        }));\n\n        each(\n            edgeNames,\n            function (name) {\n                cover.add(new graphic.Rect({\n                    name: name,\n                    style: {opacity: 0},\n                    draggable: true,\n                    silent: true,\n                    invisible: true,\n                    drift: curry(doDrift, controller, cover, name),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            }\n        );\n\n        return cover;\n    }\n\n    function updateBaseRect(controller, cover, localRange, brushOption) {\n        var lineWidth = brushOption.brushStyle.lineWidth || 0;\n        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n        var x = localRange[0][0];\n        var y = localRange[1][0];\n        var xa = x - lineWidth / 2;\n        var ya = y - lineWidth / 2;\n        var x2 = localRange[0][1];\n        var y2 = localRange[1][1];\n        var x2a = x2 - handleSize + lineWidth / 2;\n        var y2a = y2 - handleSize + lineWidth / 2;\n        var width = x2 - x;\n        var height = y2 - y;\n        var widtha = width + lineWidth;\n        var heighta = height + lineWidth;\n\n        updateRectShape(controller, cover, 'main', x, y, width, height);\n\n        if (brushOption.transformable) {\n            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n\n            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n        }\n    }\n\n    function updateCommon(controller, cover) {\n        var brushOption = cover.__brushOption;\n        var transformable = brushOption.transformable;\n\n        var mainEl = cover.childAt(0);\n        mainEl.useStyle(makeStyle(brushOption));\n        mainEl.attr({\n            silent: !transformable,\n            cursor: transformable ? 'move' : 'default'\n        });\n\n        each(\n            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\n            function (name) {\n                var el = cover.childOfName(name);\n                var globalDir = getGlobalDirection(controller, name);\n\n                el && el.attr({\n                    silent: !transformable,\n                    invisible: !transformable,\n                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n                });\n            }\n        );\n    }\n\n    function updateRectShape(controller, cover, name, x, y, w, h) {\n        var el = cover.childOfName(name);\n        el && el.setShape(pointsToRect(\n            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\n        ));\n    }\n\n    function makeStyle(brushOption) {\n        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\n    }\n\n    function formatRectRange(x, y, x2, y2) {\n        var min = [mathMin(x, x2), mathMin(y, y2)];\n        var max = [mathMax(x, x2), mathMax(y, y2)];\n\n        return [\n            [min[0], max[0]], // x range\n            [min[1], max[1]] // y range\n        ];\n    }\n\n    function getTransform(controller) {\n        return graphic.getTransform(controller.group);\n    }\n\n    function getGlobalDirection(controller, localDirection) {\n        if (localDirection.length > 1) {\n            localDirection = localDirection.split('');\n            var globalDir = [\n                getGlobalDirection(controller, localDirection[0]),\n                getGlobalDirection(controller, localDirection[1])\n            ];\n            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n            return globalDir.join('');\n        }\n        else {\n            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\n            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\n            var globalDir = graphic.transformDirection(\n                map[localDirection], getTransform(controller)\n            );\n            return inverseMap[globalDir];\n        }\n    }\n\n    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n        var brushOption = cover.__brushOption;\n        var rectRange = toRectRange(brushOption.range);\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(name.split(''), function (namePart) {\n            var ind = DIRECTION_MAP[namePart];\n            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n        });\n\n        brushOption.range = fromRectRange(formatRectRange(\n            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\n        ));\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function driftPolygon(controller, cover, dx, dy, e) {\n        var range = cover.__brushOption.range;\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(range, function (point) {\n            point[0] += localDelta[0];\n            point[1] += localDelta[1];\n        });\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function toLocalDelta(controller, dx, dy) {\n        var thisGroup = controller.group;\n        var localD = thisGroup.transformCoordToLocal(dx, dy);\n        var localZero = thisGroup.transformCoordToLocal(0, 0);\n\n        return [localD[0] - localZero[0], localD[1] - localZero[1]];\n    }\n\n    function clipByPanel(controller, cover, data) {\n        var panel = getPanelByCover(controller, cover);\n\n        return (panel && panel !== true)\n            ? panel.clipPath(data, controller._transform)\n            : zrUtil.clone(data);\n    }\n\n    function pointsToRect(points) {\n        var xmin = mathMin(points[0][0], points[1][0]);\n        var ymin = mathMin(points[0][1], points[1][1]);\n        var xmax = mathMax(points[0][0], points[1][0]);\n        var ymax = mathMax(points[0][1], points[1][1]);\n\n        return {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin\n        };\n    }\n\n    function resetCursor(controller, e, localCursorPoint) {\n        // Check active\n        if (!controller._brushType) {\n            return;\n        }\n\n        var zr = controller._zr;\n        var covers = controller._covers;\n        var currPanel = getPanelByPoint(controller, e, localCursorPoint);\n\n        // Check whether in covers.\n        if (!controller._dragging) {\n            for (var i = 0; i < covers.length; i++) {\n                var brushOption = covers[i].__brushOption;\n                if (currPanel\n                    && (currPanel === true || brushOption.panelId === currPanel.panelId)\n                    && coverRenderers[brushOption.brushType].contain(\n                        covers[i], localCursorPoint[0], localCursorPoint[1]\n                    )\n                ) {\n                    // Use cursor style set on cover.\n                    return;\n                }\n            }\n        }\n\n        currPanel && zr.setCursorStyle('crosshair');\n    }\n\n    function preventDefault(e) {\n        var rawE = e.event;\n        rawE.preventDefault && rawE.preventDefault();\n    }\n\n    function mainShapeContain(cover, x, y) {\n        return cover.childOfName('main').contain(x, y);\n    }\n\n    function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n        var creatingCover = controller._creatingCover;\n        var panel = controller._creatingPanel;\n        var thisBrushOption = controller._brushOption;\n        var eventParams;\n\n        controller._track.push(localCursorPoint.slice());\n\n        if (shouldShowCover(controller) || creatingCover) {\n\n            if (panel && !creatingCover) {\n                thisBrushOption.brushMode === 'single' && clearCovers(controller);\n                var brushOption = zrUtil.clone(thisBrushOption);\n                brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n                brushOption.panelId = panel === true ? null : panel.panelId;\n                creatingCover = controller._creatingCover = createCover(controller, brushOption);\n                controller._covers.push(creatingCover);\n            }\n\n            if (creatingCover) {\n                var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n                var coverBrushOption = creatingCover.__brushOption;\n\n                coverBrushOption.range = coverRenderer.getCreatingRange(\n                    clipByPanel(controller, creatingCover, controller._track)\n                );\n\n                if (isEnd) {\n                    endCreating(controller, creatingCover);\n                    coverRenderer.updateCommon(controller, creatingCover);\n                }\n\n                updateCoverShape(controller, creatingCover);\n\n                eventParams = {isEnd: isEnd};\n            }\n        }\n        else if (\n            isEnd\n            && thisBrushOption.brushMode === 'single'\n            && thisBrushOption.removeOnClick\n        ) {\n            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n            // But a single click do not clear covers, because user may have casual\n            // clicks (for example, click on other component and do not expect covers\n            // disappear).\n            // Only some cover removed, trigger action, but not every click trigger action.\n            if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n                eventParams = {isEnd: isEnd, removeOnClick: true};\n            }\n        }\n\n        return eventParams;\n    }\n\n    function determineBrushType(brushType, panel) {\n        if (brushType === 'auto') {\n            if (__DEV__) {\n                zrUtil.assert(\n                    panel && panel.defaultBrushType,\n                    'MUST have defaultBrushType when brushType is \"atuo\"'\n                );\n            }\n            return panel.defaultBrushType;\n        }\n        return brushType;\n    }\n\n    var mouseHandlers = {\n\n        mousedown: function (e) {\n            if (this._dragging) {\n                // In case some browser do not support globalOut,\n                // and release mose out side the browser.\n                handleDragEnd.call(this, e);\n            }\n            else if (!e.target || !e.target.draggable) {\n\n                preventDefault(e);\n\n                var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n                this._creatingCover = null;\n                var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n                if (panel) {\n                    this._dragging = true;\n                    this._track = [localCursorPoint.slice()];\n                }\n            }\n        },\n\n        mousemove: function (e) {\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            resetCursor(this, e, localCursorPoint);\n\n            if (this._dragging) {\n\n                preventDefault(e);\n\n                var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n\n                eventParams && trigger(this, eventParams);\n            }\n        },\n\n        mouseup: handleDragEnd //,\n\n        // FIXME\n        // in tooltip, globalout should not be triggered.\n        // globalout: handleDragEnd\n    };\n\n    function handleDragEnd(e) {\n        if (this._dragging) {\n\n            preventDefault(e);\n\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n            var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);\n\n            this._dragging = false;\n            this._track = [];\n            this._creatingCover = null;\n\n            // trigger event shoule be at final, after procedure will be nested.\n            eventParams && trigger(this, eventParams);\n        }\n    }\n\n    /**\n     * key: brushType\n     * @type {Object}\n     */\n    var coverRenderers = {\n\n        lineX: getLineRenderer(0),\n\n        lineY: getLineRenderer(1),\n\n        rect: {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            return range;\n                        },\n                        function (range) {\n                            return range;\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                updateBaseRect(controller, cover, localRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        },\n\n        polygon: {\n            createCover: function (controller, brushOption) {\n                var cover = new graphic.Group();\n\n                // Do not use graphic.Polygon because graphic.Polyline do not close the\n                // border of the shape when drawing, which is a better experience for user.\n                cover.add(new graphic.Polyline({\n                    name: 'main',\n                    style: makeStyle(brushOption),\n                    silent: true\n                }));\n\n                return cover;\n            },\n            getCreatingRange: function (localTrack) {\n                return localTrack;\n            },\n            endCreating: function (controller, cover) {\n                cover.remove(cover.childAt(0));\n                // Use graphic.Polygon close the shape.\n                cover.add(new graphic.Polygon({\n                    name: 'main',\n                    draggable: true,\n                    drift: curry(driftPolygon, controller, cover),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                cover.childAt(0).setShape({\n                    points: clipByPanel(controller, cover, localRange)\n                });\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        }\n    };\n\n    function getLineRenderer(xyIndex) {\n        return {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            var rectRange = [range, [0, 100]];\n                            xyIndex && rectRange.reverse();\n                            return rectRange;\n                        },\n                        function (rectRange) {\n                            return rectRange[xyIndex];\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    [['w', 'e'], ['n', 's']][xyIndex]\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n\n                return [min, max];\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                var otherExtent;\n                // If brushWidth not specified, fit the panel.\n                var panel = getPanelByCover(controller, cover);\n                if (panel !== true && panel.getLinearBrushOtherExtent) {\n                    otherExtent = panel.getLinearBrushOtherExtent(\n                        xyIndex, controller._transform\n                    );\n                }\n                else {\n                    var zr = controller._zr;\n                    otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n                }\n                var rectRange = [localRange, otherExtent];\n                xyIndex && rectRange.reverse();\n\n                updateBaseRect(controller, cover, rectRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        };\n    }\n\n    module.exports = BrushController;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/BrushController.js\n// module id = 1053\n// module chunks = 0 1 2","\n\n    var helper = {};\n\n    var IRRELEVANT_EXCLUDES = {'axisPointer': 1, 'tooltip': 1, 'brush': 1};\n\n    /**\n     * Avoid that: mouse click on a elements that is over geo or graph,\n     * but roam is triggered.\n     */\n    helper.onIrrelevantElement = function (e, api, targetCoordSysModel) {\n        var model = api.getComponentByElement(e.topTarget);\n        // If model is axisModel, it works only if it is injected with coordinateSystem.\n        var coordSys = model && model.coordinateSystem;\n        return model\n            && model !== targetCoordSysModel\n            && !IRRELEVANT_EXCLUDES[model.mainType]\n            && (coordSys && coordSys.model !== targetCoordSysModel);\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/cursorHelper.js\n// module id = 1054\n// module chunks = 0 1 2","/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = require('../../util/graphic');\n    var Symbol = require('./Symbol');\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis'),\n            cursorStyle: seriesModel.get('cursor')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/helper/SymbolDraw.js\n// module id = 1055\n// module chunks = 0 1","/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textHelper = require('../helper/text');\n    var BoundingRect = require('../../core/BoundingRect');\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext2D} ctx\n         * @param  {Object} rect Displayable rect\n         */\n        drawRectText: function (ctx, rect) {\n            var style = this.style;\n\n            rect = style.textRect || rect;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            if (!textHelper.needDrawText(text, style)) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.transformText) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // transformText and textRotation can not be used at the same time.\n            textHelper.renderText(this, ctx, text, style, rect);\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/mixin/RectText.js\n// module id = 1057\n// module chunks = 0 1 2","\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/line.js\n// module id = 1058\n// module chunks = 0 1 2","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/quadratic.js\n// module id = 1059\n// module chunks = 0 1 2","\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/windingLine.js\n// module id = 1060\n// module chunks = 0 1 2","/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var textContain = require('../contain/text');\n    var textHelper = require('./helper/text');\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            // Use props with prefix 'text'.\n            style.fill = style.stroke = style.shadowBlur = style.shadowColor =\n                style.shadowOffsetX = style.shadowOffsetY = null;\n\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (!textHelper.needDrawText(text, style)) {\n                return;\n            }\n\n            this.setTransform(ctx);\n\n            textHelper.renderText(this, ctx, text, style);\n\n            this.restoreTransform(ctx);\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n\n            // Optimize, avoid normalize every time.\n            this.__dirty && textHelper.normalizeTextStyle(style, true);\n\n            if (!this._rect) {\n                var text = style.text;\n                text != null ? (text += '') : (text = '');\n\n                var rect = textContain.getBoundingRect(\n                    style.text + '',\n                    style.font,\n                    style.textAlign,\n                    style.textVerticalAlign,\n                    style.textPadding,\n                    style.rich\n                );\n\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n\n                if (textHelper.getStroke(style.textStroke, style.textStrokeWidth)) {\n                    var w = style.textStrokeWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Text.js\n// module id = 1061\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/LinearGradient.js\n// module id = 1062\n// module chunks = 0 1 2","/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = require('./core/guid');\n    var env = require('./core/env');\n    var zrUtil = require('./core/util');\n\n    var Handler = require('./Handler');\n    var Storage = require('./Storage');\n    var Animation = require('./animation/Animation');\n    var HandlerProxy = require('./dom/HandlerProxy');\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: require('./Painter')\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.6.3';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function (dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function (id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // var start = new Date();\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n            // var end = new Date();\n\n            // var log = document.getElementById('log');\n            // if (log) {\n            //     log.innerHTML = log.innerHTML + '<br>' + (end - start);\n            // }\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/zrender.js\n// module id = 1063\n// module chunks = 0 1 2","// FIXME Better way to pack data in graphic element\n\n\n    require('./axisPointer');\n\n    require('./tooltip/TooltipModel');\n\n    require('./tooltip/TooltipView');\n\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    require('../echarts').registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    require('../echarts').registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/tooltip.js\n// module id = 1064\n// module chunks = 0 1 2","\n\n    // Do not contain scrollable legend, for sake of file size.\n\n    require('./legend/LegendModel');\n    require('./legend/legendAction');\n    require('./legend/LegendView');\n\n    var echarts = require('../echarts');\n    // Series Filter\n    echarts.registerProcessor(require('./legend/legendFilter'));\n\n    require('../model/Component').registerSubTypeDefaulter('legend', function () {\n        // Default 'plain' when no type specified.\n        return 'plain';\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend.js\n// module id = 1065\n// module chunks = 0 1 2","\n\n    require('./toolbox/ToolboxModel');\n    require('./toolbox/ToolboxView');\n\n    require('./toolbox/feature/SaveAsImage');\n    require('./toolbox/feature/MagicType');\n    require('./toolbox/feature/DataView');\n    require('./toolbox/feature/DataZoom');\n    require('./toolbox/feature/Restore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox.js\n// module id = 1067\n// module chunks = 0 1 2","\n\n    var ATTR = '\\0_ec_interaction_mutex';\n\n    var interactionMutex = {\n\n        take: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            store[resourceKey] = userKey;\n        },\n\n        release: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            var uKey = store[resourceKey];\n\n            if (uKey === userKey) {\n                store[resourceKey] = null;\n            }\n        },\n\n        isTaken: function (zr, resourceKey) {\n            return !!getStore(zr)[resourceKey];\n        }\n    };\n\n    function getStore(zr) {\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    /**\n     * payload: {\n     *     type: 'takeGlobalCursor',\n     *     key: 'dataZoomSelect', or 'brush', or ...,\n     *         If no userKey, release global cursor.\n     * }\n     */\n    require('../../echarts').registerAction(\n        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\n        function () {}\n    );\n\n    module.exports = interactionMutex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/interactionMutex.js\n// module id = 1068\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var modelUtil = require('../../util/model');\n    var brushHelper = require('./brushHelper');\n\n    var each = zrUtil.each;\n    var indexOf = zrUtil.indexOf;\n    var curry = zrUtil.curry;\n\n    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\n\n    // FIXME\n    // how to genarialize to more coordinate systems.\n    var INCLUDE_FINDER_MAIN_TYPES = [\n        'grid', 'xAxis', 'yAxis', 'geo', 'graph',\n        'polar', 'radiusAxis', 'angleAxis', 'bmap'\n    ];\n\n    /**\n     * [option in constructor]:\n     * {\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     * }\n     *\n     *\n     * [targetInfo]:\n     *\n     * There can be multiple axes in a single targetInfo. Consider the case\n     * of `grid` component, a targetInfo represents a grid which contains one or more\n     * cartesian and one or more axes. And consider the case of parallel system,\n     * which has multiple axes in a coordinate system.\n     * Can be {\n     *     panelId: ...,\n     *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n     *     coordSyses: all cartesians.\n     *     gridModel: <grid component>\n     *     xAxes: correspond to coordSyses on index\n     *     yAxes: correspond to coordSyses on index\n     * }\n     * or {\n     *     panelId: ...,\n     *     coordSys: <geo coord sys>\n     *     coordSyses: [<geo coord sys>]\n     *     geoModel: <geo component>\n     * }\n     *\n     *\n     * [panelOpt]:\n     *\n     * Make from targetInfo. Input to BrushController.\n     * {\n     *     panelId: ...,\n     *     rect: ...\n     * }\n     *\n     *\n     * [area]:\n     *\n     * Generated by BrushController or user input.\n     * {\n     *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n     *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     *     range: pixel range.\n     *     coordRange: representitive coord range (the first one of coordRanges).\n     *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n     * }\n     */\n\n    /**\n     * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n     *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} [opt]\n     * @param {Array.<string>} [opt.include] include coordinate system types.\n     */\n    function BrushTargetManager(option, ecModel, opt) {\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        var targetInfoList = this._targetInfoList = [];\n        var info = {};\n        var foundCpts = parseFinder(ecModel, option);\n\n        each(targetInfoBuilders, function (builder, type) {\n            if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n                builder(foundCpts, targetInfoList, info);\n            }\n        });\n    }\n\n    var proto = BrushTargetManager.prototype;\n\n    proto.setOutputRanges = function (areas, ecModel) {\n        this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            (area.coordRanges || (area.coordRanges = [])).push(coordRange);\n            // area.coordRange is the first of area.coordRanges\n            if (!area.coordRange) {\n                area.coordRange = coordRange;\n                // In 'category' axis, coord to pixel is not reversible, so we can not\n                // rebuild range by coordRange accrately, which may bring trouble when\n                // brushing only one item. So we use __rangeOffset to rebuilding range\n                // by coordRange. And this it only used in brush component so it is no\n                // need to be adapted to coordRanges.\n                var result = coordConvert[area.brushType](0, coordSys, coordRange);\n                area.__rangeOffset = {\n                    offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n                    xyMinMax: result.xyMinMax\n                };\n            }\n        });\n    };\n\n    proto.matchOutputRanges = function (areas, ecModel, cb) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (targetInfo && targetInfo !== true) {\n                zrUtil.each(\n                    targetInfo.coordSyses,\n                    function (coordSys) {\n                        var result = coordConvert[area.brushType](1, coordSys, area.range);\n                        cb(area, result.values, coordSys, ecModel);\n                    }\n                );\n            }\n        }, this);\n    };\n\n    proto.setInputRanges = function (areas, ecModel) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (__DEV__) {\n                zrUtil.assert(\n                    !targetInfo || targetInfo === true || area.coordRange,\n                    'coordRange must be specified when coord index specified.'\n                );\n                zrUtil.assert(\n                    !targetInfo || targetInfo !== true || area.range,\n                    'range must be specified in global brush.'\n                );\n            }\n\n            area.range = area.range || [];\n\n            // convert coordRange to global range and set panelId.\n            if (targetInfo && targetInfo !== true) {\n                area.panelId = targetInfo.panelId;\n                // (1) area.range shoule always be calculate from coordRange but does\n                // not keep its original value, for the sake of the dataZoom scenario,\n                // where area.coordRange remains unchanged but area.range may be changed.\n                // (2) Only support converting one coordRange to pixel range in brush\n                // component. So do not consider `coordRanges`.\n                // (3) About __rangeOffset, see comment above.\n                var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n                var rangeOffset = area.__rangeOffset;\n                area.range = rangeOffset\n                    ? diffProcessor[area.brushType](\n                        result.values,\n                        rangeOffset.offset,\n                        getScales(result.xyMinMax, rangeOffset.xyMinMax)\n                    )\n                    : result.values;\n            }\n        }, this);\n    };\n\n    proto.makePanelOpts = function (api, getDefaultBrushType) {\n        return zrUtil.map(this._targetInfoList, function (targetInfo) {\n            var rect = targetInfo.getPanelRect();\n            return {\n                panelId: targetInfo.panelId,\n                defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n                clipPath: brushHelper.makeRectPanelClipPath(rect),\n                isTargetByCursor: brushHelper.makeRectIsTargetByCursor(\n                    rect, api, targetInfo.coordSysModel\n                ),\n                getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n            };\n        });\n    };\n\n    proto.controlSeries = function (area, seriesModel, ecModel) {\n        // Check whether area is bound in coord, and series do not belong to that coord.\n        // If do not do this check, some brush (like lineX) will controll all axes.\n        var targetInfo = this.findTargetInfo(area, ecModel);\n        return targetInfo === true || (\n            targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0\n        );\n    };\n\n    /**\n     * If return Object, a coord found.\n     * If reutrn true, global found.\n     * Otherwise nothing found.\n     *\n     * @param {Object} area\n     * @param {Array} targetInfoList\n     * @return {Object|boolean}\n     */\n    proto.findTargetInfo = function (area, ecModel) {\n        var targetInfoList = this._targetInfoList;\n        var foundCpts = parseFinder(ecModel, area);\n\n        for (var i = 0; i < targetInfoList.length; i++) {\n            var targetInfo = targetInfoList[i];\n            var areaPanelId = area.panelId;\n            if (areaPanelId) {\n                if (targetInfo.panelId === areaPanelId) {\n                    return targetInfo;\n                }\n            }\n            else {\n                for (var i = 0; i < targetInfoMatchers.length; i++) {\n                    if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n                        return targetInfo;\n                    }\n                }\n            }\n        }\n\n        return true;\n    };\n\n    function formatMinMax(minMax) {\n        minMax[0] > minMax[1] && minMax.reverse();\n        return minMax;\n    }\n\n    function parseFinder(ecModel, option) {\n        return modelUtil.parseFinder(\n            ecModel, option, {includeMainTypes: INCLUDE_FINDER_MAIN_TYPES}\n        );\n    }\n\n    var targetInfoBuilders = {\n\n        grid: function (foundCpts, targetInfoList) {\n            var xAxisModels = foundCpts.xAxisModels;\n            var yAxisModels = foundCpts.yAxisModels;\n            var gridModels = foundCpts.gridModels;\n            // Remove duplicated.\n            var gridModelMap = zrUtil.createHashMap();\n            var xAxesHas = {};\n            var yAxesHas = {};\n\n            if (!xAxisModels && !yAxisModels && !gridModels) {\n                return;\n            }\n\n            each(xAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n            });\n            each(yAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                yAxesHas[gridModel.id] = true;\n            });\n            each(gridModels, function (gridModel) {\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n                yAxesHas[gridModel.id] = true;\n            });\n\n            gridModelMap.each(function (gridModel) {\n                var grid = gridModel.coordinateSystem;\n                var cartesians = [];\n\n                each(grid.getCartesians(), function (cartesian, index) {\n                    if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0\n                        || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0\n                    ) {\n                        cartesians.push(cartesian);\n                    }\n                });\n                targetInfoList.push({\n                    panelId: 'grid--' + gridModel.id,\n                    gridModel: gridModel,\n                    coordSysModel: gridModel,\n                    // Use the first one as the representitive coordSys.\n                    coordSys: cartesians[0],\n                    coordSyses: cartesians,\n                    getPanelRect: panelRectBuilder.grid,\n                    xAxisDeclared: xAxesHas[gridModel.id],\n                    yAxisDeclared: yAxesHas[gridModel.id]\n                });\n            });\n        },\n\n        geo: function (foundCpts, targetInfoList) {\n            each(foundCpts.geoModels, function (geoModel) {\n                var coordSys = geoModel.coordinateSystem;\n                targetInfoList.push({\n                    panelId: 'geo--' + geoModel.id,\n                    geoModel: geoModel,\n                    coordSysModel: geoModel,\n                    coordSys: coordSys,\n                    coordSyses: [coordSys],\n                    getPanelRect: panelRectBuilder.geo\n                });\n            });\n        }\n    };\n\n    var targetInfoMatchers = [\n\n        // grid\n        function (foundCpts, targetInfo) {\n            var xAxisModel = foundCpts.xAxisModel;\n            var yAxisModel = foundCpts.yAxisModel;\n            var gridModel = foundCpts.gridModel;\n\n            !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n            !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n\n            return gridModel && gridModel === targetInfo.gridModel;\n        },\n\n        // geo\n        function (foundCpts, targetInfo) {\n            var geoModel = foundCpts.geoModel;\n            return geoModel && geoModel === targetInfo.geoModel;\n        }\n    ];\n\n    var panelRectBuilder = {\n\n        grid: function () {\n            // grid is not Transformable.\n            return this.coordSys.grid.getRect().clone();\n        },\n\n        geo: function () {\n            var coordSys = this.coordSys;\n            var rect = coordSys.getBoundingRect().clone();\n            // geo roam and zoom transform\n            rect.applyTransform(graphic.getTransform(coordSys));\n            return rect;\n        }\n    };\n\n    var coordConvert = {\n\n        lineX: curry(axisConvert, 0),\n\n        lineY: curry(axisConvert, 1),\n\n        rect: function (to, coordSys, rangeOrCoordRange) {\n            var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n            var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n            var values = [\n                formatMinMax([xminymin[0], xmaxymax[0]]),\n                formatMinMax([xminymin[1], xmaxymax[1]])\n            ];\n            return {values: values, xyMinMax: values};\n        },\n\n        polygon: function (to, coordSys, rangeOrCoordRange) {\n            var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n            var values = zrUtil.map(rangeOrCoordRange, function (item) {\n                var p = coordSys[COORD_CONVERTS[to]](item);\n                xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n                xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n                xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n                xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n                return p;\n            });\n            return {values: values, xyMinMax: xyMinMax};\n        }\n    };\n\n    function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n        if (__DEV__) {\n            zrUtil.assert(\n                coordSys.type === 'cartesian2d',\n                'lineX/lineY brush is available only in cartesian2d.'\n            );\n        }\n\n        var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n        var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n            return to\n                ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i]))\n                : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n        }));\n        var xyMinMax = [];\n        xyMinMax[axisNameIndex] = values;\n        xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n\n        return {values: values, xyMinMax: xyMinMax};\n    }\n\n    var diffProcessor = {\n        lineX: curry(axisDiffProcessor, 0),\n\n        lineY: curry(axisDiffProcessor, 1),\n\n        rect: function (values, refer, scales) {\n            return [\n                [values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]],\n                [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]\n            ];\n        },\n\n        polygon: function (values, refer, scales) {\n            return zrUtil.map(values, function (item, idx) {\n                return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n            });\n        }\n    };\n\n    function axisDiffProcessor(axisNameIndex, values, refer, scales) {\n        return [\n            values[0] - scales[axisNameIndex] * refer[0],\n            values[1] - scales[axisNameIndex] * refer[1]\n        ];\n    }\n\n    // We have to process scale caused by dataZoom manually,\n    // although it might be not accurate.\n    function getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n        var sizeCurr = getSize(xyMinMaxCurr);\n        var sizeOrigin = getSize(xyMinMaxOrigin);\n        var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n        isNaN(scales[0]) && (scales[0] = 1);\n        isNaN(scales[1]) && (scales[1] = 1);\n        return scales;\n    }\n\n    function getSize(xyMinMax) {\n        return xyMinMax\n            ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]]\n            : [NaN, NaN];\n    }\n\n    module.exports = BrushTargetManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/BrushTargetManager.js\n// module id = 1069\n// module chunks = 0 1 2","\n\n    var cursorHelper = require('./cursorHelper');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n    var graphicUtil = require('../../util/graphic');\n\n    var helper = {};\n\n    helper.makeRectPanelClipPath = function (rect) {\n        rect = normalizeRect(rect);\n        return function (localPoints, transform) {\n            return graphicUtil.clipPointsByRect(localPoints, rect);\n        };\n    };\n\n    helper.makeLinearBrushOtherExtent = function (rect, specifiedXYIndex) {\n        rect = normalizeRect(rect);\n        return function (xyIndex) {\n            var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;\n            var brushWidth = idx ? rect.width : rect.height;\n            var base = idx ? rect.x : rect.y;\n            return [base, base + (brushWidth || 0)];\n        };\n    };\n\n    helper.makeRectIsTargetByCursor = function (rect, api, targetModel) {\n        rect = normalizeRect(rect);\n        return function (e, localCursorPoint, transform) {\n            return rect.contain(localCursorPoint[0], localCursorPoint[1])\n                && !cursorHelper.onIrrelevantElement(e, api, targetModel);\n        };\n    };\n\n    // Consider width/height is negative.\n    function normalizeRect(rect) {\n        return BoundingRect.create(rect);\n    }\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/helper/brushHelper.js\n// module id = 1070\n// module chunks = 0 1 2","\n\n    require('../../model/Component').registerSubTypeDefaulter('dataZoom', function () {\n        // Default 'slider' when no type specified.\n        return 'slider';\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/typeDefaulter.js\n// module id = 1071\n// module chunks = 0 1 2","/**\n * @file Data zoom processor\n */\n\n\n    var echarts = require('../../echarts');\n\n    echarts.registerProcessor(function (ecModel, api) {\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // We calculate window and reset axis here but not in model\n            // init stage and not after action dispatch handler, because\n            // reset should be called after seriesData.restoreData.\n            dataZoomModel.eachTargetAxis(resetSingleAxis);\n\n            // Caution: data zoom filtering is order sensitive when using\n            // percent range and no min/max/scale set on axis.\n            // For example, we have dataZoom definition:\n            // [\n            //      {xAxisIndex: 0, start: 30, end: 70},\n            //      {yAxisIndex: 0, start: 20, end: 80}\n            // ]\n            // In this case, [20, 80] of y-dataZoom should be based on data\n            // that have filtered by x-dataZoom using range of [30, 70],\n            // but should not be based on full raw data. Thus sliding\n            // x-dataZoom will change both ranges of xAxis and yAxis,\n            // while sliding y-dataZoom will only change the range of yAxis.\n            // So we should filter x-axis after reset x-axis immediately,\n            // and then reset y-axis and filter y-axis.\n            dataZoomModel.eachTargetAxis(filterSingleAxis);\n        });\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // Fullfill all of the range props so that user\n            // is able to get them from chart.getOption().\n            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n            var percentRange = axisProxy.getDataPercentWindow();\n            var valueRange = axisProxy.getDataValueWindow();\n\n            dataZoomModel.setRawRange({\n                start: percentRange[0],\n                end: percentRange[1],\n                startValue: valueRange[0],\n                endValue: valueRange[1]\n            }, true);\n        });\n    });\n\n    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n    }\n\n    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n    }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/dataZoomProcessor.js\n// module id = 1072\n// module chunks = 0 1 2","/**\n * @file Data zoom action\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var helper = require('./helper');\n    var echarts = require('../../echarts');\n\n\n    echarts.registerAction('dataZoom', function (payload, ecModel) {\n\n        var linkedNodesFinder = helper.createLinkedNodesFinder(\n            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\n            helper.eachAxisDim,\n            function (model, dimNames) {\n                return model.get(dimNames.axisIndex);\n            }\n        );\n\n        var effectedModels = [];\n\n        ecModel.eachComponent(\n            {mainType: 'dataZoom', query: payload},\n            function (model, index) {\n                effectedModels.push.apply(\n                    effectedModels, linkedNodesFinder(model).nodes\n                );\n            }\n        );\n\n        zrUtil.each(effectedModels, function (dataZoomModel, index) {\n            dataZoomModel.setRawRange({\n                start: payload.start,\n                end: payload.end,\n                startValue: payload.startValue,\n                endValue: payload.endValue\n            });\n        });\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/dataZoomAction.js\n// module id = 1073\n// module chunks = 0 1 2","/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var symbolUtil = require('../../util/symbol');\n    var graphic = require('../../util/graphic');\n    var numberUtil = require('../../util/number');\n    var labelHelper = require('./labelHelper');\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            symbolPath.silent = false;\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n        var cursorStyle = seriesScope && seriesScope.cursorStyle;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n            cursorStyle = itemModel.getShallow('cursor');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        cursorStyle && symbolPath.attr('cursor', cursorStyle);\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        var valueDim = labelHelper.findLabelValueDim(data);\n\n        if (valueDim != null) {\n            graphic.setLabelStyle(\n                elStyle, hoverItemStyle, labelModel, hoverLabelModel,\n                {\n                    labelFetcher: seriesModel,\n                    labelDataIndex: idx,\n                    defaultText: data.get(valueDim, idx),\n                    isRectText: true,\n                    autoColor: color\n                }\n            );\n        }\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        // FIXME\n        // Do not use symbol.trigger('emphasis'), but use symbol.highlight() instead.\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = symbolPath.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = null;\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/helper/Symbol.js\n// module id = 1074\n// module chunks = 0 1","\n\n    var axisDefault = require('./axisDefault');\n    var zrUtil = require('zrender/lib/core/util');\n    var ComponentModel = require('../model/Component');\n    var layout = require('../util/layout');\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/axisModelCreator.js\n// module id = 1075\n// module chunks = 0 1","/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var Model = require('./Model');\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = require('./Component');\n\n    var globalDefault = require('./globalDefault');\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption(null);\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap.get(mainType), newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap.set(mainType, []);\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap.get(mainType)[index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap.get(mainType);\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap.get(mainType);\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts.slice();\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap.get(mainType);\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                componentsMap.each(function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap.get(mainType), cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.get('series')[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.get('series').slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.get('series'), cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getCurrentSeriesIndices: function () {\n            return (this._seriesIndices || []).slice();\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.get('series'), cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n\n            var componentTypes = [];\n            componentsMap.each(function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap.get(componentType), function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * Init with series: [], in case of calling findSeries method\n         * before series initialized.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = zrUtil.createHashMap({series: []});\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap.get(type) || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Option should contains series.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, require('./mixin/colorPalette'));\n\n    module.exports = GlobalModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/Global.js\n// module id = 1077\n// module chunks = 0 1 2","\n    var getLineStyle = require('./makeStyleMapper')(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/lineStyle.js\n// module id = 1078\n// module chunks = 0 1 2","\n    module.exports = {\n        getAreaStyle: require('./makeStyleMapper')(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/areaStyle.js\n// module id = 1079\n// module chunks = 0 1 2","\n\n    var textContain = require('zrender/lib/contain/text');\n    var graphicUtil = require('../../util/graphic');\n\n    var PATH_COLOR = ['textStyle', 'color'];\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @param {boolean} [isEmphasis]\n         * @return {string}\n         */\n        getTextColor: function (isEmphasis) {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (\n                    (!isEmphasis && ecModel) ? ecModel.get(PATH_COLOR) : null\n                );\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            return graphicUtil.getFont({\n                fontStyle: this.getShallow('fontStyle'),\n                fontWeight: this.getShallow('fontWeight'),\n                fontSize: this.getShallow('fontSize'),\n                fontFamily: this.getShallow('fontFamily')\n            }, this.ecModel);\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('verticalAlign') || this.getShallow('baseline'),\n                this.getShallow('padding'),\n                this.getShallow('rich'),\n                this.getShallow('truncateText')\n            );\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/textStyle.js\n// module id = 1080\n// module chunks = 0 1 2","\n\n    var Path = require('../graphic/Path');\n    var PathProxy = require('../core/PathProxy');\n    var transformPath = require('./transformPath');\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/tool/path.js\n// module id = 1081\n// module chunks = 0 1 2","'use strict';\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = require('../animation/Animator');\n    var util = require('../core/util');\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = require('../core/log');\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path The path to fetch value from object, like 'a.b.c'.\n         * @param {boolean} [loop] Whether to loop animation.\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * Caution: this method will stop previous animation.\n         * So do not use this method to one element twice before\n         * animation starts, unless you know what you are doing.\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         * @param {Function} [forceAnimate] Prevent stop animation and callback\n         *        immediently when target values are the same as current values.\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback, forceAnimate) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing, forceAnimate);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/mixin/Animatable.js\n// module id = 1082\n// module chunks = 0 1 2","/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = require('./easing');\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/animation/Clip.js\n// module id = 1083\n// module chunks = 0 1 2","/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/animation/easing.js\n// module id = 1084\n// module chunks = 0 1 2","'use strict';\n\n\n    var CMD = require('../core/PathProxy').CMD;\n    var line = require('./line');\n    var cubic = require('./cubic');\n    var quadratic = require('./quadratic');\n    var arc = require('./arc');\n    var normalizeRadian = require('./util').normalizeRadian;\n    var curve = require('../core/curve');\n\n    var windingLine = require('./windingLine');\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/path.js\n// module id = 1085\n// module chunks = 0 1 2","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/cubic.js\n// module id = 1086\n// module chunks = 0 1 2","\n\n    var normalizeRadian = require('./util').normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/arc.js\n// module id = 1087\n// module chunks = 0 1 2","\n\n    var CMD = require('../core/PathProxy').CMD;\n    var vec2 = require('../core/vector');\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/tool/transformPath.js\n// module id = 1088\n// module chunks = 0 1 2","'use strict';\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Circle.js\n// module id = 1089\n// module chunks = 0 1 2","/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var Path = require('../Path');\n    var fixClipWithShadow = require('../helper/fixClipWithShadow');\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: fixClipWithShadow(Path.prototype.brush),\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Sector.js\n// module id = 1090\n// module chunks = 0 1 2","/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Ring.js\n// module id = 1091\n// module chunks = 0 1 2","/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Polygon.js\n// module id = 1092\n// module chunks = 0 1 2","/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = require('../../core/vector');\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/smoothSpline.js\n// module id = 1093\n// module chunks = 0 1 2","/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = require('../../core/vector');\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/helper/smoothBezier.js\n// module id = 1094\n// module chunks = 0 1 2","/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Polyline.js\n// module id = 1095\n// module chunks = 0 1 2","/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = require('../helper/roundRect');\n\n    module.exports = require('../Path').extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Rect.js\n// module id = 1096\n// module chunks = 0 1 2","/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = require('../Path').extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Line.js\n// module id = 1097\n// module chunks = 0 1 2","'use strict';\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = require('../../core/curve');\n    var vec2 = require('../../core/vector');\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = require('../Path').extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/BezierCurve.js\n// module id = 1098\n// module chunks = 0 1 2","/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = require('../Path').extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/shape/Arc.js\n// module id = 1099\n// module chunks = 0 1 2","// CompoundPath to improve performance\n\n\n    var Path = require('./Path');\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/CompoundPath.js\n// module id = 1100\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/RadialGradient.js\n// module id = 1101\n// module chunks = 0 1 2","\n    var getItemStyle = require('./makeStyleMapper')(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes, includes) {\n            var style = getItemStyle.call(this, excludes, includes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/itemStyle.js\n// module id = 1102\n// module chunks = 0 1 2","\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/mixin/boxLayout.js\n// module id = 1103\n// module chunks = 0 1 2","\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: 'auto',\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000,\n\n        // See: module:echarts/scale/Time\n        useUTC: false\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/globalDefault.js\n// module id = 1104\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption',\n        'getViewOfComponentModel', 'getViewOfSeriesModel'\n    ];\n    // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/ExtensionAPI.js\n// module id = 1105\n// module chunks = 0 1 2","/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/OptionManager.js\n// module id = 1106\n// module chunks = 0 1 2","// Compatitable with 2.0\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var compatStyle = require('./helper/compatStyle');\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option, isTheme) {\n        compatStyle(option, isTheme);\n\n        var series = option.series;\n        each(zrUtil.isArray(series) ? series : [series], function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/preprocessor/backwardCompat.js\n// module id = 1107\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (!itemStyleOpt) {\n            return;\n        }\n        for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {\n            var styleName = POSSIBLE_STYLES[i];\n            var normalItemStyleOpt = itemStyleOpt.normal;\n            var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n            if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                opt[styleName] = opt[styleName] || {};\n                if (!opt[styleName].normal) {\n                    opt[styleName].normal = normalItemStyleOpt[styleName];\n                }\n                else {\n                    zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                }\n                normalItemStyleOpt[styleName] = null;\n            }\n            if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                opt[styleName] = opt[styleName] || {};\n                if (!opt[styleName].emphasis) {\n                    opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                }\n                else {\n                    zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                }\n                emphasisItemStyleOpt[styleName] = null;\n            }\n        }\n    }\n\n    function compatTextStyle(opt, propName) {\n        var labelOptSingle = isObject(opt) && opt[propName];\n        var textStyle = isObject(labelOptSingle) && labelOptSingle.textStyle;\n        if (textStyle) {\n            for (var i = 0, len = modelUtil.TEXT_STYLE_OPTIONS.length; i < len; i++) {\n                var propName = modelUtil.TEXT_STYLE_OPTIONS[i];\n                if (textStyle.hasOwnProperty(propName)) {\n                    labelOptSingle[propName] = textStyle[propName];\n                }\n            }\n        }\n    }\n\n    function compatLabelTextStyle(labelOpt) {\n        if (isObject(labelOpt)) {\n            compatTextStyle(labelOpt, 'normal');\n            compatTextStyle(labelOpt, 'emphasis');\n        }\n    }\n\n    function processSeries(seriesOpt) {\n        if (!isObject(seriesOpt)) {\n            return;\n        }\n\n        compatItemStyle(seriesOpt);\n        compatLabelTextStyle(seriesOpt.label);\n        // treemap\n        compatLabelTextStyle(seriesOpt.upperLabel);\n        // graph\n        compatLabelTextStyle(seriesOpt.edgeLabel);\n\n        var markPoint = seriesOpt.markPoint;\n        compatItemStyle(markPoint);\n        compatLabelTextStyle(markPoint && markPoint.label);\n\n        var markLine = seriesOpt.markLine;\n        compatItemStyle(seriesOpt.markLine);\n        compatLabelTextStyle(markLine && markLine.label);\n\n        var markArea = seriesOpt.markArea;\n        compatLabelTextStyle(markArea && markArea.label);\n\n        // For gauge\n        compatTextStyle(seriesOpt, 'axisLabel');\n        compatTextStyle(seriesOpt, 'title');\n        compatTextStyle(seriesOpt, 'detail');\n\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n                compatLabelTextStyle(data[i] && data[i].label);\n            }\n        }\n\n        // mark point data\n        var markPoint = seriesOpt.markPoint;\n        if (markPoint && markPoint.data) {\n            var mpData = markPoint.data;\n            for (var i = 0; i < mpData.length; i++) {\n                compatItemStyle(mpData[i]);\n                compatLabelTextStyle(mpData[i] && mpData[i].label);\n            }\n        }\n        // mark line data\n        var markLine = seriesOpt.markLine;\n        if (markLine && markLine.data) {\n            var mlData = markLine.data;\n            for (var i = 0; i < mlData.length; i++) {\n                if (zrUtil.isArray(mlData[i])) {\n                    compatItemStyle(mlData[i][0]);\n                    compatLabelTextStyle(mlData[i][0] && mlData[i][0].label);\n                    compatItemStyle(mlData[i][1]);\n                    compatLabelTextStyle(mlData[i][1] && mlData[i][1].label);\n                }\n                else {\n                    compatItemStyle(mlData[i]);\n                    compatLabelTextStyle(mlData[i] && mlData[i].label);\n                }\n            }\n        }\n    }\n\n    function toArr(o) {\n        return zrUtil.isArray(o) ? o : o ? [o] : [];\n    }\n\n    function toObj(o) {\n        return (zrUtil.isArray(o) ? o[0] : o) || {};\n    }\n\n    module.exports = function (option, isTheme) {\n        each(toArr(option.series), function (seriesOpt) {\n            isObject(seriesOpt) && processSeries(seriesOpt);\n        });\n\n        var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];\n        isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');\n\n        each(\n            axes,\n            function (axisName) {\n                each(toArr(option[axisName]), function (axisOpt) {\n                    if (axisOpt) {\n                        compatTextStyle(axisOpt, 'axisLabel');\n                        compatTextStyle(axisOpt.axisPointer, 'label');\n                    }\n                });\n            }\n        );\n\n        each(toArr(option.parallel), function (parallelOpt) {\n            var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;\n            compatTextStyle(parallelAxisDefault, 'axisLabel');\n            compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');\n        });\n\n        each(toArr(option.calendar), function (calendarOpt) {\n            compatTextStyle(calendarOpt, 'dayLabel');\n            compatTextStyle(calendarOpt, 'monthLabel');\n            compatTextStyle(calendarOpt, 'yearLabel');\n        });\n\n        // radar.name.textStyle\n        each(toArr(option.radar), function (radarOpt) {\n            compatTextStyle(radarOpt, 'name');\n        });\n\n        each(toArr(option.geo), function (geoOpt) {\n            if (isObject(geoOpt)) {\n                compatLabelTextStyle(geoOpt.label);\n                each(toArr(geoOpt.regions), function (regionObj) {\n                    compatLabelTextStyle(regionObj.label);\n                });\n            }\n        });\n\n        compatLabelTextStyle(toObj(option.timeline).label);\n        compatTextStyle(toObj(option.axisPointer), 'label');\n        compatTextStyle(toObj(option.tooltip).axisPointer, 'label');\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/preprocessor/helper/compatStyle.js\n// module id = 1108\n// module chunks = 0 1 2","'use strict';\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = require('./core/util');\n    var vec2 = require('./core/vector');\n    var Draggable = require('./mixin/Draggable');\n\n    var Eventful = require('./mixin/Eventful');\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch,\n            which: event.which\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget, x, y}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var lastHoveredTarget = lastHovered.target;\n\n            // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call\n            // (like 'setOption' or 'dispatchAction') in event handlers, we should find\n            // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.\n            // See #6198.\n            if (lastHoveredTarget && !lastHoveredTarget.__zr) {\n                lastHovered = this.findHover(lastHovered.x, lastHovered.y);\n                lastHoveredTarget = lastHovered.target;\n            }\n\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var el = targetInfo.target;\n            if (el && el.silent) {\n                return;\n            }\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {x: x, y: y};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downEl = hoveredTarget;\n                this._downPoint = [event.zrX, event.zrY];\n                // In case click triggered before mouseup\n                this._upEl = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upEl = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downEl !== this._upEl\n                    // Original click event is triggered on the whole canvas element,\n                    // including the case that `mousedown` - `mousemove` - `mouseup`,\n                    // which should be filtered, otherwise it will bring trouble to\n                    // pan and zoom.\n                    || !this._downPoint\n                    // Arbitrary value\n                    || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4\n                ) {\n                    return;\n                }\n                this._downPoint = null;\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                // FIXME: If clipPath has neither stroke nor fill,\n                // el.clipPath.contain(x, y) will always return false.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/Handler.js\n// module id = 1109\n// module chunks = 0 1 2","// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/mixin/Draggable.js\n// module id = 1110\n// module chunks = 0 1 2","'use strict';\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = require('./core/util');\n    var env = require('./core/env');\n\n    var Group = require('./container/Group');\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = require('./core/timsort');\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/Storage.js\n// module id = 1111\n// module chunks = 0 1 2","'use strict';\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = require('../core/util');\n    var Dispatcher = require('../core/event').Dispatcher;\n\n    var requestAnimationFrame = require('./requestAnimationFrame');\n\n    var Animator = require('./Animator');\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/animation/Animation.js\n// module id = 1112\n// module chunks = 0 1 2","\n\n    var eventTool = require('../core/event');\n    var zrUtil = require('../core/util');\n    var Eventful = require('../mixin/Eventful');\n    var env = require('../core/env');\n    var GestureMgr = require('../core/GestureMgr');\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/dom/HandlerProxy.js\n// module id = 1113\n// module chunks = 0 1 2","'use strict';\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = require('./event');\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/GestureMgr.js\n// module id = 1114\n// module chunks = 0 1 2","'use strict';\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = require('./config');\n    var util = require('./core/util');\n    var log = require('./core/log');\n    var BoundingRect = require('./core/BoundingRect');\n    var timsort = require('./core/timsort');\n\n    var Layer = require('./Layer');\n\n    var requestAnimationFrame = require('./animation/requestAnimationFrame');\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Object} opts\n     */\n    var Painter = function (root, storage, opts) {\n\n        this.type = 'canvas';\n\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        getType: function () {\n            return 'canvas';\n        },\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        getViewportRootOffset: function () {\n            var viewportRoot = this.getViewportRoot();\n            if (viewportRoot) {\n                return {\n                    offsetLeft: viewportRoot.offsetLeft || 0,\n                    offsetTop: viewportRoot.offsetTop || 0\n                };\n            }\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            var zlevel;\n\n            var self = this;\n            function findAndDrawOtherLayer(smaller, larger) {\n                var zlevelList = self._zlevelList;\n                if (smaller == null) {\n                    smaller = -Infinity;\n                }\n                var intermediateLayer;\n                for (var i = 0; i < zlevelList.length; i++) {\n                    var z = zlevelList[i];\n                    var layer = self._layers[z];\n                    if (!layer.__builtin__ && z > smaller && z < larger) {\n                        intermediateLayer = layer;\n                        break;\n                    }\n                }\n                if (intermediateLayer && intermediateLayer.renderToCanvas) {\n                    imageLayer.ctx.save();\n                    intermediateLayer.renderToCanvas(imageLayer.ctx);\n                    imageLayer.ctx.restore();\n                }\n            }\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n\n                if (el.zlevel !== zlevel) {\n                    findAndDrawOtherLayer(zlevel, el.zlevel);\n                    zlevel = el.zlevel;\n                }\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            findAndDrawOtherLayer(zlevel, Infinity);\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            // IE8 does not support getComputedStyle, but it use VML.\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = require('./graphic/Image');\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/Painter.js\n// module id = 1115\n// module chunks = 0 1 2","/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = require('./core/util');\n    var config = require('./config');\n    var Style = require('./graphic/Style');\n    var Pattern = require('./graphic/Pattern');\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n            this.ctx.__currentValues = {};\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n            this.ctxBack.__currentValues = {};\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/Layer.js\n// module id = 1116\n// module chunks = 0 1 2","\n    var Gradient = require('zrender/lib/graphic/Gradient');\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/visual/seriesColor.js\n// module id = 1117\n// module chunks = 0 1 2","\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/loading/default.js\n// module id = 1118\n// module chunks = 0 1 2","/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/Ordinal.js\n// module id = 1119\n// module chunks = 0 1 2","/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    // [About UTC and local time zone]:\n    // In most cases, `number.parseDate` will treat input data string as local time\n    // (except time zone is specified in time string). And `format.formateTime` returns\n    // local time by default. option.useUTC is false by default. This design have\n    // concidered these common case:\n    // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed\n    // in local time by default.\n    // (2) By default, the input data string (e.g., '2011-01-02') should be displayed\n    // as its original time, without any time difference.\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n    var scaleHelper = require('./helper');\n\n    var IntervalScale = require('./Interval');\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        /**\n         * @override\n         */\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));\n        },\n\n        /**\n         * @override\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        /**\n         * @override\n         */\n        niceTicks: function (approxTickNum, minInterval, maxInterval) {\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n\n            if (minInterval != null && approxInterval < minInterval) {\n                approxInterval = minInterval;\n            }\n            if (maxInterval != null && approxInterval > maxInterval) {\n                approxInterval = maxInterval;\n            }\n\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var timezoneOffset = this.getSetting('useUTC')\n                ? 0 : (new Date(+extent[0] || +extent[1])).getTimezoneOffset() * 60 * 1000;\n            var niceExtent = [\n                Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset),\n                Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)\n            ];\n\n            scaleHelper.fixExtent(niceExtent, extent);\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @param {module:echarts/model/Model}\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function (model) {\n        return new TimeScale({useUTC: model.ecModel.get('useUTC')});\n    };\n\n    module.exports = TimeScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/Time.js\n// module id = 1120\n// module chunks = 0 1 2","/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n    var numberUtil = require('../util/number');\n\n    // Use some method of IntervalScale\n    var IntervalScale = require('./Interval');\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @override\n         */\n        niceExtent: function (opt) {\n            intervalScaleProto.niceExtent.call(this, opt);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = opt.fixMin;\n            originalScale.__fixMax = opt.fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/scale/Log.js\n// module id = 1121\n// module chunks = 0 1 2","\n\n    var createListFromArray = require('./chart/helper/createListFromArray');\n    var symbolUtil = require('./util/symbol');\n    var axisHelper = require('./coord/axisHelper');\n    var axisModelCommonMixin = require('./coord/axisModelCommonMixin');\n    var Model = require('./model/Model');\n    var util = require('zrender/lib/core/util');\n\n    module.exports = {\n        /**\n         * Create a muti dimension List structure from seriesModel.\n         * @param  {module:echarts/model/Model} seriesModel\n         * @return {module:echarts/data/List} list\n         */\n        createList: function (seriesModel) {\n            var data = seriesModel.get('data');\n            return createListFromArray(data, seriesModel, seriesModel.ecModel);\n        },\n\n        /**\n         * @see {module:echarts/data/helper/completeDimensions}\n         */\n        completeDimensions: require('./data/helper/completeDimensions'),\n\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @see http://echarts.baidu.com/option.html#series-scatter.symbol\n         * @param {string} symbolDesc\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: symbolUtil.createSymbol,\n\n        /**\n         * Create scale\n         * @param {Array.<number>} dataExtent\n         * @param {Object|module:echarts/Model} option\n         */\n        createScale: function (dataExtent, option) {\n            var axisModel = option;\n            if (!(option instanceof Model)) {\n                axisModel = new Model(option);\n                util.mixin(axisModel, axisModelCommonMixin);\n            }\n\n            var scale = axisHelper.createScaleByModel(axisModel);\n            scale.setExtent(dataExtent[0], dataExtent[1]);\n\n            axisHelper.niceScaleExtent(scale, axisModel);\n            return scale;\n        },\n\n        /**\n         * Mixin common methods to axis model,\n         *\n         * Inlcude methods\n         * `getFormattedLabels() => Array.<string>`\n         * `getCategories() => Array.<string>`\n         * `getMin(origin: boolean) => number`\n         * `getMax(origin: boolean) => number`\n         * `getNeedCrossZero() => boolean`\n         * `setRange(start: number, end: number)`\n         * `resetRange()`\n         */\n        mixinAxisModelCommonMethods: function (Model) {\n            util.mixin(Model, axisModelCommonMixin);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/helper.js\n// module id = 1122\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var modelHelper = require('./modelHelper');\n    var findPointFromSeries = require('./findPointFromSeries');\n\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n    var get = modelUtil.makeGetter();\n\n    /**\n     * Basic logic: check all axis, if they do not demand show/highlight,\n     * then hide/downplay them.\n     *\n     * @param {Object} coordSysAxesInfo\n     * @param {Object} payload\n     * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n     * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n     *              trigger axisPointer and tooltip.\n     * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n     *              trigger axisPointer and tooltip.\n     * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n     * @param {Object} [payload.dataIndex] finder, restrict target axes.\n     * @param {Object} [payload.axesInfo] finder, restrict target axes.\n     *        [{\n     *          axisDim: 'x'|'y'|'angle'|...,\n     *          axisIndex: ...,\n     *          value: ...\n     *        }, ...]\n     * @param {Function} [payload.dispatchAction]\n     * @param {Object} [payload.tooltipOption]\n     * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n     *        which can be specified in dispatchAction\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     * @return {Object} content of event obj for echarts.connect.\n     */\n    function axisTrigger(payload, ecModel, api) {\n        var currTrigger = payload.currTrigger;\n        var point = [payload.x, payload.y];\n        var finder = payload;\n        var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n        var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n        // Pending\n        // See #6121. But we are not able to reproduce it yet.\n        if (!coordSysAxesInfo) {\n            return;\n        }\n\n        if (illegalPoint(point)) {\n            // Used in the default behavior of `connection`: use the sample seriesIndex\n            // and dataIndex. And also used in the tooltipView trigger.\n            point = findPointFromSeries({\n                seriesIndex: finder.seriesIndex,\n                // Do not use dataIndexInside from other ec instance.\n                // FIXME: auto detect it?\n                dataIndex: finder.dataIndex\n            }, ecModel).point;\n        }\n        var isIllegalPoint = illegalPoint(point);\n\n        // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n        // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n        // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n        // and dataIndex.\n        var inputAxesInfo = finder.axesInfo;\n\n        var axesInfo = coordSysAxesInfo.axesInfo;\n        var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n        var outputFinder = {};\n\n        var showValueMap = {};\n        var dataByCoordSys = {list: [], map: {}};\n        var updaters = {\n            showPointer: curry(showPointer, showValueMap),\n            showTooltip: curry(showTooltip, dataByCoordSys)\n        };\n\n        // Process for triggered axes.\n        each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n            // If a point given, it must be contained by the coordinate system.\n            var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n\n            each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n                var axis = axisInfo.axis;\n                var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo);\n                // If no inputAxesInfo, no axis is restricted.\n                if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n                    var val = inputAxisInfo && inputAxisInfo.value;\n                    if (val == null && !isIllegalPoint) {\n                        val = axis.pointToData(point);\n                    }\n                    val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n                }\n            });\n        });\n\n        // Process for linked axes.\n        var linkTriggers = {};\n        each(axesInfo, function (tarAxisInfo, tarKey) {\n            var linkGroup = tarAxisInfo.linkGroup;\n\n            // If axis has been triggered in the previous stage, it should not be triggered by link.\n            if (linkGroup && !showValueMap[tarKey]) {\n                each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n                    var srcValItem = showValueMap[srcKey];\n                    // If srcValItem exist, source axis is triggered, so link to target axis.\n                    if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n                        var val = srcValItem.value;\n                        linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(\n                            val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo)\n                        )));\n                        linkTriggers[tarAxisInfo.key] = val;\n                    }\n                });\n            }\n        });\n        each(linkTriggers, function (val, tarKey) {\n            processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n        });\n\n        updateModelActually(showValueMap, axesInfo, outputFinder);\n        dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n        dispatchHighDownActually(axesInfo, dispatchAction, api);\n\n        return outputFinder;\n    }\n\n    function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n        var axis = axisInfo.axis;\n\n        if (axis.scale.isBlank() || !axis.containData(newValue)) {\n            return;\n        }\n\n        if (!axisInfo.involveSeries) {\n            updaters.showPointer(axisInfo, newValue);\n            return;\n        }\n\n        // Heavy calculation. So put it after axis.containData checking.\n        var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n        var payloadBatch = payloadInfo.payloadBatch;\n        var snapToValue = payloadInfo.snapToValue;\n\n        // Fill content of event obj for echarts.connect.\n        // By defualt use the first involved series data as a sample to connect.\n        if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n            zrUtil.extend(outputFinder, payloadBatch[0]);\n        }\n\n        // If no linkSource input, this process is for collecting link\n        // target, where snap should not be accepted.\n        if (!dontSnap && axisInfo.snap) {\n            if (axis.containData(snapToValue) && snapToValue != null) {\n                newValue = snapToValue;\n            }\n        }\n\n        updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder);\n        // Tooltip should always be snapToValue, otherwise there will be\n        // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n        updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n    }\n\n    function buildPayloadsBySeries(value, axisInfo) {\n        var axis = axisInfo.axis;\n        var dim = axis.dim;\n        var snapToValue = value;\n        var payloadBatch = [];\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n\n        each(axisInfo.seriesModels, function (series, idx) {\n            var dataDim = series.coordDimToDataDim(dim);\n            var seriesNestestValue;\n            var dataIndices;\n\n            if (series.getAxisTooltipData) {\n                var result = series.getAxisTooltipData(dataDim, value, axis);\n                dataIndices = result.dataIndices;\n                seriesNestestValue = result.nestestValue;\n            }\n            else {\n                dataIndices = series.getData().indicesOfNearest(\n                    dataDim[0],\n                    value,\n                    // Add a threshold to avoid find the wrong dataIndex\n                    // when data length is not same.\n                    false, axis.type === 'category' ? 0.5 : null\n                );\n                if (!dataIndices.length) {\n                    return;\n                }\n                seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n            }\n\n            if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n                return;\n            }\n\n            var diff = value - seriesNestestValue;\n            var dist = Math.abs(diff);\n            // Consider category case\n            if (dist <= minDist) {\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    snapToValue = seriesNestestValue;\n                    payloadBatch.length = 0;\n                }\n                each(dataIndices, function (dataIndex) {\n                    payloadBatch.push({\n                        seriesIndex: series.seriesIndex,\n                        dataIndexInside: dataIndex,\n                        dataIndex: series.getData().getRawIndex(dataIndex)\n                    });\n                });\n            }\n        });\n\n        return {\n            payloadBatch: payloadBatch,\n            snapToValue: snapToValue\n        };\n    }\n\n    function showPointer(showValueMap, axisInfo, value, payloadBatch) {\n        showValueMap[axisInfo.key] = {value: value, payloadBatch: payloadBatch};\n    }\n\n    function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n        var payloadBatch = payloadInfo.payloadBatch;\n        var axis = axisInfo.axis;\n        var axisModel = axis.model;\n        var axisPointerModel = axisInfo.axisPointerModel;\n\n        // If no data, do not create anything in dataByCoordSys,\n        // whose length will be used to judge whether dispatch action.\n        if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n            return;\n        }\n\n        var coordSysModel = axisInfo.coordSys.model;\n        var coordSysKey = modelHelper.makeKey(coordSysModel);\n        var coordSysItem = dataByCoordSys.map[coordSysKey];\n        if (!coordSysItem) {\n            coordSysItem = dataByCoordSys.map[coordSysKey] = {\n                coordSysId: coordSysModel.id,\n                coordSysIndex: coordSysModel.componentIndex,\n                coordSysType: coordSysModel.type,\n                coordSysMainType: coordSysModel.mainType,\n                dataByAxis: []\n            };\n            dataByCoordSys.list.push(coordSysItem);\n        }\n\n        coordSysItem.dataByAxis.push({\n            axisDim: axis.dim,\n            axisIndex: axisModel.componentIndex,\n            axisType: axisModel.type,\n            axisId: axisModel.id,\n            value: value,\n            // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n            // depends that all models have been updated. So it should not be performed\n            // here. Considering axisPointerModel used here is volatile, which is hard\n            // to be retrieve in TooltipView, we prepare parameters here.\n            valueLabelOpt: {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            },\n            seriesDataIndices: payloadBatch.slice()\n        });\n    }\n\n    function updateModelActually(showValueMap, axesInfo, outputFinder) {\n        var outputAxesInfo = outputFinder.axesInfo = [];\n        // Basic logic: If no 'show' required, 'hide' this axisPointer.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            var valItem = showValueMap[key];\n\n            if (valItem) {\n                !axisInfo.useHandle && (option.status = 'show');\n                option.value = valItem.value;\n                // For label formatter param and highlight.\n                option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n            }\n            // When always show (e.g., handle used), remain\n            // original value and status.\n            else {\n                // If hide, value still need to be set, consider\n                // click legend to toggle axis blank.\n                !axisInfo.useHandle && (option.status = 'hide');\n            }\n\n            // If status is 'hide', should be no info in payload.\n            option.status === 'show' && outputAxesInfo.push({\n                axisDim: axisInfo.axis.dim,\n                axisIndex: axisInfo.axis.model.componentIndex,\n                value: option.value\n            });\n        });\n    }\n\n    function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n        // Basic logic: If no showTip required, hideTip will be dispatched.\n        if (illegalPoint(point) || !dataByCoordSys.list.length) {\n            dispatchAction({type: 'hideTip'});\n            return;\n        }\n\n        // In most case only one axis (or event one series is used). It is\n        // convinient to fetch payload.seriesIndex and payload.dataIndex\n        // dirtectly. So put the first seriesIndex and dataIndex of the first\n        // axis on the payload.\n        var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n\n        dispatchAction({\n            type: 'showTip',\n            escapeConnect: true,\n            x: point[0],\n            y: point[1],\n            tooltipOption: payload.tooltipOption,\n            position: payload.position,\n            dataIndexInside: sampleItem.dataIndexInside,\n            dataIndex: sampleItem.dataIndex,\n            seriesIndex: sampleItem.seriesIndex,\n            dataByCoordSys: dataByCoordSys.list\n        });\n    }\n\n    function dispatchHighDownActually(axesInfo, dispatchAction, api) {\n        // FIXME\n        // highlight status modification shoule be a stage of main process?\n        // (Consider confilct (e.g., legend and axisPointer) and setOption)\n\n        var zr = api.getZr();\n        var highDownKey = 'axisPointerLastHighlights';\n        var lastHighlights = get(zr)[highDownKey] || {};\n        var newHighlights = get(zr)[highDownKey] = {};\n\n        // Update highlight/downplay status according to axisPointer model.\n        // Build hash map and remove duplicate incidentally.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n                var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n                newHighlights[key] = batchItem;\n            });\n        });\n\n        // Diff.\n        var toHighlight = [];\n        var toDownplay = [];\n        zrUtil.each(lastHighlights, function (batchItem, key) {\n            !newHighlights[key] && toDownplay.push(batchItem);\n        });\n        zrUtil.each(newHighlights, function (batchItem, key) {\n            !lastHighlights[key] && toHighlight.push(batchItem);\n        });\n\n        toDownplay.length && api.dispatchAction({\n            type: 'downplay', escapeConnect: true, batch: toDownplay\n        });\n        toHighlight.length && api.dispatchAction({\n            type: 'highlight', escapeConnect: true, batch: toHighlight\n        });\n    }\n\n    function findInputAxisInfo(inputAxesInfo, axisInfo) {\n        for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n            var inputAxisInfo = inputAxesInfo[i];\n            if (axisInfo.axis.dim === inputAxisInfo.axisDim\n                && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex\n            ) {\n                return inputAxisInfo;\n            }\n        }\n    }\n\n    function makeMapperParam(axisInfo) {\n        var axisModel = axisInfo.axis.model;\n        var item = {};\n        var dim = item.axisDim = axisInfo.axis.dim;\n        item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n        item.axisName = item[dim + 'AxisName'] = axisModel.name;\n        item.axisId = item[dim + 'AxisId'] = axisModel.id;\n        return item;\n    }\n\n    function illegalPoint(point) {\n        return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n    }\n\n    module.exports = axisTrigger;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/axisTrigger.js\n// module id = 1123\n// module chunks = 0 1 2","\n\n    var echarts = require('../../echarts');\n\n    var AxisPointerModel = echarts.extendComponentModel({\n\n        type: 'axisPointer',\n\n        coordSysAxesInfo: null,\n\n        defaultOption: {\n            // 'auto' means that show when triggered by tooltip or handle.\n            show: 'auto',\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: null, // set default in AxisPonterView.js\n\n            zlevel: 0,\n            z: 50,\n\n            type: 'line',\n            // axispointer triggered by tootip determine snap automatically,\n            // see `modelHelper`.\n            snap: false,\n            triggerTooltip: true,\n\n            value: null,\n            status: null, // Init value depends on whether handle is used.\n\n            // [group0, group1, ...]\n            // Each group can be: {\n            //      mapper: function () {},\n            //      singleTooltip: 'multiple',  // 'multiple' or 'single'\n            //      xAxisId: ...,\n            //      yAxisName: ...,\n            //      angleAxisIndex: ...\n            // }\n            // mapper: can be ignored.\n            //      input: {axisInfo, value}\n            //      output: {axisInfo, value}\n            link: [],\n\n            // Do not set 'auto' here, otherwise global animation: false\n            // will not effect at this axispointer.\n            animation: null,\n            animationDurationUpdate: 200,\n\n            lineStyle: {\n                color: '#aaa',\n                width: 1,\n                type: 'solid'\n            },\n\n            shadowStyle: {\n                color: 'rgba(150,150,150,0.3)'\n            },\n\n            label: {\n                show: true,\n                formatter: null, // string | Function\n                precision: 'auto', // Or a number like 0, 1, 2 ...\n                margin: 3,\n                color: '#fff',\n                padding: [5, 7, 5, 7],\n                backgroundColor: 'auto', // default: axis line color\n                borderColor: null,\n                borderWidth: 0,\n                shadowBlur: 3,\n                shadowColor: '#aaa'\n                // Considering applicability, common style should\n                // better not have shadowOffset.\n                // shadowOffsetX: 0,\n                // shadowOffsetY: 2\n            },\n\n            handle: {\n                show: false,\n                icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z', // jshint ignore:line\n                size: 45,\n                // handle margin is from symbol center to axis, which is stable when circular move.\n                margin: 50,\n                // color: '#1b8bbd'\n                // color: '#2f4554'\n                color: '#333',\n                shadowBlur: 3,\n                shadowColor: '#aaa',\n                shadowOffsetX: 0,\n                shadowOffsetY: 2,\n\n                // For mobile performance\n                throttle: 40\n            }\n        }\n\n    });\n\n    module.exports = AxisPointerModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/AxisPointerModel.js\n// module id = 1124\n// module chunks = 0 1 2","\n\n    var globalListener = require('./globalListener');\n\n    var AxisPonterView = require('../../echarts').extendComponentView({\n\n        type: 'axisPointer',\n\n        render: function (globalAxisPointerModel, ecModel, api) {\n            var globalTooltipModel = ecModel.getComponent('tooltip');\n            var triggerOn = globalAxisPointerModel.get('triggerOn')\n                || (globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click');\n\n            // Register global listener in AxisPointerView to enable\n            // AxisPointerView to be independent to Tooltip.\n            globalListener.register(\n                'axisPointer',\n                api,\n                function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none'\n                        && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)\n                    ) {\n                        dispatchAction({\n                            type: 'updateAxisPointer',\n                            currTrigger: currTrigger,\n                            x: e && e.offsetX,\n                            y: e && e.offsetY\n                        });\n                    }\n                }\n            );\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            globalListener.disopse(api.getZr(), 'axisPointer');\n            AxisPonterView.superApply(this._model, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            globalListener.unregister('axisPointer', api);\n            AxisPonterView.superApply(this._model, 'dispose', arguments);\n        }\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axisPointer/AxisPointerView.js\n// module id = 1125\n// module chunks = 0 1 2","\n\n    require('../../echarts').extendComponentModel({\n\n        type: 'tooltip',\n\n        dependencies: ['axisPointer'],\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 'trigger' only works on coordinate system.\n            // 'item' | 'axis' | 'none'\n            trigger: 'item',\n\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove|click',\n\n            alwaysShowContent: false,\n\n            displayMode: 'single', // 'single' | 'multipleByCoordSys'\n\n            // 位置 {Array} | {Function}\n            // position: null\n            // Consider triggered from axisPointer handle, verticalAlign should be 'middle'\n            // align: null,\n            // verticalAlign: null,\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: 'auto',\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                crossStyle: {\n                    color: '#999',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                }\n\n                // lineStyle and shadowStyle should not be specified here,\n                // otherwise it will always override those styles on option.axisPointer.\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/tooltip/TooltipModel.js\n// module id = 1126\n// module chunks = 0 1 2","\n\n    var TooltipContent = require('./TooltipContent');\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var numberUtil = require('../../util/number');\n    var graphic = require('../../util/graphic');\n    var findPointFromSeries = require('../axisPointer/findPointFromSeries');\n    var layoutUtil = require('../../util/layout');\n    var env = require('zrender/lib/core/env');\n    var Model = require('../../model/Model');\n    var globalListener = require('../axisPointer/globalListener');\n    var axisHelper = require('../../coord/axisHelper');\n    var axisPointerViewHelper = require('../axisPointer/viewHelper');\n\n    var bind = zrUtil.bind;\n    var each = zrUtil.each;\n    var parsePercent = numberUtil.parsePercent;\n\n\n    var proxyRect = new graphic.Rect({\n        shape: {x: -1, y: -1, width: 2, height: 2}\n    });\n\n    require('../../echarts').extendComponentView({\n\n        type: 'tooltip',\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * Should be cleaned when render.\n             * @private\n             * @type {Array.<Array.<Object>>}\n             */\n            this._lastDataByCoordSys = null;\n\n            /**\n             * @private\n             * @type {boolean}\n             */\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.setEnterable(tooltipModel.get('enterable'));\n\n            this._initGlobalListener();\n\n            this._keepShow();\n        },\n\n        _initGlobalListener: function () {\n            var tooltipModel = this._tooltipModel;\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            globalListener.register(\n                'itemTooltip',\n                this._api,\n                bind(function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none') {\n                        if (triggerOn.indexOf(currTrigger) >= 0) {\n                            this._tryShow(e, dispatchAction);\n                        }\n                        else if (currTrigger === 'leave') {\n                            this._hide(dispatchAction);\n                        }\n                    }\n                }, this)\n            );\n        },\n\n        _keepShow: function () {\n            var tooltipModel = this._tooltipModel;\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && tooltipModel.get('triggerOn') !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid || env.node) {\n                return;\n            }\n\n            var dispatchAction = makeDispatchAction(payload, api);\n\n            // Reset ticket\n            this._ticket = '';\n\n            // When triggered from axisPointer.\n            var dataByCoordSys = payload.dataByCoordSys;\n\n            if (payload.tooltip && payload.x != null && payload.y != null) {\n                var el = proxyRect;\n                el.position = [payload.x, payload.y];\n                el.update();\n                el.tooltip = payload.tooltip;\n                // Manually show tooltip while view is not using zrender elements.\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    target: el\n                }, dispatchAction);\n            }\n            else if (dataByCoordSys) {\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    event: {},\n                    dataByCoordSys: payload.dataByCoordSys,\n                    tooltipOption: payload.tooltipOption\n                }, dispatchAction);\n            }\n            else if (payload.seriesIndex != null) {\n\n                if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {\n                    return;\n                }\n\n                var pointInfo = findPointFromSeries(payload, ecModel);\n                var cx = pointInfo.point[0];\n                var cy = pointInfo.point[1];\n                if (cx != null && cy != null) {\n                    this._tryShow({\n                        offsetX: cx,\n                        offsetY: cy,\n                        position: payload.position,\n                        target: pointInfo.el,\n                        event: {}\n                    }, dispatchAction);\n                }\n            }\n            else if (payload.x != null && payload.y != null) {\n                // FIXME\n                // should wrap dispatchAction like `axisPointer/globalListener` ?\n                api.dispatchAction({\n                    type: 'updateAxisPointer',\n                    x: payload.x,\n                    y: payload.y\n                });\n\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: api.getZr().findHover(payload.x, payload.y).target,\n                    event: {}\n                }, dispatchAction);\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            var tooltipContent = this._tooltipContent;\n\n            if (!this._alwaysShowContent) {\n                tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._lastX = this._lastY = null;\n\n            if (payload.from !== this.uid) {\n                this._hide(makeDispatchAction(payload, api));\n            }\n        },\n\n        // Be compatible with previous design, that is, when tooltip.type is 'axis' and\n        // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer\n        // and tooltip.\n        _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {\n            var seriesIndex = payload.seriesIndex;\n            var dataIndex = payload.dataIndex;\n            var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n            if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {\n                return;\n            }\n\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            if (!seriesModel) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                seriesModel,\n                (seriesModel.coordinateSystem || {}).model,\n                tooltipModel\n            ]);\n\n            if (tooltipModel.get('trigger') !== 'axis') {\n                return;\n            }\n\n            api.dispatchAction({\n                type: 'updateAxisPointer',\n                seriesIndex: seriesIndex,\n                dataIndex: dataIndex,\n                position: payload.position\n            });\n\n            return true;\n        },\n\n        _tryShow: function (e, dispatchAction) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            var dataByCoordSys = e.dataByCoordSys;\n            if (dataByCoordSys && dataByCoordSys.length) {\n                this._showAxisTooltip(dataByCoordSys, e);\n            }\n            // Always show item tooltip if mouse is on the element with dataIndex\n            else if (el && el.dataIndex != null) {\n                this._lastDataByCoordSys = null;\n                this._showSeriesItemTooltip(e, el, dispatchAction);\n            }\n            // Tooltip provided directly. Like legend.\n            else if (el && el.tooltip) {\n                this._lastDataByCoordSys = null;\n                this._showComponentItemTooltip(e, el, dispatchAction);\n            }\n            else {\n                this._lastDataByCoordSys = null;\n                this._hide(dispatchAction);\n            }\n        },\n\n        _showOrMove: function (tooltipModel, cb) {\n            // showDelay is used in this case: tooltip.enterable is set\n            // as true. User intent to move mouse into tooltip and click\n            // something. `showDelay` makes it easyer to enter the content\n            // but tooltip do not move immediately.\n            var delay = tooltipModel.get('showDelay');\n            cb = zrUtil.bind(cb, this);\n            clearTimeout(this._showTimout);\n            delay > 0\n                ? (this._showTimout = setTimeout(cb, delay))\n                : cb();\n        },\n\n        _showAxisTooltip: function (dataByCoordSys, e) {\n            var ecModel = this._ecModel;\n            var globalTooltipModel = this._tooltipModel;\n            var point = [e.offsetX, e.offsetY];\n            var singleDefaultHTML = [];\n            var singleParamsList = [];\n            var singleTooltipModel = buildTooltipModel([\n                e.tooltipOption,\n                globalTooltipModel\n            ]);\n\n            each(dataByCoordSys, function (itemCoordSys) {\n                // var coordParamList = [];\n                // var coordDefaultHTML = [];\n                // var coordTooltipModel = buildTooltipModel([\n                //     e.tooltipOption,\n                //     itemCoordSys.tooltipOption,\n                //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),\n                //     globalTooltipModel\n                // ]);\n                // var displayMode = coordTooltipModel.get('displayMode');\n                // var paramsList = displayMode === 'single' ? singleParamsList : [];\n\n                each(itemCoordSys.dataByAxis, function (item) {\n                    var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);\n                    var axisValue = item.value;\n                    var seriesDefaultHTML = [];\n\n                    if (!axisModel || axisValue == null) {\n                        return;\n                    }\n\n                    var valueLabel = axisPointerViewHelper.getValueLabel(\n                        axisValue, axisModel.axis, ecModel,\n                        item.seriesDataIndices,\n                        item.valueLabelOpt\n                    );\n\n                    zrUtil.each(item.seriesDataIndices, function (idxItem) {\n                        var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                        var dataIndex = idxItem.dataIndexInside;\n                        var dataParams = series && series.getDataParams(dataIndex);\n                        dataParams.axisDim = item.axisDim;\n                        dataParams.axisIndex = item.axisIndex;\n                        dataParams.axisType = item.axisType;\n                        dataParams.axisId = item.axisId;\n                        dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);\n                        dataParams.axisValueLabel = valueLabel;\n\n                        if (dataParams) {\n                            singleParamsList.push(dataParams);\n                            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));\n                        }\n                    });\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = valueLabel;\n                    singleDefaultHTML.push(\n                        (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + seriesDefaultHTML.join('<br />')\n                    );\n                });\n            }, this);\n\n            // In most case, the second axis is shown upper than the first one.\n            singleDefaultHTML.reverse();\n            singleDefaultHTML = singleDefaultHTML.join('<br /><br />');\n\n            var positionExpr = e.position;\n            this._showOrMove(singleTooltipModel, function () {\n                if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {\n                    this._updatePosition(\n                        singleTooltipModel,\n                        positionExpr,\n                        point[0], point[1],\n                        this._tooltipContent,\n                        singleParamsList\n                    );\n                }\n                else {\n                    this._showTooltipContent(\n                        singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(),\n                        point[0], point[1], positionExpr\n                    );\n                }\n            });\n\n            // Do not trigger events here, because this branch only be entered\n            // from dispatchAction.\n        },\n\n        _showSeriesItemTooltip: function (e, el, dispatchAction) {\n            var ecModel = this._ecModel;\n            // Use dataModel in element if possible\n            // Used when mouseover on a element like markPoint or edge\n            // In which case, the data is not main data in series.\n            var seriesIndex = el.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n\n            // For example, graph link.\n            var dataModel = el.dataModel || seriesModel;\n            var dataIndex = el.dataIndex;\n            var dataType = el.dataType;\n            var data = dataModel.getData();\n\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                dataModel,\n                seriesModel && (seriesModel.coordinateSystem || {}).model,\n                this._tooltipModel\n            ]);\n\n            var tooltipTrigger = tooltipModel.get('trigger');\n            if (tooltipTrigger != null && tooltipTrigger !== 'item') {\n                return;\n            }\n\n            var params = dataModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);\n            var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;\n\n            this._showOrMove(tooltipModel, function () {\n                this._showTooltipContent(\n                    tooltipModel, defaultHtml, params, asyncTicket,\n                    e.offsetX, e.offsetY, e.position, e.target\n                );\n            });\n\n            // FIXME\n            // duplicated showtip if manuallyShowTip is called from dispatchAction.\n            dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                dataIndex: data.getRawIndex(dataIndex),\n                seriesIndex: seriesIndex,\n                from: this.uid\n            });\n        },\n\n        _showComponentItemTooltip: function (e, el, dispatchAction) {\n            var tooltipOpt = el.tooltip;\n            if (typeof tooltipOpt === 'string') {\n                var content = tooltipOpt;\n                tooltipOpt = {\n                    content: content,\n                    // Fixed formatter\n                    formatter: content\n                };\n            }\n            var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);\n            var defaultHtml = subTooltipModel.get('content');\n            var asyncTicket = Math.random();\n\n            // Do not check whether `trigger` is 'none' here, because `trigger`\n            // only works on cooridinate system. In fact, we have not found case\n            // that requires setting `trigger` nothing on component yet.\n\n            this._showOrMove(subTooltipModel, function () {\n                this._showTooltipContent(\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el\n                );\n            });\n\n            // If not dispatch showTip, tip may be hide triggered by axis.\n            dispatchAction({\n                type: 'showTip',\n                from: this.uid\n            });\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {\n                return;\n            }\n\n            var tooltipContent = this._tooltipContent;\n\n            var formatter = tooltipModel.get('formatter');\n            positionExpr = positionExpr || tooltipModel.get('position');\n            var html = defaultHtml;\n\n            if (formatter && typeof formatter === 'string') {\n                html = formatUtil.formatTpl(formatter, params, true);\n            }\n            else if (typeof formatter === 'function') {\n                var callback = bind(function (cbTicket, html) {\n                    if (cbTicket === this._ticket) {\n                        tooltipContent.setContent(html);\n                        this._updatePosition(\n                            tooltipModel, positionExpr, x, y, tooltipContent, params, el\n                        );\n                    }\n                }, this);\n                this._ticket = asyncTicket;\n                html = formatter(params, asyncTicket, callback);\n            }\n\n            tooltipContent.setContent(html);\n            tooltipContent.show(tooltipModel);\n\n            this._updatePosition(\n                tooltipModel, positionExpr, x, y, tooltipContent, params, el\n            );\n        },\n\n        /**\n         * @param  {string|Function|Array.<number>|Object} positionExpr\n         * @param  {number} x Mouse x\n         * @param  {number} y Mouse y\n         * @param  {boolean} confine Whether confine tooltip content in view rect.\n         * @param  {Object|<Array.<Object>} params\n         * @param  {module:zrender/Element} el target element\n         * @param  {module:echarts/ExtensionAPI} api\n         * @return {Array.<number>}\n         */\n        _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {\n            var viewWidth = this._api.getWidth();\n            var viewHeight = this._api.getHeight();\n            positionExpr = positionExpr || tooltipModel.get('position');\n\n            var contentSize = content.getSize();\n            var align = tooltipModel.get('align');\n            var vAlign = tooltipModel.get('verticalAlign');\n            var rect = el && el.getBoundingRect().clone();\n            el && rect.applyTransform(el.transform);\n\n            if (typeof positionExpr === 'function') {\n                // Callback of position can be an array or a string specify the position\n                positionExpr = positionExpr([x, y], params, content.el, rect, {\n                    viewSize: [viewWidth, viewHeight],\n                    contentSize: contentSize.slice()\n                });\n            }\n\n            if (zrUtil.isArray(positionExpr)) {\n                x = parsePercent(positionExpr[0], viewWidth);\n                y = parsePercent(positionExpr[1], viewHeight);\n            }\n            else if (zrUtil.isObject(positionExpr)) {\n                positionExpr.width = contentSize[0];\n                positionExpr.height = contentSize[1];\n                var layoutRect = layoutUtil.getLayoutRect(\n                    positionExpr, {width: viewWidth, height: viewHeight}\n                );\n                x = layoutRect.x;\n                y = layoutRect.y;\n                align = null;\n                // When positionExpr is left/top/right/bottom,\n                // align and verticalAlign will not work.\n                vAlign = null;\n            }\n            // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n            else if (typeof positionExpr === 'string' && el) {\n                var pos = calcTooltipPosition(\n                    positionExpr, rect, contentSize\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n            else {\n                var pos = refixTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);\n            vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);\n\n            if (tooltipModel.get('confine')) {\n                var pos = confineTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            content.moveTo(x, y);\n        },\n\n        // FIXME\n        // Should we remove this but leave this to user?\n        _updateContentNotChangedOnAxis: function (dataByCoordSys) {\n            var lastCoordSys = this._lastDataByCoordSys;\n            var contentNotChanged = !!lastCoordSys\n                && lastCoordSys.length === dataByCoordSys.length;\n\n            contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {\n                var lastDataByAxis = lastItemCoordSys.dataByAxis || {};\n                var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};\n                var thisDataByAxis = thisItemCoordSys.dataByAxis || [];\n                contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;\n\n                contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {\n                    var thisItem = thisDataByAxis[indexAxis] || {};\n                    var lastIndices = lastItem.seriesDataIndices || [];\n                    var newIndices = thisItem.seriesDataIndices || [];\n\n                    contentNotChanged &=\n                        lastItem.value === thisItem.value\n                        && lastItem.axisType === thisItem.axisType\n                        && lastItem.axisId === thisItem.axisId\n                        && lastIndices.length === newIndices.length;\n\n                    contentNotChanged && each(lastIndices, function (lastIdxItem, j) {\n                        var newIdxItem = newIndices[j];\n                        contentNotChanged &=\n                            lastIdxItem.seriesIndex === newIdxItem.seriesIndex\n                            && lastIdxItem.dataIndex === newIdxItem.dataIndex;\n                    });\n                });\n            });\n\n            this._lastDataByCoordSys = dataByCoordSys;\n\n            return !!contentNotChanged;\n        },\n\n        _hide: function (dispatchAction) {\n            // Do not directly hideLater here, because this behavior may be prevented\n            // in dispatchAction when showTip is dispatched.\n\n            // FIXME\n            // duplicated hideTip if manuallyHideTip is called from dispatchAction.\n            this._lastDataByCoordSys = null;\n            dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            this._tooltipContent.hide();\n            globalListener.unregister('itemTooltip', api);\n        }\n    });\n\n\n    /**\n     * @param {Array.<Object|module:echarts/model/Model>} modelCascade\n     * From top to bottom. (the last one should be globalTooltipModel);\n     */\n    function buildTooltipModel(modelCascade) {\n        var resultModel = modelCascade.pop();\n        while (modelCascade.length) {\n            var tooltipOpt = modelCascade.pop();\n            if (tooltipOpt) {\n                if (tooltipOpt instanceof Model) {\n                    tooltipOpt = tooltipOpt.get('tooltip', true);\n                }\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                if (typeof tooltipOpt === 'string') {\n                    tooltipOpt = {formatter: tooltipOpt};\n                }\n                resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);\n            }\n        }\n        return resultModel;\n    }\n\n    function makeDispatchAction(payload, api) {\n        return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {\n        var size = getOuterSize(el);\n        var width = size.width;\n        var height = size.height;\n\n        if (gapH != null) {\n            if (x + width + gapH > viewWidth) {\n                x -= width + gapH;\n            }\n            else {\n                x += gapH;\n            }\n        }\n        if (gapV != null) {\n            if (y + height + gapV > viewHeight) {\n                y -= height + gapV;\n            }\n            else {\n                y += gapV;\n            }\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var size = getOuterSize(el);\n        var width = size.width;\n        var height = size.height;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function getOuterSize(el) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        // Consider browser compatibility.\n        // IE8 does not support getComputedStyle.\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n            var stl = document.defaultView.getComputedStyle(el);\n            if (stl) {\n                width += parseInt(stl.paddingLeft, 10) + parseInt(stl.paddingRight, 10)\n                    + parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n                height += parseInt(stl.paddingTop, 10) + parseInt(stl.paddingBottom, 10)\n                    + parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n            }\n        }\n\n        return {width: width, height: height};\n    }\n\n    function calcTooltipPosition(position, rect, contentSize) {\n        var domWidth = contentSize[0];\n        var domHeight = contentSize[1];\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    function isCenterAlign(align) {\n        return align === 'center' || align === 'middle';\n    }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/tooltip/TooltipView.js\n// module id = 1127\n// module chunks = 0 1 2","/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var zrColor = require('zrender/lib/tool/color');\n    var eventUtil = require('zrender/lib/core/event');\n    var formatUtil = require('../../util/format');\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = require('zrender/lib/core/env');\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition. Do not animate when transitionDuration is 0.\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = this._zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self._enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self._enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self._enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            // FIXME\n            // Move this logic to ec main?\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            this.el.innerHTML = content == null ? '' : content;\n        },\n\n        setEnterable: function (enterable) {\n            this._enterable = enterable;\n        },\n\n        getSize: function () {\n            var el = this.el;\n            return [el.clientWidth, el.clientHeight];\n        },\n\n        moveTo: function (x, y) {\n            // xy should be based on canvas root. But tooltipContent is\n            // the sibling of canvas root. So padding of ec container\n            // should be considered here.\n            var zr = this._zr;\n            var viewportRootOffset;\n            if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {\n                x += viewportRootOffset.offsetLeft;\n                y += viewportRootOffset.offsetTop;\n            }\n\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this._enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/tooltip/TooltipContent.js\n// module id = 1128\n// module chunks = 0 1 2","/**\n * @file Legend action\n */\n\n\n    var echarts = require('../../echarts');\n    var zrUtil = require('zrender/lib/core/util');\n\n    function legendSelectActionHandler(methodName, payload, ecModel) {\n        var selectedMap = {};\n        var isToggleSelect = methodName === 'toggleSelected';\n        var isSelected;\n        // Update all legend components\n        ecModel.eachComponent('legend', function (legendModel) {\n            if (isToggleSelect && isSelected != null) {\n                // Force other legend has same selected status\n                // Or the first is toggled to true and other are toggled to false\n                // In the case one legend has some item unSelected in option. And if other legend\n                // doesn't has the item, they will assume it is selected.\n                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n            }\n            else {\n                legendModel[methodName](payload.name);\n                isSelected = legendModel.isSelected(payload.name);\n            }\n            var legendData = legendModel.getData();\n            zrUtil.each(legendData, function (model) {\n                var name = model.get('name');\n                // Wrap element\n                if (name === '\\n' || name === '') {\n                    return;\n                }\n                var isItemSelected = legendModel.isSelected(name);\n                if (selectedMap.hasOwnProperty(name)) {\n                    // Unselected if any legend is unselected\n                    selectedMap[name] = selectedMap[name] && isItemSelected;\n                }\n                else {\n                    selectedMap[name] = isItemSelected;\n                }\n            });\n        });\n        // Return the event explicitly\n        return {\n            name: payload.name,\n            selected: selectedMap\n        };\n    }\n    /**\n     * @event legendToggleSelect\n     * @type {Object}\n     * @property {string} type 'legendToggleSelect'\n     * @property {string} [from]\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendToggleSelect', 'legendselectchanged',\n        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\n    );\n\n    /**\n     * @event legendSelect\n     * @type {Object}\n     * @property {string} type 'legendSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendSelect', 'legendselected',\n        zrUtil.curry(legendSelectActionHandler, 'select')\n    );\n\n    /**\n     * @event legendUnSelect\n     * @type {Object}\n     * @property {string} type 'legendUnSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendUnSelect', 'legendunselected',\n        zrUtil.curry(legendSelectActionHandler, 'unSelect')\n    );\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/legendAction.js\n// module id = 1129\n// module chunks = 0 1 2","\n   module.exports = function (ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (legendModels && legendModels.length) {\n            ecModel.filterSeries(function (series) {\n                // If in any legend component the status is not selected.\n                // Because in legend series is assumed selected when it is not in the legend data.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(series.name)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/legendFilter.js\n// module id = 1130\n// module chunks = 0 1 2","\n\n    var featureManager = require('./featureManager');\n    var zrUtil = require('zrender/lib/core/util');\n\n    var ToolboxModel = require('../../echarts').extendComponentModel({\n\n        type: 'toolbox',\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        mergeDefaultAndTheme: function (option) {\n            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\n\n            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\n                var Feature = featureManager.get(featureName);\n                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\n            });\n        },\n\n        defaultOption: {\n\n            show: true,\n\n            z: 6,\n\n            zlevel: 0,\n\n            orient: 'horizontal',\n\n            left: 'right',\n\n            top: 'top',\n\n            // right\n            // bottom\n\n            backgroundColor: 'transparent',\n\n            borderColor: '#ccc',\n\n            borderRadius: 0,\n\n            borderWidth: 0,\n\n            padding: 5,\n\n            itemSize: 15,\n\n            itemGap: 8,\n\n            showTitle: true,\n\n            iconStyle: {\n                normal: {\n                    borderColor: '#666',\n                    color: 'none'\n                },\n                emphasis: {\n                    borderColor: '#3E98C5'\n                }\n            }\n            // textStyle: {},\n\n            // feature\n        }\n    });\n\n    module.exports = ToolboxModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/ToolboxModel.js\n// module id = 1133\n// module chunks = 0 1 2","\n\n    var featureManager = require('./featureManager');\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var Model = require('../../model/Model');\n    var DataDiffer = require('../../data/DataDiffer');\n    var listComponentHelper = require('../helper/listComponent');\n    var textContain = require('zrender/lib/contain/text');\n\n    module.exports = require('../../echarts').extendComponentView({\n\n        type: 'toolbox',\n\n        render: function (toolboxModel, ecModel, api, payload) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!toolboxModel.get('show')) {\n                return;\n            }\n\n            var itemSize = +toolboxModel.get('itemSize');\n            var featureOpts = toolboxModel.get('feature') || {};\n            var features = this._features || (this._features = {});\n\n            var featureNames = [];\n            zrUtil.each(featureOpts, function (opt, name) {\n                featureNames.push(name);\n            });\n\n            (new DataDiffer(this._featureNames || [], featureNames))\n                .add(process)\n                .update(process)\n                .remove(zrUtil.curry(process, null))\n                .execute();\n\n            // Keep for diff.\n            this._featureNames = featureNames;\n\n            function process(newIndex, oldIndex) {\n                var featureName = featureNames[newIndex];\n                var oldName = featureNames[oldIndex];\n                var featureOpt = featureOpts[featureName];\n                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\n                var feature;\n\n                if (featureName && !oldName) { // Create\n                    if (isUserFeatureName(featureName)) {\n                        feature = {\n                            model: featureModel,\n                            onclick: featureModel.option.onclick,\n                            featureName: featureName\n                        };\n                    }\n                    else {\n                        var Feature = featureManager.get(featureName);\n                        if (!Feature) {\n                            return;\n                        }\n                        feature = new Feature(featureModel, ecModel, api);\n                    }\n                    features[featureName] = feature;\n                }\n                else {\n                    feature = features[oldName];\n                    // If feature does not exsit.\n                    if (!feature) {\n                        return;\n                    }\n                    feature.model = featureModel;\n                    feature.ecModel = ecModel;\n                    feature.api = api;\n                }\n\n                if (!featureName && oldName) {\n                    feature.dispose && feature.dispose(ecModel, api);\n                    return;\n                }\n\n                if (!featureModel.get('show') || feature.unusable) {\n                    feature.remove && feature.remove(ecModel, api);\n                    return;\n                }\n\n                createIconPaths(featureModel, feature, featureName);\n\n                featureModel.setIconStatus = function (iconName, status) {\n                    var option = this.option;\n                    var iconPaths = this.iconPaths;\n                    option.iconStatus = option.iconStatus || {};\n                    option.iconStatus[iconName] = status;\n                    // FIXME\n                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\n                };\n\n                if (feature.render) {\n                    feature.render(featureModel, ecModel, api, payload);\n                }\n            }\n\n            function createIconPaths(featureModel, feature, featureName) {\n                var iconStyleModel = featureModel.getModel('iconStyle');\n\n                // If one feature has mutiple icon. they are orginaized as\n                // {\n                //     icon: {\n                //         foo: '',\n                //         bar: ''\n                //     },\n                //     title: {\n                //         foo: '',\n                //         bar: ''\n                //     }\n                // }\n                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\n                var titles = featureModel.get('title') || {};\n                if (typeof icons === 'string') {\n                    var icon = icons;\n                    var title = titles;\n                    icons = {};\n                    titles = {};\n                    icons[featureName] = icon;\n                    titles[featureName] = title;\n                }\n                var iconPaths = featureModel.iconPaths = {};\n                zrUtil.each(icons, function (iconStr, iconName) {\n                    var path = graphic.createIcon(\n                        iconStr,\n                        {},\n                        {\n                            x: -itemSize / 2,\n                            y: -itemSize / 2,\n                            width: itemSize,\n                            height: itemSize\n                        }\n                    );\n                    path.setStyle(iconStyleModel.getModel('normal').getItemStyle());\n                    path.hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\n                    graphic.setHoverStyle(path);\n\n                    if (toolboxModel.get('showTitle')) {\n                        path.__title = titles[iconName];\n                        path.on('mouseover', function () {\n                                // Should not reuse above hoverStyle, which might be modified.\n                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n                                path.setStyle({\n                                    text: titles[iconName],\n                                    textPosition: hoverStyle.textPosition || 'bottom',\n                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\n                                    textAlign: hoverStyle.textAlign || 'center'\n                                });\n                            })\n                            .on('mouseout', function () {\n                                path.setStyle({\n                                    textFill: null\n                                });\n                            });\n                    }\n                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\n\n                    group.add(path);\n                    path.on('click', zrUtil.bind(\n                        feature.onclick, feature, ecModel, api, iconName\n                    ));\n\n                    iconPaths[iconName] = path;\n                });\n            }\n\n            listComponentHelper.layout(group, toolboxModel, api);\n            // Render background after group is layout\n            // FIXME\n            group.add(listComponentHelper.makeBackground(group.getBoundingRect(), toolboxModel));\n\n            // Adjust icon title positions to avoid them out of screen\n            group.eachChild(function (icon) {\n                var titleText = icon.__title;\n                var hoverStyle = icon.hoverStyle;\n                // May be background element\n                if (hoverStyle && titleText) {\n                    var rect = textContain.getBoundingRect(\n                        titleText, textContain.makeFont(hoverStyle)\n                    );\n                    var offsetX = icon.position[0] + group.position[0];\n                    var offsetY = icon.position[1] + group.position[1] + itemSize;\n\n                    var needPutOnTop = false;\n                    if (offsetY + rect.height > api.getHeight()) {\n                        hoverStyle.textPosition = 'top';\n                        needPutOnTop = true;\n                    }\n                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\n                    if (offsetX + rect.width /  2 > api.getWidth()) {\n                        hoverStyle.textPosition = ['100%', topOffset];\n                        hoverStyle.textAlign = 'right';\n                    }\n                    else if (offsetX - rect.width / 2 < 0) {\n                        hoverStyle.textPosition = [0, topOffset];\n                        hoverStyle.textAlign = 'left';\n                    }\n                }\n            });\n        },\n\n        updateView: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\n            });\n        },\n\n        updateLayout: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\n            });\n        },\n\n        remove: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.remove && feature.remove(ecModel, api);\n            });\n            this.group.removeAll();\n        },\n\n        dispose: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.dispose && feature.dispose(ecModel, api);\n            });\n        }\n    });\n\n    function isUserFeatureName(featureName) {\n        return featureName.indexOf('my') === 0;\n    }\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/ToolboxView.js\n// module id = 1134\n// module chunks = 0 1 2","\n\n    var env = require('zrender/lib/core/env');\n    var lang = require('../../../lang').toolbox.saveAsImage;\n\n    function SaveAsImage (model) {\n        this.model = model;\n    }\n\n    SaveAsImage.defaultOption = {\n        show: true,\n        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n        title: lang.title,\n        type: 'png',\n        // Default use option.backgroundColor\n        // backgroundColor: '#fff',\n        name: '',\n        excludeComponents: ['toolbox'],\n        pixelRatio: 1,\n        lang: lang.lang.slice()\n    };\n\n    SaveAsImage.prototype.unusable = !env.canvasSupported;\n\n    var proto = SaveAsImage.prototype;\n\n    proto.onclick = function (ecModel, api) {\n        var model = this.model;\n        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\n        var $a = document.createElement('a');\n        var type = model.get('type', true) || 'png';\n        $a.download = title + '.' + type;\n        $a.target = '_blank';\n        var url = api.getConnectedDataURL({\n            type: type,\n            backgroundColor: model.get('backgroundColor', true)\n                || ecModel.get('backgroundColor') || '#fff',\n            excludeComponents: model.get('excludeComponents'),\n            pixelRatio: model.get('pixelRatio')\n        });\n        $a.href = url;\n        // Chrome and Firefox\n        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {\n            var evt = new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false\n            });\n            $a.dispatchEvent(evt);\n        }\n        // IE\n        else {\n            if (window.navigator.msSaveOrOpenBlob) {\n                var bstr = atob(url.split(',')[1]);\n                var n = bstr.length;\n                var u8arr = new Uint8Array(n);\n                while(n--) {\n                    u8arr[n] = bstr.charCodeAt(n);\n                }\n                var blob = new Blob([u8arr]);\n                window.navigator.msSaveOrOpenBlob(blob, title + '.' + type);\n            }\n            else {\n                var lang = model.get('lang');\n                var html = '' +\n                    '<body style=\"margin:0;\">' +\n                    '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />' +\n                    '</body>';\n                var tab = window.open();\n                tab.document.write(html);\n            }\n        }\n    };\n\n    require('../featureManager').register(\n        'saveAsImage', SaveAsImage\n    );\n\n    module.exports = SaveAsImage;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/feature/SaveAsImage.js\n// module id = 1135\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var lang = require('../../../lang').toolbox.magicType;\n\n    function MagicType(model) {\n        this.model = model;\n    }\n\n    MagicType.defaultOption = {\n        show: true,\n        type: [],\n        // Icon group\n        icon: {\n            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\n            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\n            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\n            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\n        },\n        // `line`, `bar`, `stack`, `tiled`\n        title: zrUtil.clone(lang.title),\n        option: {},\n        seriesIndex: {}\n    };\n\n    var proto = MagicType.prototype;\n\n    proto.getIcons = function () {\n        var model = this.model;\n        var availableIcons = model.get('icon');\n        var icons = {};\n        zrUtil.each(model.get('type'), function (type) {\n            if (availableIcons[type]) {\n                icons[type] = availableIcons[type];\n            }\n        });\n        return icons;\n    };\n\n    var seriesOptGenreator = {\n        'line': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'line',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.line') || {}, true);\n            }\n        },\n        'bar': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'bar',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.bar') || {}, true);\n            }\n        },\n        'stack': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: '__ec_magicType_stack__'\n                }, model.get('option.stack') || {}, true);\n            }\n        },\n        'tiled': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: ''\n                }, model.get('option.tiled') || {}, true);\n            }\n        }\n    };\n\n    var radioTypes = [\n        ['line', 'bar'],\n        ['stack', 'tiled']\n    ];\n\n    proto.onclick = function (ecModel, api, type) {\n        var model = this.model;\n        var seriesIndex = model.get('seriesIndex.' + type);\n        // Not supported magicType\n        if (!seriesOptGenreator[type]) {\n            return;\n        }\n        var newOption = {\n            series: []\n        };\n        var generateNewSeriesTypes = function (seriesModel) {\n            var seriesType = seriesModel.subType;\n            var seriesId = seriesModel.id;\n            var newSeriesOpt = seriesOptGenreator[type](\n                seriesType, seriesId, seriesModel, model\n            );\n            if (newSeriesOpt) {\n                // PENDING If merge original option?\n                zrUtil.defaults(newSeriesOpt, seriesModel.option);\n                newOption.series.push(newSeriesOpt);\n            }\n            // Modify boundaryGap\n            var coordSys = seriesModel.coordinateSystem;\n            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\n                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n                if (categoryAxis) {\n                    var axisDim = categoryAxis.dim;\n                    var axisType = axisDim + 'Axis';\n                    var axisModel = ecModel.queryComponents({\n                        mainType: axisType,\n                        index: seriesModel.get(name + 'Index'),\n                        id: seriesModel.get(name + 'Id')\n                    })[0];\n                    var axisIndex = axisModel.componentIndex;\n\n                    newOption[axisType] = newOption[axisType] || [];\n                    for (var i = 0; i <= axisIndex; i++) {\n                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\n                    }\n                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\n                }\n            }\n        };\n\n        zrUtil.each(radioTypes, function (radio) {\n            if (zrUtil.indexOf(radio, type) >= 0) {\n                zrUtil.each(radio, function (item) {\n                    model.setIconStatus(item, 'normal');\n                });\n            }\n        });\n\n        model.setIconStatus(type, 'emphasis');\n\n        ecModel.eachComponent(\n            {\n                mainType: 'series',\n                query: seriesIndex == null ? null : {\n                    seriesIndex: seriesIndex\n                }\n            }, generateNewSeriesTypes\n        );\n        api.dispatchAction({\n            type: 'changeMagicType',\n            currentType: type,\n            newOption: newOption\n        });\n    };\n\n    var echarts = require('../../../echarts');\n    echarts.registerAction({\n        type: 'changeMagicType',\n        event: 'magicTypeChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        ecModel.mergeOption(payload.newOption);\n    });\n\n    require('../featureManager').register('magicType', MagicType);\n\n    module.exports = MagicType;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/feature/MagicType.js\n// module id = 1136\n// module chunks = 0 1 2","/**\n * @module echarts/component/toolbox/feature/DataView\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var eventTool = require('zrender/lib/core/event');\n    var lang = require('../../../lang').toolbox.dataView;\n\n    var BLOCK_SPLITER = new Array(60).join('-');\n    var ITEM_SPLITER = '\\t';\n    /**\n     * Group series into two types\n     *  1. on category axis, like line, bar\n     *  2. others, like scatter, pie\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object}\n     * @inner\n     */\n    function groupSeries(ecModel) {\n        var seriesGroupByCategoryAxis = {};\n        var otherSeries = [];\n        var meta = [];\n        ecModel.eachRawSeries(function (seriesModel) {\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\n                var baseAxis = coordSys.getBaseAxis();\n                if (baseAxis.type === 'category') {\n                    var key = baseAxis.dim + '_' + baseAxis.index;\n                    if (!seriesGroupByCategoryAxis[key]) {\n                        seriesGroupByCategoryAxis[key] = {\n                            categoryAxis: baseAxis,\n                            valueAxis: coordSys.getOtherAxis(baseAxis),\n                            series: []\n                        };\n                        meta.push({\n                            axisDim: baseAxis.dim,\n                            axisIndex: baseAxis.index\n                        });\n                    }\n                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\n                }\n                else {\n                    otherSeries.push(seriesModel);\n                }\n            }\n            else {\n                otherSeries.push(seriesModel);\n            }\n        });\n\n        return {\n            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\n            other: otherSeries,\n            meta: meta\n        };\n    }\n\n    /**\n     * Assemble content of series on cateogory axis\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleSeriesWithCategoryAxis(series) {\n        var tables = [];\n        zrUtil.each(series, function (group, key) {\n            var categoryAxis = group.categoryAxis;\n            var valueAxis = group.valueAxis;\n            var valueAxisDim = valueAxis.dim;\n\n            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\n                return series.name;\n            }));\n            var columns = [categoryAxis.model.getCategories()];\n            zrUtil.each(group.series, function (series) {\n                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\n                    return val;\n                }));\n            });\n            // Assemble table content\n            var lines = [headers.join(ITEM_SPLITER)];\n            for (var i = 0; i < columns[0].length; i++) {\n                var items = [];\n                for (var j = 0; j < columns.length; j++) {\n                    items.push(columns[j][i]);\n                }\n                lines.push(items.join(ITEM_SPLITER));\n            }\n            tables.push(lines.join('\\n'));\n        });\n        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * Assemble content of other series\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleOtherSeries(series) {\n        return zrUtil.map(series, function (series) {\n            var data = series.getRawData();\n            var lines = [series.name];\n            var vals = [];\n            data.each(data.dimensions, function () {\n                var argLen = arguments.length;\n                var dataIndex = arguments[argLen - 1];\n                var name = data.getName(dataIndex);\n                for (var i = 0; i < argLen - 1; i++) {\n                    vals[i] = arguments[i];\n                }\n                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\n            });\n            return lines.join('\\n');\n        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * @param {module:echarts/model/Global}\n     * @return {Object}\n     * @inner\n     */\n    function getContentFromModel(ecModel) {\n\n        var result = groupSeries(ecModel);\n\n        return {\n            value: zrUtil.filter([\n                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\n                    assembleOtherSeries(result.other)\n                ], function (str) {\n                    return str.replace(/[\\n\\t\\s]/g, '');\n                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\n\n            meta: result.meta\n        };\n    }\n\n\n    function trim(str) {\n        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n    /**\n     * If a block is tsv format\n     */\n    function isTSVFormat(block) {\n        // Simple method to find out if a block is tsv format\n        var firstLine = block.slice(0, block.indexOf('\\n'));\n        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\n            return true;\n        }\n    }\n\n    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\n    /**\n     * @param {string} tsv\n     * @return {Object}\n     */\n    function parseTSVContents(tsv) {\n        var tsvLines = tsv.split(/\\n+/g);\n        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\n\n        var categories = [];\n        var series = zrUtil.map(headers, function (header) {\n            return {\n                name: header,\n                data: []\n            };\n        });\n        for (var i = 0; i < tsvLines.length; i++) {\n            var items = trim(tsvLines[i]).split(itemSplitRegex);\n            categories.push(items.shift());\n            for (var j = 0; j < items.length; j++) {\n                series[j] && (series[j].data[i] = items[j]);\n            }\n        }\n        return {\n            series: series,\n            categories: categories\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @return {Array.<Object>}\n     * @inner\n     */\n    function parseListContents(str) {\n        var lines = str.split(/\\n+/g);\n        var seriesName = trim(lines.shift());\n\n        var data = [];\n        for (var i = 0; i < lines.length; i++) {\n            var items = trim(lines[i]).split(itemSplitRegex);\n            var name = '';\n            var value;\n            var hasName = false;\n            if (isNaN(items[0])) { // First item is name\n                hasName = true;\n                name = items[0];\n                items = items.slice(1);\n                data[i] = {\n                    name: name,\n                    value: []\n                };\n                value = data[i].value;\n            }\n            else {\n                value = data[i] = [];\n            }\n            for (var j = 0; j < items.length; j++) {\n                value.push(+items[j]);\n            }\n            if (value.length === 1) {\n                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\n            }\n        }\n\n        return {\n            name: seriesName,\n            data: data\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @param {Array.<Object>} blockMetaList\n     * @return {Object}\n     * @inner\n     */\n    function parseContents(str, blockMetaList) {\n        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\n        var newOption = {\n            series: []\n        };\n        zrUtil.each(blocks, function (block, idx) {\n            if (isTSVFormat(block)) {\n                var result = parseTSVContents(block);\n                var blockMeta = blockMetaList[idx];\n                var axisKey = blockMeta.axisDim + 'Axis';\n\n                if (blockMeta) {\n                    newOption[axisKey] = newOption[axisKey] || [];\n                    newOption[axisKey][blockMeta.axisIndex] = {\n                        data: result.categories\n                    };\n                    newOption.series = newOption.series.concat(result.series);\n                }\n            }\n            else {\n                var result = parseListContents(block);\n                newOption.series.push(result);\n            }\n        });\n        return newOption;\n    }\n\n    /**\n     * @alias {module:echarts/component/toolbox/feature/DataView}\n     * @constructor\n     * @param {module:echarts/model/Model} model\n     */\n    function DataView(model) {\n\n        this._dom = null;\n\n        this.model = model;\n    }\n\n    DataView.defaultOption = {\n        show: true,\n        readOnly: false,\n        optionToContent: null,\n        contentToOption: null,\n\n        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\n        title: zrUtil.clone(lang.title),\n        lang: zrUtil.clone(lang.lang),\n        backgroundColor: '#fff',\n        textColor: '#000',\n        textareaColor: '#fff',\n        textareaBorderColor: '#333',\n        buttonColor: '#c23531',\n        buttonTextColor: '#fff'\n    };\n\n    DataView.prototype.onclick = function (ecModel, api) {\n        var container = api.getDom();\n        var model = this.model;\n        if (this._dom) {\n            container.removeChild(this._dom);\n        }\n        var root = document.createElement('div');\n        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\n        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\n\n        // Create elements\n        var header = document.createElement('h4');\n        var lang = model.get('lang') || [];\n        header.innerHTML = lang[0] || model.get('title');\n        header.style.cssText = 'margin: 10px 20px;';\n        header.style.color = model.get('textColor');\n\n        var viewMain = document.createElement('div');\n        var textarea = document.createElement('textarea');\n        viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';\n\n        var optionToContent = model.get('optionToContent');\n        var contentToOption = model.get('contentToOption');\n        var result = getContentFromModel(ecModel);\n        if (typeof optionToContent === 'function') {\n            var htmlOrDom = optionToContent(api.getOption());\n            if (typeof htmlOrDom === 'string') {\n                viewMain.innerHTML = htmlOrDom;\n            }\n            else if (zrUtil.isDom(htmlOrDom)) {\n                viewMain.appendChild(htmlOrDom);\n            }\n        }\n        else {\n            // Use default textarea\n            viewMain.appendChild(textarea);\n            textarea.readOnly = model.get('readOnly');\n            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\n            textarea.style.color = model.get('textColor');\n            textarea.style.borderColor = model.get('textareaBorderColor');\n            textarea.style.backgroundColor = model.get('textareaColor');\n            textarea.value = result.value;\n        }\n\n        var blockMetaList = result.meta;\n\n        var buttonContainer = document.createElement('div');\n        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\n\n        var buttonStyle = 'float:right;margin-right:20px;border:none;'\n            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\n        var closeButton = document.createElement('div');\n        var refreshButton = document.createElement('div');\n\n        buttonStyle += ';background-color:' + model.get('buttonColor');\n        buttonStyle += ';color:' + model.get('buttonTextColor');\n\n        var self = this;\n\n        function close() {\n            container.removeChild(root);\n            self._dom = null;\n        }\n        eventTool.addEventListener(closeButton, 'click', close);\n\n        eventTool.addEventListener(refreshButton, 'click', function () {\n            var newOption;\n            try {\n                if (typeof contentToOption === 'function') {\n                    newOption = contentToOption(viewMain, api.getOption());\n                }\n                else {\n                    newOption = parseContents(textarea.value, blockMetaList);\n                }\n            }\n            catch (e) {\n                close();\n                throw new Error('Data view format error ' + e);\n            }\n            if (newOption) {\n                api.dispatchAction({\n                    type: 'changeDataView',\n                    newOption: newOption\n                });\n            }\n\n            close();\n        });\n\n        closeButton.innerHTML = lang[1];\n        refreshButton.innerHTML = lang[2];\n        refreshButton.style.cssText = buttonStyle;\n        closeButton.style.cssText = buttonStyle;\n\n        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\n        buttonContainer.appendChild(closeButton);\n\n        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n        eventTool.addEventListener(textarea, 'keydown', function (e) {\n            if ((e.keyCode || e.which) === 9) {\n                // get caret position/selection\n                var val = this.value;\n                var start = this.selectionStart;\n                var end = this.selectionEnd;\n\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\n\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n\n                // prevent the focus lose\n                eventTool.stop(e);\n            }\n        });\n\n        root.appendChild(header);\n        root.appendChild(viewMain);\n        root.appendChild(buttonContainer);\n\n        viewMain.style.height = (container.clientHeight - 80) + 'px';\n\n        container.appendChild(root);\n        this._dom = root;\n    };\n\n    DataView.prototype.remove = function (ecModel, api) {\n        this._dom && api.getDom().removeChild(this._dom);\n    };\n\n    DataView.prototype.dispose = function (ecModel, api) {\n        this.remove(ecModel, api);\n    };\n\n    /**\n     * @inner\n     */\n    function tryMergeDataOption(newData, originalData) {\n        return zrUtil.map(newData, function (newVal, idx) {\n            var original = originalData && originalData[idx];\n            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\n                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\n                    newVal = newVal.value;\n                }\n                // Original data has option\n                return zrUtil.defaults({\n                    value: newVal\n                }, original);\n            }\n            else {\n                return newVal;\n            }\n        });\n    }\n\n    require('../featureManager').register('dataView', DataView);\n\n    require('../../../echarts').registerAction({\n        type: 'changeDataView',\n        event: 'dataViewChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        var newSeriesOptList = [];\n        zrUtil.each(payload.newOption.series, function (seriesOpt) {\n            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\n            if (!seriesModel) {\n                // New created series\n                // Geuss the series type\n                newSeriesOptList.push(zrUtil.extend({\n                    // Default is scatter\n                    type: 'scatter'\n                }, seriesOpt));\n            }\n            else {\n                var originalData = seriesModel.get('data');\n                newSeriesOptList.push({\n                    name: seriesOpt.name,\n                    data: tryMergeDataOption(seriesOpt.data, originalData)\n                });\n            }\n        });\n\n        ecModel.mergeOption(zrUtil.defaults({\n            series: newSeriesOptList\n        }, payload.newOption));\n    });\n\n    module.exports = DataView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/feature/DataView.js\n// module id = 1137\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var BrushController = require('../../helper/BrushController');\n    var BrushTargetManager = require('../../helper/BrushTargetManager');\n    var history = require('../../dataZoom/history');\n    var sliderMove = require('../../helper/sliderMove');\n    var lang = require('../../../lang').toolbox.dataZoom;\n\n    var each = zrUtil.each;\n\n    // Use dataZoomSelect\n    require('../../dataZoomSelect');\n\n    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\n    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\n\n    function DataZoom(model, ecModel, api) {\n\n        /**\n         * @private\n         * @type {module:echarts/component/helper/BrushController}\n         */\n        (this._brushController = new BrushController(api.getZr()))\n            .on('brush', zrUtil.bind(this._onBrush, this))\n            .mount();\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._isZoomActive;\n    }\n\n    DataZoom.defaultOption = {\n        show: true,\n        // Icon group\n        icon: {\n            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\n            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\n        },\n        // `zoom`, `back`\n        title: zrUtil.clone(lang.title)\n    };\n\n    var proto = DataZoom.prototype;\n\n    proto.render = function (featureModel, ecModel, api, payload) {\n        this.model = featureModel;\n        this.ecModel = ecModel;\n        this.api = api;\n\n        updateZoomBtnStatus(featureModel, ecModel, this, payload, api);\n        updateBackBtnStatus(featureModel, ecModel);\n    };\n\n    proto.onclick = function (ecModel, api, type) {\n        handlers[type].call(this);\n    };\n\n    proto.remove = function (ecModel, api) {\n        this._brushController.unmount();\n    };\n\n    proto.dispose = function (ecModel, api) {\n        this._brushController.dispose();\n    };\n\n    /**\n     * @private\n     */\n    var handlers = {\n\n        zoom: function () {\n            var nextActive = !this._isZoomActive;\n\n            this.api.dispatchAction({\n                type: 'takeGlobalCursor',\n                key: 'dataZoomSelect',\n                dataZoomSelectActive: nextActive\n            });\n        },\n\n        back: function () {\n            this._dispatchZoomAction(history.pop(this.ecModel));\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._onBrush = function (areas, opt) {\n        if (!opt.isEnd || !areas.length) {\n            return;\n        }\n        var snapshot = {};\n        var ecModel = this.ecModel;\n\n        this._brushController.updateCovers([]); // remove cover\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(this.model.option), ecModel, {include: ['grid']}\n        );\n        brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            if (coordSys.type !== 'cartesian2d') {\n                return;\n            }\n\n            var brushType = area.brushType;\n            if (brushType === 'rect') {\n                setBatch('x', coordSys, coordRange[0]);\n                setBatch('y', coordSys, coordRange[1]);\n            }\n            else {\n                setBatch(({lineX: 'x', lineY: 'y'})[brushType], coordSys, coordRange);\n            }\n        });\n\n        history.push(ecModel, snapshot);\n\n        this._dispatchZoomAction(snapshot);\n\n        function setBatch(dimName, coordSys, minMax) {\n            var axis = coordSys.getAxis(dimName);\n            var axisModel = axis.model;\n            var dataZoomModel = findDataZoom(dimName, axisModel, ecModel);\n\n            // Restrict range.\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();\n            if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {\n                minMax = sliderMove(\n                    0, minMax.slice(), axis.scale.getExtent(), 0,\n                    minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan\n                );\n            }\n\n            dataZoomModel && (snapshot[dataZoomModel.id] = {\n                dataZoomId: dataZoomModel.id,\n                startValue: minMax[0],\n                endValue: minMax[1]\n            });\n        }\n\n        function findDataZoom(dimName, axisModel, ecModel) {\n            var found;\n            ecModel.eachComponent({mainType: 'dataZoom', subType: 'select'}, function (dzModel) {\n                var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);\n                has && (found = dzModel);\n            });\n            return found;\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._dispatchZoomAction = function (snapshot) {\n        var batch = [];\n\n        // Convert from hash map to array.\n        each(snapshot, function (batchItem, dataZoomId) {\n            batch.push(zrUtil.clone(batchItem));\n        });\n\n        batch.length && this.api.dispatchAction({\n            type: 'dataZoom',\n            from: this.uid,\n            batch: batch\n        });\n    };\n\n    function retrieveAxisSetting(option) {\n        var setting = {};\n        // Compatible with previous setting: null => all axis, false => no axis.\n        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\n            setting[name] = option[name];\n            setting[name] == null && (setting[name] = 'all');\n            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\n        });\n        return setting;\n    }\n\n    function updateBackBtnStatus(featureModel, ecModel) {\n        featureModel.setIconStatus(\n            'back',\n            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\n        );\n    }\n\n    function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {\n        var zoomActive = view._isZoomActive;\n\n        if (payload && payload.type === 'takeGlobalCursor') {\n            zoomActive = payload.key === 'dataZoomSelect'\n                ? payload.dataZoomSelectActive : false;\n        }\n\n        view._isZoomActive = zoomActive;\n\n        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(featureModel.option), ecModel, {include: ['grid']}\n        );\n\n        view._brushController\n            .setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {\n                return (targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared)\n                    ? 'lineX'\n                    : (!targetInfo.xAxisDeclared && targetInfo.yAxisDeclared)\n                    ? 'lineY'\n                    : 'rect';\n            }))\n            .enableBrush(\n                zoomActive\n                ? {\n                    brushType: 'auto',\n                    brushStyle: {\n                        // FIXME user customized?\n                        lineWidth: 0,\n                        fill: 'rgba(0,0,0,0.2)'\n                    }\n                }\n                : false\n            );\n    }\n\n\n    require('../featureManager').register('dataZoom', DataZoom);\n\n\n    // Create special dataZoom option for select\n    require('../../../echarts').registerPreprocessor(function (option) {\n        if (!option) {\n            return;\n        }\n\n        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\n        if (!zrUtil.isArray(dataZoomOpts)) {\n            option.dataZoom = dataZoomOpts = [dataZoomOpts];\n        }\n\n        var toolboxOpt = option.toolbox;\n        if (toolboxOpt) {\n            // Assume there is only one toolbox\n            if (zrUtil.isArray(toolboxOpt)) {\n                toolboxOpt = toolboxOpt[0];\n            }\n\n            if (toolboxOpt && toolboxOpt.feature) {\n                var dataZoomOpt = toolboxOpt.feature.dataZoom;\n                addForAxis('xAxis', dataZoomOpt);\n                addForAxis('yAxis', dataZoomOpt);\n            }\n        }\n\n        function addForAxis(axisName, dataZoomOpt) {\n            if (!dataZoomOpt) {\n                return;\n            }\n\n            // Try not to modify model, because it is not merged yet.\n            var axisIndicesName = axisName + 'Index';\n            var givenAxisIndices = dataZoomOpt[axisIndicesName];\n            if (givenAxisIndices != null\n                && givenAxisIndices != 'all'\n                && !zrUtil.isArray(givenAxisIndices)\n            ) {\n                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\n            }\n\n            forEachComponent(axisName, function (axisOpt, axisIndex) {\n                if (givenAxisIndices != null\n                    && givenAxisIndices != 'all'\n                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\n                ) {\n                    return;\n                }\n                var newOpt = {\n                    type: 'select',\n                    $fromToolbox: true,\n                    // Id for merge mapping.\n                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\n                };\n                // FIXME\n                // Only support one axis now.\n                newOpt[axisIndicesName] = axisIndex;\n                dataZoomOpts.push(newOpt);\n            });\n        }\n\n        function forEachComponent(mainType, cb) {\n            var opts = option[mainType];\n            if (!zrUtil.isArray(opts)) {\n                opts = opts ? [opts] : [];\n            }\n            each(opts, cb);\n        }\n    });\n\n    module.exports = DataZoom;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/feature/DataZoom.js\n// module id = 1138\n// module chunks = 0 1 2","/**\n * DataZoom component entry\n */\n\n\n    require('./dataZoom/typeDefaulter');\n\n    require('./dataZoom/DataZoomModel');\n    require('./dataZoom/DataZoomView');\n\n    require('./dataZoom/SelectZoomModel');\n    require('./dataZoom/SelectZoomView');\n\n    require('./dataZoom/dataZoomProcessor');\n    require('./dataZoom/dataZoomAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoomSelect.js\n// module id = 1139\n// module chunks = 0 1 2","/**\n * @file Axis operator\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../../util/number');\n    var helper = require('./helper');\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n\n    /**\n     * Operate single axis.\n     * One axis can only operated by one axis operator.\n     * Different dataZoomModels may be defined to operate the same axis.\n     * (i.e. 'inside' data zoom and 'slider' data zoom components)\n     * So dataZoomModels share one axisProxy in that case.\n     *\n     * @class\n     */\n    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._dimName = dimName;\n\n        /**\n         * @private\n         */\n        this._axisIndex = axisIndex;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._valueWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._percentWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._dataExtent;\n\n        /**\n         * {minSpan, maxSpan, minValueSpan, maxValueSpan}\n         * @private\n         * @type {Object}\n         */\n        this._minMaxSpan;\n\n        /**\n         * @readOnly\n         * @type {module: echarts/model/Global}\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @private\n         * @type {module: echarts/component/dataZoom/DataZoomModel}\n         */\n        this._dataZoomModel = dataZoomModel;\n    };\n\n    AxisProxy.prototype = {\n\n        constructor: AxisProxy,\n\n        /**\n         * Whether the axisProxy is hosted by dataZoomModel.\n         *\n         * @public\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         * @return {boolean}\n         */\n        hostedBy: function (dataZoomModel) {\n            return this._dataZoomModel === dataZoomModel;\n        },\n\n        /**\n         * @return {Array.<number>} Value can only be NaN or finite value.\n         */\n        getDataValueWindow: function () {\n            return this._valueWindow.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getDataPercentWindow: function () {\n            return this._percentWindow.slice();\n        },\n\n        /**\n         * @public\n         * @param {number} axisIndex\n         * @return {Array} seriesModels\n         */\n        getTargetSeriesModels: function () {\n            var seriesModels = [];\n            var ecModel = this.ecModel;\n\n            ecModel.eachSeries(function (seriesModel) {\n                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {\n                    var dimName = this._dimName;\n                    var axisModel = ecModel.queryComponents({\n                        mainType: dimName + 'Axis',\n                        index: seriesModel.get(dimName + 'AxisIndex'),\n                        id: seriesModel.get(dimName + 'AxisId')\n                    })[0];\n                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\n                        seriesModels.push(seriesModel);\n                    }\n                }\n            }, this);\n\n            return seriesModels;\n        },\n\n        getAxisModel: function () {\n            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n        },\n\n        getOtherAxisModel: function () {\n            var axisDim = this._dimName;\n            var ecModel = this.ecModel;\n            var axisModel = this.getAxisModel();\n            var isCartesian = axisDim === 'x' || axisDim === 'y';\n            var otherAxisDim;\n            var coordSysIndexName;\n            if (isCartesian) {\n                coordSysIndexName = 'gridIndex';\n                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\n            }\n            else {\n                coordSysIndexName = 'polarIndex';\n                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\n            }\n            var foundOtherAxisModel;\n            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\n                if ((otherAxisModel.get(coordSysIndexName) || 0)\n                    === (axisModel.get(coordSysIndexName) || 0)\n                ) {\n                    foundOtherAxisModel = otherAxisModel;\n                }\n            });\n            return foundOtherAxisModel;\n        },\n\n        getMinMaxSpan: function () {\n            return zrUtil.clone(this._minMaxSpan);\n        },\n\n        /**\n         * Only calculate by given range and this._dataExtent, do not change anything.\n         *\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         */\n        calculateDataWindow: function (opt) {\n            var dataExtent = this._dataExtent;\n            var axisModel = this.getAxisModel();\n            var scale = axisModel.axis.scale;\n            var rangePropMode = this._dataZoomModel.getRangePropMode();\n            var percentExtent = [0, 100];\n            var percentWindow = [\n                opt.start,\n                opt.end\n            ];\n            var valueWindow = [];\n\n            each(['startValue', 'endValue'], function (prop) {\n                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);\n            });\n\n            // Normalize bound.\n            each([0, 1], function (idx) {\n                var boundValue = valueWindow[idx];\n                var boundPercent = percentWindow[idx];\n\n                // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n                // on `valueProp` ('startValue', 'endValue'). The former one is suitable\n                // for cases that a dataZoom component controls multiple axes with different\n                // unit or extent, and the latter one is suitable for accurate zoom by pixel\n                // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,\n                // but it is awkward that `percentProp` can not be obtained from `valueProp`\n                // accurately (because all of values that are overflow the `dataExtent` will\n                // be calculated to percent '100%'). So we have to use\n                // `dataZoom.getRangePropMode()` to mark which prop is used.\n                // `rangePropMode` is updated only when setOption or dispatchAction, otherwise\n                // it remains its original value.\n\n                if (rangePropMode[idx] === 'percent') {\n                    if (boundPercent == null) {\n                        boundPercent = percentExtent[idx];\n                    }\n                    // Use scale.parse to math round for category or time axis.\n                    boundValue = scale.parse(numberUtil.linearMap(\n                        boundPercent, percentExtent, dataExtent, true\n                    ));\n                }\n                else {\n                    // Calculating `percent` from `value` may be not accurate, because\n                    // This calculation can not be inversed, because all of values that\n                    // are overflow the `dataExtent` will be calculated to percent '100%'\n                    boundPercent = numberUtil.linearMap(\n                        boundValue, dataExtent, percentExtent, true\n                    );\n                }\n\n                // valueWindow[idx] = round(boundValue);\n                // percentWindow[idx] = round(boundPercent);\n                valueWindow[idx] = boundValue;\n                percentWindow[idx] = boundPercent;\n            });\n\n            return {\n                valueWindow: asc(valueWindow),\n                percentWindow: asc(percentWindow)\n            };\n        },\n\n        /**\n         * Notice: reset should not be called before series.restoreData() called,\n         * so it is recommanded to be called in \"process stage\" but not \"model init\n         * stage\".\n         *\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        reset: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            // Culculate data window and data extent, and record them.\n            this._dataExtent = calculateDataExtent(\n                this, this._dimName, this.getTargetSeriesModels()\n            );\n\n            var dataWindow = this.calculateDataWindow(dataZoomModel.option);\n\n            this._valueWindow = dataWindow.valueWindow;\n            this._percentWindow = dataWindow.percentWindow;\n\n            setMinMaxSpan(this);\n\n            // Update axis setting then.\n            setAxisModel(this);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        restore: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            this._valueWindow = this._percentWindow = null;\n            setAxisModel(this, true);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        filterData: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            var axisDim = this._dimName;\n            var seriesModels = this.getTargetSeriesModels();\n            var filterMode = dataZoomModel.get('filterMode');\n            var valueWindow = this._valueWindow;\n\n            if (filterMode === 'none') {\n                return;\n            }\n\n            // FIXME\n            // Toolbox may has dataZoom injected. And if there are stacked bar chart\n            // with NaN data, NaN will be filtered and stack will be wrong.\n            // So we need to force the mode to be set empty.\n            // In fect, it is not a big deal that do not support filterMode-'filter'\n            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n            // selection\" some day, which might need \"adapt to data extent on the\n            // otherAxis\", which is disabled by filterMode-'empty'.\n            var otherAxisModel = this.getOtherAxisModel();\n            if (dataZoomModel.get('$fromToolbox')\n                && otherAxisModel\n                && otherAxisModel.get('type') === 'category'\n            ) {\n                filterMode = 'empty';\n            }\n\n            // Process series data\n            each(seriesModels, function (seriesModel) {\n                var seriesData = seriesModel.getData();\n                var dataDims = seriesModel.coordDimToDataDim(axisDim);\n\n                if (filterMode === 'weakFilter') {\n                    seriesData && seriesData.filterSelf(function (dataIndex) {\n                        var leftOut;\n                        var rightOut;\n                        var hasValue;\n                        for (var i = 0; i < dataDims.length; i++) {\n                            var value = seriesData.get(dataDims[i], dataIndex);\n                            var thisHasValue = !isNaN(value);\n                            var thisLeftOut = value < valueWindow[0];\n                            var thisRightOut = value > valueWindow[1];\n                            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n                                return true;\n                            }\n                            thisHasValue && (hasValue = true);\n                            thisLeftOut && (leftOut = true);\n                            thisRightOut && (rightOut = true);\n                        }\n                        // If both left out and right out, do not filter.\n                        return hasValue && leftOut && rightOut;\n                    });\n                }\n                else {\n                    seriesData && each(dataDims, function (dim) {\n                        if (filterMode === 'empty') {\n                            seriesModel.setData(\n                                seriesData.map(dim, function (value) {\n                                    return !isInWindow(value) ? NaN : value;\n                                })\n                            );\n                        }\n                        else {\n                            seriesData.filterSelf(dim, isInWindow);\n                        }\n                    });\n                }\n            });\n\n            function isInWindow(value) {\n                return value >= valueWindow[0] && value <= valueWindow[1];\n            }\n        }\n    };\n\n    function calculateDataExtent(axisProxy, axisDim, seriesModels) {\n        var dataExtent = [Infinity, -Infinity];\n\n        each(seriesModels, function (seriesModel) {\n            var seriesData = seriesModel.getData();\n            if (seriesData) {\n                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n                    var seriesExtent = seriesData.getDataExtent(dim);\n                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n                });\n            }\n        });\n\n        if (dataExtent[1] < dataExtent[0]) {\n            dataExtent = [NaN, NaN];\n        }\n\n        // It is important to get \"consistent\" extent when more then one axes is\n        // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n        // when zooming. But it is difficult to know what is \"consistent\", considering\n        // axes have different type or even different meanings (For example, two\n        // time axes are used to compare data of the same date in different years).\n        // So basically dataZoom just obtains extent by series.data (in category axis\n        // extent can be obtained from axis.data).\n        // Nevertheless, user can set min/max/scale on axes to make extent of axes\n        // consistent.\n        fixExtentByAxis(axisProxy, dataExtent);\n\n        return dataExtent;\n    }\n\n    function fixExtentByAxis(axisProxy, dataExtent) {\n        var axisModel = axisProxy.getAxisModel();\n        var min = axisModel.getMin(true);\n\n        // For category axis, if min/max/scale are not set, extent is determined\n        // by axis.data by default.\n        var isCategoryAxis = axisModel.get('type') === 'category';\n        var axisDataLen = isCategoryAxis && (axisModel.get('data') || []).length;\n\n        if (min != null && min !== 'dataMin' && typeof min !== 'function') {\n            dataExtent[0] = min;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[0] = axisDataLen > 0 ? 0 : NaN;\n        }\n\n        var max = axisModel.getMax(true);\n        if (max != null && max !== 'dataMax' && typeof max !== 'function') {\n            dataExtent[1] = max;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;\n        }\n\n        if (!axisModel.get('scale', true)) {\n            dataExtent[0] > 0 && (dataExtent[0] = 0);\n            dataExtent[1] < 0 && (dataExtent[1] = 0);\n        }\n\n        // For value axis, if min/max/scale are not set, we just use the extent obtained\n        // by series data, which may be a little different from the extent calculated by\n        // `axisHelper.getScaleExtent`. But the different just affects the experience a\n        // little when zooming. So it will not be fixed until some users require it strongly.\n\n        return dataExtent;\n    }\n\n    function setAxisModel(axisProxy, isRestore) {\n        var axisModel = axisProxy.getAxisModel();\n\n        var percentWindow = axisProxy._percentWindow;\n        var valueWindow = axisProxy._valueWindow;\n\n        if (!percentWindow) {\n            return;\n        }\n\n        // [0, 500]: arbitrary value, guess axis extent.\n        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n        precision = Math.min(precision, 20);\n        // isRestore or isFull\n        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\n\n        axisModel.setRange(\n            useOrigin ? null : +valueWindow[0].toFixed(precision),\n            useOrigin ? null : +valueWindow[1].toFixed(precision)\n        );\n    }\n\n    function setMinMaxSpan(axisProxy) {\n        var minMaxSpan = axisProxy._minMaxSpan = {};\n        var dataZoomModel = axisProxy._dataZoomModel;\n\n        each(['min', 'max'], function (minMax) {\n            minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span');\n\n            // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n            var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n            if (valueSpan != null) {\n                minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n\n                valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);\n                if (valueSpan != null) {\n                    minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(\n                        valueSpan, axisProxy._dataExtent, [0, 100], true\n                    );\n                }\n            }\n        });\n    }\n\n    module.exports = AxisProxy;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/AxisProxy.js\n// module id = 1140\n// module chunks = 0 1 2","/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = require('./DataZoomModel');\n\n    module.exports = DataZoomModel.extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/SelectZoomModel.js\n// module id = 1141\n// module chunks = 0 1 2","\n\n    module.exports = require('./DataZoomView').extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/dataZoom/SelectZoomView.js\n// module id = 1142\n// module chunks = 0 1 2","'use strict';\n\n\n    var history = require('../../dataZoom/history');\n    var lang = require('../../../lang').toolbox.restore;\n\n    function Restore(model) {\n        this.model = model;\n    }\n\n    Restore.defaultOption = {\n        show: true,\n        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\n        title: lang.title\n    };\n\n    var proto = Restore.prototype;\n\n    proto.onclick = function (ecModel, api, type) {\n        history.clear(ecModel);\n\n        api.dispatchAction({\n            type: 'restore',\n            from: this.uid\n        });\n    };\n\n\n    require('../featureManager').register('restore', Restore);\n\n\n    require('../../../echarts').registerAction(\n        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\n        function (payload, ecModel) {\n            ecModel.resetOption('recreate');\n        }\n    );\n\n    module.exports = Restore;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/feature/Restore.js\n// module id = 1143\n// module chunks = 0 1 2","\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (!coordSys) {\n                return;\n            }\n\n            var dims = [];\n            var coordDims = coordSys.dimensions;\n            for (var i = 0; i < coordDims.length; i++) {\n                dims.push(seriesModel.coordDimToDataDim(coordSys.dimensions[i])[0]);\n            }\n\n            if (dims.length === 1) {\n                data.each(dims[0], function (x, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                });\n            }\n            else if (dims.length === 2) {\n                data.each(dims, function (x, y, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(\n                        idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                    );\n                }, true);\n            }\n        });\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/layout/points.js\n// module id = 1144\n// module chunks = 0 1","/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = require('../../util/layout');\n    var axisHelper = require('../../coord/axisHelper');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian2D = require('./Cartesian2D');\n    var Axis2D = require('./Axis2D');\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    require('./GridModel');\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var axisLabelModel = axisModel.getModel('axisLabel');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = axisLabelModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this.model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.axisPointerEnabled = true;\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this.model);\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis.scale, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis.scale, yAxis.model);\n        });\n        each(axesMap.x, function (xAxis) {\n            fixAxisOnZero(axesMap, 'y', xAxis);\n        });\n        each(axesMap.y, function (yAxis) {\n            fixAxisOnZero(axesMap, 'x', yAxis);\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this.model, api);\n    };\n\n    function fixAxisOnZero(axesMap, otherAxisDim, axis) {\n        // onZero can not be enabled in these two situations:\n        // 1. When any other axis is a category axis.\n        // 2. When no axis is cross 0 point.\n        var axes = axesMap[otherAxisDim];\n\n        if (!axis.onZero) {\n            return;\n        }\n\n        var onZeroAxisIndex = axis.onZeroAxisIndex;\n\n        // If target axis is specified.\n        if (onZeroAxisIndex != null) {\n            var otherAxis = axes[onZeroAxisIndex];\n            if (otherAxis && canNotOnZeroToAxis(otherAxis)) {\n                axis.onZero = false;\n            }\n            return;\n        }\n\n        for (var idx in axes) {\n            if (axes.hasOwnProperty(idx)) {\n                var otherAxis = axes[idx];\n                if (otherAxis && !canNotOnZeroToAxis(otherAxis)) {\n                    onZeroAxisIndex = +idx;\n                    break;\n                }\n            }\n        }\n\n        if (onZeroAxisIndex == null) {\n            axis.onZero = false;\n        }\n        axis.onZeroAxisIndex = onZeroAxisIndex;\n    }\n\n    function canNotOnZeroToAxis(axis) {\n        return axis.type === 'category' || axis.type === 'time' || !ifAxisCrossZero(axis);\n    }\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api, ignoreContainLabel) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (!ignoreContainLabel && gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {number} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    /**\n     * @return {Array.<module:echarts/coord/Axis>}\n     */\n    gridProto.getAxes = function () {\n        return this._axesList.slice();\n    };\n\n    /**\n     * Usage:\n     *      grid.getCartesian(xAxisIndex, yAxisIndex);\n     *      grid.getCartesian(xAxisIndex);\n     *      grid.getCartesian(null, yAxisIndex);\n     *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});\n     *\n     * @param {number|Object} [xAxisIndex]\n     * @param {number} [yAxisIndex]\n     */\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n\n        if (zrUtil.isObject(xAxisIndex)) {\n            yAxisIndex = xAxisIndex.yAxisIndex;\n            xAxisIndex = xAxisIndex.xAxisIndex;\n        }\n        // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n        for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n            if (coordList[i].getAxis('x').index === xAxisIndex\n                || coordList[i].getAxis('y').index === yAxisIndex\n            ) {\n                return coordList[i];\n            }\n        }\n    };\n\n    gridProto.getCartesians = function () {\n        return this._coordsList.slice();\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n                cartesian.model = gridModel;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n                axis.onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined\n     * @return {Object} {baseAxes: [], otherAxes: []}\n     */\n    gridProto.getTooltipAxes = function (dim) {\n        var baseAxes = [];\n        var otherAxes = [];\n\n        each(this.getCartesians(), function (cartesian) {\n            var baseAxis = (dim != null && dim !== 'auto')\n                ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n            var otherAxis = cartesian.getOtherAxis(baseAxis);\n            zrUtil.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n            zrUtil.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n        });\n\n        return {baseAxes: baseAxes, otherAxes: otherAxes};\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            // dataSampling requires axis extent, so resize\n            // should be performed in create stage.\n            grid.resize(gridModel, api, true);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;\n\n    require('../../CoordinateSystem').register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/Grid.js\n// module id = 1145\n// module chunks = 0 1","'use strict';\n\n\n    var ComponentModel = require('../../model/Component');\n    var zrUtil = require('zrender/lib/core/util');\n    var axisModelCreator = require('../axisModelCreator');\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, require('../axisModelCommonMixin'));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/AxisModel.js\n// module id = 1146\n// module chunks = 0 1","/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var modelUtil = require('../../util/model');\n\n    var helper = {};\n\n    helper.findLabelValueDim = function (data) {\n        var valueDim;\n        var labelDims = modelUtil.otherDimToDataDim(data, 'label');\n\n        if (labelDims.length) {\n            valueDim = labelDims[0];\n        }\n        else {\n            // Get last value dim\n            var dimensions = data.dimensions.slice();\n            var dataType;\n            while (dimensions.length && (\n                valueDim = dimensions.pop(),\n                dataType = data.getDimensionInfo(valueDim).type,\n                dataType === 'ordinal' || dataType === 'time'\n            )) {} // jshint ignore:line\n        }\n\n        return valueDim;\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/helper/labelHelper.js\n// module id = 1150\n// module chunks = 0 1","// Poly path support NaN point\n\n\n    var Path = require('zrender/lib/graphic/Path');\n    var vec2 = require('zrender/lib/core/vector');\n    var fixClipWithShadow = require('zrender/lib/graphic/helper/fixClipWithShadow');\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            brush: fixClipWithShadow(Path.prototype.brush),\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            brush: fixClipWithShadow(Path.prototype.brush),\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/line/poly.js\n// module id = 1151\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        axisPointer: {},\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            onZeroAxisIndex: null,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            showMinLabel: null, // true | false | null (auto)\n            showMaxLabel: null, // true | false | null (auto)\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            fontSize: 12\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n        // maxInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n\n    var logAxis = zrUtil.defaults({\n        scale: true,\n        logBase: 10\n    }, valueAxis);\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/axisDefault.js\n// module id = 1152\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n    var PRIORITY = echarts.PRIORITY;\n\n    require('./line/LineSeries');\n    require('./line/LineView');\n\n    echarts.registerVisual(zrUtil.curry(\n        require('../visual/symbol'), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        require('../layout/points'), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        require('../processor/dataSample'), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    require('../component/gridSimple');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/line.js\n// module id = 1162\n// module chunks = 0 1","'use strict';\n\n\n    var createListFromArray = require('../helper/createListFromArray');\n    var SeriesModel = require('../../model/Series');\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n            // cursor: null,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/line/LineSeries.js\n// module id = 1163\n// module chunks = 0 1","'use strict';\n// FIXME step not support polar\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var SymbolDraw = require('../helper/SymbolDraw');\n    var Symbol = require('../helper/Symbol');\n    var lineAnimationDiff = require('./lineAnimationDiff');\n    var graphic = require('../../util/graphic');\n    var modelUtil = require('../../util/model');\n    var polyHelper = require('./poly');\n    var ChartView = require('../../view/Chart');\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n\n        var valueStart = 0;\n        if (!baseAxis.onZero) {\n            var extent = valueAxis.scale.getExtent();\n            if (extent[0] > 0) {\n                // Both positive\n                valueStart = extent[0];\n            }\n            else if (extent[1] < 0) {\n                // Both negative\n                valueStart = extent[1];\n            }\n            // If is one positive, and one negative, onZero shall be true\n        }\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // FIXME\n                // can not downplay completely.\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/line/LineView.js\n// module id = 1164\n// module chunks = 0 1","\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/chart/line/lineAnimationDiff.js\n// module id = 1165\n// module chunks = 0 1","\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/processor/dataSample.js\n// module id = 1166\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian = require('./Cartesian');\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/Cartesian2D.js\n// module id = 1167\n// module chunks = 0 1","'use strict';\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/Cartesian.js\n// module id = 1168\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Axis = require('../Axis');\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        /**\n         * Each item cooresponds to this.getExtent(), which\n         * means globalExtent[0] may greater than globalExtent[1],\n         * unless `asc` is input.\n         *\n         * @param {boolean} [asc]\n         * @return {Array.<number>}\n         */\n        getGlobalExtent: function (asc) {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            asc && ret[0] > ret[1] && ret.reverse();\n            return ret;\n        },\n\n        getOtherAxis: function () {\n            this.grid.getOtherAxis();\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * @override\n         */\n        pointToData: function (point, clamp) {\n            return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/Axis2D.js\n// module id = 1169\n// module chunks = 0 1","'use strict';\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    require('./AxisModel');\n\n    var ComponentModel = require('../../model/Component');\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/cartesian/GridModel.js\n// module id = 1170\n// module chunks = 0 1","'use strict';\n// TODO boundaryGap\n\n\n    require('../coord/cartesian/AxisModel');\n\n    require('./axis/CartesianAxisView');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axis.js\n// module id = 1171\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var AxisBuilder = require('./AxisBuilder');\n    var AxisView = require('./AxisView');\n    var cartesianAxisHelper = require('./cartesianAxisHelper');\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisTickLabel', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var CartesianAxisView = AxisView.extend({\n\n        type: 'cartesianAxis',\n\n        axisPointerClass: 'CartesianAxisPointer',\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n            CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n            var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(\n                    axis, i, lineInterval, ticksCoords.length,\n                    showMinLabel, showMaxLabel\n                )) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n            var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(\n                    axis, i, areaInterval, ticksCoords.length,\n                    showMinLabel, showMaxLabel\n                )) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    CartesianAxisView.extend({\n        type: 'xAxis'\n    });\n    CartesianAxisView.extend({\n        type: 'yAxis'\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/axis/CartesianAxisView.js\n// module id = 1172\n// module chunks = 0 1","\n\n    require('./gridSimple');\n\n    require('./axisPointer/CartesianAxisPointer');\n\n    require('./axisPointer');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/grid.js\n// module id = 1174\n// module chunks = 0 1","/**\n * Legend component entry file8\n */\n\n\n    require('./legend');\n\n    require('./legend/ScrollableLegendModel');\n    require('./legend/ScrollableLegendView');\n    require('./legend/scrollableLegendAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legendScroll.js\n// module id = 1175\n// module chunks = 0 1","\n\n    var LegendModel = require('./LegendModel');\n    var layout = require('../../util/layout');\n\n    var ScrollableLegendModel = LegendModel.extend({\n\n        type: 'legend.scroll',\n\n        /**\n         * @param {number} scrollDataIndex\n         */\n        setScrollDataIndex: function (scrollDataIndex) {\n            this.option.scrollDataIndex = scrollDataIndex;\n        },\n\n        defaultOption: {\n            scrollDataIndex: 0,\n            pageButtonItemGap: 5,\n            pageButtonGap: null,\n            pageButtonPosition: 'end', // 'start' or 'end'\n            pageFormatter: '{current}/{total}', // If null/undefined, do not show page.\n            pageIcons: {\n                horizontal: ['M0,0L12,-10L12,10z', 'M0,0L-12,-10L-12,10z'],\n                vertical: ['M0,0L20,0L10,-20z', 'M0,0L20,0L10,20z']\n            },\n            pageIconColor: '#2f4554',\n            pageIconInactiveColor: '#aaa',\n            pageIconSize: 15, // Can be [10, 3], which represents [width, height]\n            pageTextStyle: {\n                color: '#333'\n            },\n\n            animationDurationUpdate: 800\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel, extraOpt) {\n            var inputPositionParams = layout.getLayoutParams(option);\n\n            ScrollableLegendModel.superCall(this, 'init', option, parentModel, ecModel, extraOpt);\n\n            mergeAndNormalizeLayoutParams(this, option, inputPositionParams);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (option, extraOpt) {\n            ScrollableLegendModel.superCall(this, 'mergeOption', option, extraOpt);\n\n            mergeAndNormalizeLayoutParams(this, this.option, option);\n        },\n\n        getOrient: function () {\n            return this.get('orient') === 'vertical'\n                ? {index: 1, name: 'vertical'}\n                : {index: 0, name: 'horizontal'};\n        }\n\n    });\n\n    // Do not `ignoreSize` to enable setting {left: 10, right: 10}.\n    function mergeAndNormalizeLayoutParams(legendModel, target, raw) {\n        var orient = legendModel.getOrient();\n        var ignoreSize = [1, 1];\n        ignoreSize[orient.index] = 0;\n        layout.mergeLayoutParam(target, raw, {\n            type: 'box', ignoreSize: ignoreSize\n        });\n    }\n\n    module.exports = ScrollableLegendModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/ScrollableLegendModel.js\n// module id = 1176\n// module chunks = 0 1","/**\n * Separate legend and scrollable legend to reduce package size.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var layoutUtil = require('../../util/layout');\n    var LegendView = require('./LegendView');\n\n    var Group = graphic.Group;\n\n    var WH = ['width', 'height'];\n    var XY = ['x', 'y'];\n\n    var ScrollableLegendView = LegendView.extend({\n\n        type: 'legend.scroll',\n\n        newlineDisabled: true,\n\n        init: function () {\n\n            ScrollableLegendView.superCall(this, 'init');\n\n            /**\n             * @private\n             * @type {number} For `scroll`.\n             */\n            this._currentIndex = 0;\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._containerGroup = new Group());\n            this._containerGroup.add(this.getContentGroup());\n\n            /**\n             * @private\n             * @type {module:zrender/container/Group}\n             */\n            this.group.add(this._controllerGroup = new Group());\n        },\n\n        /**\n         * @override\n         */\n        resetInner: function () {\n            ScrollableLegendView.superCall(this, 'resetInner');\n\n            this._controllerGroup.removeAll();\n            this._containerGroup.removeClipPath();\n            this._containerGroup.__rectSize = null;\n        },\n\n        /**\n         * @override\n         */\n        renderInner: function (itemAlign, legendModel, ecModel, api) {\n            var me = this;\n\n            // Render content items.\n            ScrollableLegendView.superCall(this, 'renderInner', itemAlign, legendModel, ecModel, api);\n\n            var controllerGroup = this._controllerGroup;\n\n            var pageIconSize = legendModel.get('pageIconSize', true);\n            if (!zrUtil.isArray(pageIconSize)) {\n                pageIconSize = [pageIconSize, pageIconSize];\n            }\n\n            createPageButton('pagePrev', 0);\n\n            var pageTextStyleModel = legendModel.getModel('pageTextStyle');\n            controllerGroup.add(new graphic.Text({\n                name: 'pageText',\n                style: {\n                    textFill: pageTextStyleModel.getTextColor(),\n                    font: pageTextStyleModel.getFont(),\n                    textVerticalAlign: 'middle',\n                    textAlign: 'center'\n                },\n                silent: true\n            }));\n\n            createPageButton('pageNext', 1);\n\n            function createPageButton(name, iconIdx) {\n                var pageDataIndexName = name + 'DataIndex';\n                var icon = graphic.createIcon(\n                    legendModel.get('pageIcons', true)[legendModel.getOrient().name][iconIdx],\n                    {\n                        // Buttons will be created in each render, so we do not need\n                        // to worry about avoiding using legendModel kept in scope.\n                        onclick: zrUtil.bind(\n                            me._pageGo, me, pageDataIndexName, legendModel, api\n                        )\n                    },\n                    {\n                        x: -pageIconSize[0] / 2,\n                        y: -pageIconSize[1] / 2,\n                        width: pageIconSize[0],\n                        height: pageIconSize[1]\n                    }\n                );\n                icon.name = name;\n                controllerGroup.add(icon);\n            }\n        },\n\n        /**\n         * @override\n         */\n        layoutInner: function (legendModel, itemAlign, maxSize) {\n            var contentGroup = this.getContentGroup();\n            var containerGroup = this._containerGroup;\n            var controllerGroup = this._controllerGroup;\n\n            var orientIdx = legendModel.getOrient().index;\n            var wh = WH[orientIdx];\n            var hw = WH[1 - orientIdx];\n            var yx = XY[1 - orientIdx];\n\n            // Place items in contentGroup.\n            layoutUtil.box(\n                legendModel.get('orient'),\n                contentGroup,\n                legendModel.get('itemGap'),\n                !orientIdx ? null : maxSize.width,\n                orientIdx ? null : maxSize.height\n            );\n\n            layoutUtil.box(\n                // Buttons in controller are layout always horizontally.\n                'horizontal',\n                controllerGroup,\n                legendModel.get('pageButtonItemGap', true)\n            );\n\n            var contentRect = contentGroup.getBoundingRect();\n            var controllerRect = controllerGroup.getBoundingRect();\n            var showController = contentRect[wh] > maxSize[wh];\n\n            var contentPos = [-contentRect.x, -contentRect.y];\n            // Remain contentPos when scroll animation perfroming.\n            contentPos[orientIdx] = contentGroup.position[orientIdx];\n\n            // Layout container group based on 0.\n            var containerPos = [0, 0];\n            var controllerPos = [-controllerRect.x, -controllerRect.y];\n            var pageButtonGap = zrUtil.retrieve2(\n                legendModel.get('pageButtonGap', true), legendModel.get('itemGap', true)\n            );\n\n            // Place containerGroup and controllerGroup and contentGroup.\n            if (showController) {\n                var pageButtonPosition = legendModel.get('pageButtonPosition', true);\n                // controller is on the right / bottom.\n                if (pageButtonPosition === 'end') {\n                    controllerPos[orientIdx] += maxSize[wh] - controllerRect[wh];\n                }\n                // controller is on the left / top.\n                else {\n                    containerPos[orientIdx] += controllerRect[wh] + pageButtonGap;\n                }\n            }\n\n            // Always align controller to content as 'middle'.\n            controllerPos[1 - orientIdx] += contentRect[hw] / 2 - controllerRect[hw] / 2;\n\n            contentGroup.attr('position', contentPos);\n            containerGroup.attr('position', containerPos);\n            controllerGroup.attr('position', controllerPos);\n\n            // Calculate `mainRect` and set `clipPath`.\n            // mainRect should not be calculated by `this.group.getBoundingRect()`\n            // for sake of the overflow.\n            var mainRect = this.group.getBoundingRect();\n            var mainRect = {x: 0, y: 0};\n            // Consider content may be overflow (should be clipped).\n            mainRect[wh] = showController ? maxSize[wh] : contentRect[wh];\n            mainRect[hw] = Math.max(contentRect[hw], controllerRect[hw]);\n            // `containerRect[yx] + containerPos[1 - orientIdx]` is 0.\n            mainRect[yx] = Math.min(0, controllerRect[yx] + controllerPos[1 - orientIdx]);\n\n            containerGroup.__rectSize = maxSize[wh];\n            if (showController) {\n                var clipShape = {x: 0, y: 0};\n                clipShape[wh] = Math.max(maxSize[wh] - controllerRect[wh] - pageButtonGap, 0);\n                clipShape[hw] = mainRect[hw];\n                containerGroup.setClipPath(new graphic.Rect({shape: clipShape}));\n                // Consider content may be larger than container, container rect\n                // can not be obtained from `containerGroup.getBoundingRect()`.\n                containerGroup.__rectSize = clipShape[wh];\n            }\n            else {\n                // Do not remove or ignore controller. Keep them set as place holders.\n                controllerGroup.eachChild(function (child) {\n                    child.attr({invisible: true, silent: true});\n                });\n            }\n\n            // Content translate animation.\n            var pageInfo = this._getPageInfo(legendModel);\n            pageInfo.pageIndex != null && graphic.updateProps(\n                contentGroup, {position: pageInfo.contentPosition}, legendModel\n            );\n\n            this._updatePageInfoView(legendModel, pageInfo);\n\n            return mainRect;\n        },\n\n        _pageGo: function (to, legendModel, api) {\n            var scrollDataIndex = this._getPageInfo(legendModel)[to];\n\n            scrollDataIndex != null && api.dispatchAction({\n                type: 'legendScroll',\n                scrollDataIndex: scrollDataIndex,\n                legendId: legendModel.id\n            });\n        },\n\n        _updatePageInfoView: function (legendModel, pageInfo) {\n            var controllerGroup = this._controllerGroup;\n\n            zrUtil.each(['pagePrev', 'pageNext'], function (name) {\n                var canJump = pageInfo[name + 'DataIndex'] != null;\n                var icon = controllerGroup.childOfName(name);\n                if (icon) {\n                    icon.setStyle(\n                        'fill',\n                        canJump\n                            ? legendModel.get('pageIconColor', true)\n                            : legendModel.get('pageIconInactiveColor', true)\n                    );\n                    icon.cursor = canJump ? 'pointer' : 'default';\n                }\n            });\n\n            var pageText = controllerGroup.childOfName('pageText');\n            var pageFormatter = legendModel.get('pageFormatter');\n            var pageIndex = pageInfo.pageIndex;\n            var current = pageIndex != null ? pageIndex + 1 : 0;\n            var total = pageInfo.pageCount;\n\n            pageText && pageFormatter && pageText.setStyle(\n                'text',\n                zrUtil.isString(pageFormatter)\n                    ? pageFormatter.replace('{current}', current).replace('{total}', total)\n                    : pageFormatter({current: current, total: total})\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Model} legendModel\n         * @return {Object} {\n         *  contentPosition: Array.<number>, null when data item not found.\n         *  pageIndex: number, null when data item not found.\n         *  pageCount: number, always be a number, can be 0.\n         *  pagePrevDataIndex: number, null when no next page.\n         *  pageNextDataIndex: number, null when no previous page.\n         * }\n         */\n        _getPageInfo: function (legendModel) {\n            // Align left or top by the current dataIndex.\n            var currDataIndex = legendModel.get('scrollDataIndex', true);\n            var contentGroup = this.getContentGroup();\n            var contentRect = contentGroup.getBoundingRect();\n            var containerRectSize = this._containerGroup.__rectSize;\n\n            var orientIdx = legendModel.getOrient().index;\n            var wh = WH[orientIdx];\n            var hw = WH[1 - orientIdx];\n            var xy = XY[orientIdx];\n            var contentPos = contentGroup.position.slice();\n\n            var pageIndex;\n            var pagePrevDataIndex;\n            var pageNextDataIndex;\n\n            var targetItemGroup;\n            contentGroup.eachChild(function (child) {\n                if (child.__legendDataIndex === currDataIndex) {\n                    targetItemGroup = child;\n                }\n            });\n\n            var pageCount = containerRectSize ? Math.ceil(contentRect[wh] / containerRectSize) : 0;\n\n            if (targetItemGroup) {\n                var itemRect = targetItemGroup.getBoundingRect();\n                var itemLoc = targetItemGroup.position[orientIdx] + itemRect[xy];\n                contentPos[orientIdx] = -itemLoc - contentRect[xy];\n                pageIndex = Math.floor(\n                    pageCount * (itemLoc + itemRect[xy] + containerRectSize / 2) / contentRect[wh]\n                );\n                pageIndex = (contentRect[wh] && pageCount)\n                    ? Math.max(0, Math.min(pageCount - 1, pageIndex))\n                    : -1;\n\n                var winRect = {x: 0, y: 0};\n                winRect[wh] = containerRectSize;\n                winRect[hw] = contentRect[hw];\n                winRect[xy] = -contentPos[orientIdx] - contentRect[xy];\n\n                var startIdx;\n                var children = contentGroup.children();\n\n                contentGroup.eachChild(function (child, index) {\n                    var itemRect = getItemRect(child);\n\n                    if (itemRect.intersect(winRect)) {\n                        startIdx == null && (startIdx = index);\n                        // It is user-friendly that the last item shown in the\n                        // current window is shown at the begining of next window.\n                        pageNextDataIndex = child.__legendDataIndex;\n                    }\n\n                    // If the last item is shown entirely, no next page.\n                    if (index === children.length - 1\n                        && itemRect[xy] + itemRect[wh] <= winRect[xy] + winRect[wh]\n                    ) {\n                        pageNextDataIndex = null;\n                    }\n                });\n\n                // Always align based on the left/top most item, so the left/top most\n                // item in the previous window is needed to be found here.\n                if (startIdx != null) {\n                    var startItem = children[startIdx];\n                    var startRect = getItemRect(startItem);\n                    winRect[xy] = startRect[xy] + startRect[wh] - winRect[wh];\n\n                    // If the first item is shown entirely, no previous page.\n                    if (startIdx <= 0 && startRect[xy] >= winRect[xy]) {\n                        pagePrevDataIndex = null;\n                    }\n                    else {\n                        while (startIdx > 0 && getItemRect(children[startIdx - 1]).intersect(winRect)) {\n                            startIdx--;\n                        }\n                        pagePrevDataIndex = children[startIdx].__legendDataIndex;\n                    }\n                }\n            }\n\n            return {\n                contentPosition: contentPos,\n                pageIndex: pageIndex,\n                pageCount: pageCount,\n                pagePrevDataIndex: pagePrevDataIndex,\n                pageNextDataIndex: pageNextDataIndex\n            };\n\n            function getItemRect(el) {\n                var itemRect = el.getBoundingRect().clone();\n                itemRect[xy] += el.position[orientIdx];\n                return itemRect;\n            }\n        }\n\n    });\n\n    module.exports = ScrollableLegendView;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/ScrollableLegendView.js\n// module id = 1177\n// module chunks = 0 1","/**\n * @file Legend action\n */\n\n\n    /**\n     * @event legendScroll\n     * @type {Object}\n     * @property {string} type 'legendScroll'\n     * @property {string} scrollDataIndex\n     */\n    require('../../echarts').registerAction(\n        'legendScroll', 'legendscroll',\n        function (payload, ecModel) {\n            var scrollDataIndex = payload.scrollDataIndex;\n\n            scrollDataIndex != null && ecModel.eachComponent(\n                {mainType: 'legend', subType: 'scroll', query: payload},\n                function (legendModel) {\n                    legendModel.setScrollDataIndex(scrollDataIndex);\n                }\n            );\n        }\n    );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/legend/scrollableLegendAction.js\n// module id = 1178\n// module chunks = 0 1","import React from 'react'\nimport echarts from 'echarts/lib/echarts' //必须\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/grid'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/component/legendScroll'\nimport 'echarts/lib/component/toolbox'\n\nexport default class LineReact extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.initPie = this.initPie.bind(this)\n  }\n  \n  initPie() {\n    const { option={} } = this.props; //外部传入的data数据\n    let myChart = echarts.init(this.ID); //初始化echarts\n    \n    //设置options\n    myChart.setOption(option)\n    window.onresize = function() {\n      myChart.resize()\n    }\n  }\n  \n  componentDidMount() {\n    this.initPie()\n  }\n  \n  componentDidUpdate() {\n    this.initPie()\n  }\n  \n  render() {\n    const { width=\"100%\", height=\"300px\" } = this.props\n    return <div ref={ID => this.ID = ID} style={{width, height}}></div>\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Echarts/LineReact.js","/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            var Ctor = source.constructor;\n            if (source.constructor.from) {\n                result = Ctor.from(source);\n            }\n            else {\n                result = new Ctor(source.length);\n                for (var i = 0, len = source.length; i < len; i++) {\n                    result[i] = clone(source[i]);\n                }\n            }\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * Low performance.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    function retrieve2(value0, value1) {\n        return value0 != null\n            ? value0\n            : value1;\n    }\n\n    function retrieve3(value0, value1, value2) {\n        return value0 != null\n            ? value0\n            : value1 != null\n            ? value1\n            : value2;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     * @return {Array.<number>}\n     */\n    function normalizeCssArray(val) {\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        var len = val.length;\n        if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     * @param {Object} obj Only apply `ownProperty`.\n     */\n    function HashMap(obj) {\n        obj && each(obj, function (value, key) {\n            this.set(key, value);\n        }, this);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[HASH_MAP_PREFIX + key];\n        }\n    };\n\n    function createHashMap(obj) {\n        return new HashMap(obj);\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        retrieve2: retrieve2,\n        retrieve3: retrieve3,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        normalizeCssArray: normalizeCssArray,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/util.js\n// module id = 969\n// module chunks = 0 1 2","// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = require('zrender/lib/core/env');\n\n    var GlobalModel = require('./model/Global');\n    var ExtensionAPI = require('./ExtensionAPI');\n    var CoordinateSystemManager = require('./CoordinateSystem');\n    var OptionManager = require('./model/OptionManager');\n    var backwardCompat = require('./preprocessor/backwardCompat');\n\n    var ComponentModel = require('./model/Component');\n    var SeriesModel = require('./model/Series');\n\n    var ComponentView = require('./view/Component');\n    var ChartView = require('./view/Chart');\n    var graphic = require('./util/graphic');\n    var modelUtil = require('./util/model');\n    var throttle = require('./util/throttle');\n\n    var zrender = require('zrender/lib/zrender');\n    var zrUtil = require('zrender/lib/core/util');\n    var colorTool = require('zrender/lib/tool/color');\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var timsort = require('zrender/lib/core/timsort');\n\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts(dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        var theme = zrUtil.clone(theme);\n        theme && backwardCompat(theme, true);\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = theme;\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = createExtensionAPI(this);\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n\n        // ECharts instance can be used as value.\n        zrUtil.setAsPrimitive(this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getDevicePixelRatio = function () {\n        return this._zr.painter.dpr || window.devicePixelRatio || 1;\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n    /**\n     * Get view of corresponding component model\n     * @param  {module:echarts/model/Component} componentModel\n     * @return {module:echarts/view/Component}\n     */\n    echartsProto.getViewOfComponentModel = function (componentModel) {\n        return this._componentsMap[componentModel.__viewId];\n    };\n\n    /**\n     * Get view of corresponding series model\n     * @param  {module:echarts/model/Series} seriesModel\n     * @return {module:echarts/view/Chart}\n     */\n    echartsProto.getViewOfSeriesModel = function (seriesModel) {\n        return this._chartsMap[seriesModel.__viewId];\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.profile && console.profile('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            each(postUpdateFuncs, function (func) {\n                func(ecModel, api);\n            });\n\n            // console.profile && console.profileEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            updateMethods.update.call(this, payload);\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n\n        // broadcast\n        if (!mainType) {\n            each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n            return;\n        }\n\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            callView(ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId]);\n        }, ecIns);\n\n        function callView(view) {\n            view && view.__alive && view[method] && view[method](\n                view.__model, ecModel, ecIns._api, payload\n            );\n        }\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // Avoid dispatch action before setOption. Especially in `connect`.\n        if (!this._model) {\n            return;\n        }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var escapeConnect = payload.escapeConnect;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] != null && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        each(payloads, function (batchItem) {\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model, this._api);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }, this);\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                escapeConnect: escapeConnect,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Post render\n        each(postUpdateFuncs, function (func) {\n            func(ecModel, api);\n        });\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = '_ec_' + model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = view.__id = viewId;\n            view.__alive = true;\n            view.__model = model;\n            view.group.__ecComponentInfo = {\n                mainType: model.mainType,\n                index: model.componentIndex\n            };\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n                view.__id = view.group.__ecComponentInfo = null;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                // Avoid conflict with Object.prototype\n                if (stackedDataMap.hasOwnProperty(stack) && previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n\n    function createExtensionAPI(ecInstance) {\n        var coordSysMgr = ecInstance._coordSysMgr;\n        return zrUtil.extend(new ExtensionAPI(ecInstance), {\n            // Inject methods\n            getCoordinateSystems: zrUtil.bind(\n                coordSysMgr.getCoordinateSystems, coordSysMgr\n            ),\n            getComponentByElement: function (el) {\n                while (el) {\n                    var modelInfo = el.__ecComponentInfo;\n                    if (modelInfo != null) {\n                        return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n                    }\n                    el = el.parent;\n                }\n            }\n        });\n    }\n\n    /**\n     * @type {Object} key: actionType.\n     * @inner\n     */\n    var actions = {};\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var postUpdateFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.7.2',\n        dependencies: {\n            zrender: '3.6.2'\n        }\n    };\n\n    function enableConnect(chart) {\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    if (event && event.escapeConnect) {\n                        return;\n                    }\n\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {HTMLElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n        }\n\n        var existInstance = echarts.getInstanceByDom(dom);\n        if (existInstance) {\n            if (__DEV__) {\n                console.warn('There is a chart instance already initialized on the dom.');\n            }\n            return existInstance;\n        }\n\n        if (__DEV__) {\n            if (zrUtil.isDom(dom)\n                && dom.nodeName.toUpperCase() !== 'CANVAS'\n                && (\n                    (!dom.clientWidth && (!opts || opts.width == null))\n                    || (!dom.clientHeight && (!opts || opts.height == null))\n                )\n            ) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        if (dom.setAttribute) {\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n        }\n        else {\n            dom[DOM_ATTRIBUTE_KEY] = chart.id;\n        }\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @DEPRECATED\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disconnect = echarts.disConnect;\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        else if (!(chart instanceof ECharts)){\n            // Try to treat as dom\n            chart = echarts.getInstanceByDom(chart);\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key;\n        if (dom.getAttribute) {\n            key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        }\n        else {\n            key = dom[DOM_ATTRIBUTE_KEY];\n        }\n        return instances[key];\n    };\n\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Register postUpdater\n     * @param {Function} postUpdateFunc\n     */\n    echarts.registerPostUpdate = function (postUpdateFunc) {\n        postUpdateFuncs.push(postUpdateFunc);\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Get dimensions of specified coordinate system.\n     * @param {string} type\n     * @return {Array.<string|Object>}\n     */\n    echarts.getCoordinateSystemDimensions = function (type) {\n        var coordSysCreator = CoordinateSystemManager.get(type);\n        if (coordSysCreator) {\n            return coordSysCreator.getDimensionsInfo\n                    ? coordSysCreator.getDimensionsInfo()\n                    : coordSysCreator.dimensions.slice();\n        }\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, require('./visual/seriesColor'));\n    echarts.registerPreprocessor(backwardCompat);\n    echarts.registerLoading('default', require('./loading/default'));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n    // --------\n    // Exports\n    // --------\n    echarts.zrender = zrender;\n\n    echarts.List = require('./data/List');\n    echarts.Model = require('./model/Model');\n\n    echarts.Axis = require('./coord/Axis');\n\n    echarts.graphic = require('./util/graphic');\n    echarts.number = require('./util/number');\n    echarts.format = require('./util/format');\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = require('zrender/lib/core/matrix');\n    echarts.vector = require('zrender/lib/core/vector');\n    echarts.color = require('zrender/lib/tool/color');\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone', 'merge'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    echarts.helper = require('./helper');\n\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/echarts.js\n// module id = 970\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var pathTool = require('zrender/lib/tool/path');\n    var Path = require('zrender/lib/graphic/Path');\n    var colorTool = require('zrender/lib/tool/color');\n    var matrix = require('zrender/lib/core/matrix');\n    var vector = require('zrender/lib/core/vector');\n    var Transformable = require('zrender/lib/mixin/Transformable');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    var round = Math.round;\n    var mathMax = Math.max;\n    var mathMin = Math.min;\n\n    var EMPTY_OBJ = {};\n\n    var graphic = {};\n\n    graphic.Group = require('zrender/lib/container/Group');\n\n    graphic.Image = require('zrender/lib/graphic/Image');\n\n    graphic.Text = require('zrender/lib/graphic/Text');\n\n    graphic.Circle = require('zrender/lib/graphic/shape/Circle');\n\n    graphic.Sector = require('zrender/lib/graphic/shape/Sector');\n\n    graphic.Ring = require('zrender/lib/graphic/shape/Ring');\n\n    graphic.Polygon = require('zrender/lib/graphic/shape/Polygon');\n\n    graphic.Polyline = require('zrender/lib/graphic/shape/Polyline');\n\n    graphic.Rect = require('zrender/lib/graphic/shape/Rect');\n\n    graphic.Line = require('zrender/lib/graphic/shape/Line');\n\n    graphic.BezierCurve = require('zrender/lib/graphic/shape/BezierCurve');\n\n    graphic.Arc = require('zrender/lib/graphic/shape/Arc');\n\n    graphic.CompoundPath = require('zrender/lib/graphic/CompoundPath');\n\n    graphic.LinearGradient = require('zrender/lib/graphic/LinearGradient');\n\n    graphic.RadialGradient = require('zrender/lib/graphic/RadialGradient');\n\n    graphic.BoundingRect = BoundingRect;\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    var subPixelOptimize = graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                // See comment in `doSingleEnterHover`.\n                if (hoverStyle[name] != null) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            var style = el.style;\n            var insideRollbackOpt = style.insideRollbackOpt;\n\n            // Consider case: only `position: 'top'` is set on emphasis, then text\n            // color should be returned to `autoColor`, rather than remain '#fff'.\n            // So we should rollback then apply again after style merging.\n            insideRollbackOpt && rollbackInsideStyle(style);\n\n            // styles can be:\n            // {\n            //     label: {\n            //         normal: {\n            //             show: false,\n            //             position: 'outside',\n            //             fontSize: 18\n            //         },\n            //         emphasis: {\n            //             show: true\n            //         }\n            //     }\n            // },\n            // where properties of `emphasis` may not appear in `normal`. We previously use\n            // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.\n            // But consider rich text and setOption in merge mode, it is impossible to cover\n            // all properties in merge. So we use merge mode when setting style here, where\n            // only properties that is not `null/undefined` can be set. The disadventage:\n            // null/undefined can not be used to remove style any more in `emphasis`.\n            style.extendFrom(el.__hoverStl);\n\n            // Do not save `insideRollback`.\n            if (insideRollbackOpt) {\n                applyInsideStyle(style, style.insideOriginalTextPosition, insideRollbackOpt);\n\n                // textFill may be rollbacked to null.\n                if (style.textFill == null) {\n                    style.textFill = insideRollbackOpt.autoColor;\n                }\n            }\n\n            el.dirty(false);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            // Consider null/undefined value, should use\n            // `setStyle` but not `extendFrom(stl, true)`.\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element.\n     * This method can be called repeatly without side-effects.\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * @param {Object|module:zrender/graphic/Style} normalStyle\n     * @param {Object} emphasisStyle\n     * @param {module:echarts/model/Model} normalModel\n     * @param {module:echarts/model/Model} emphasisModel\n     * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.\n     * @param {Object} [opt.defaultText]\n     * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by\n     *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by\n     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by\n     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`\n     * @param {Object} [normalSpecified]\n     * @param {Object} [emphasisSpecified]\n     */\n    graphic.setLabelStyle = function (\n        normalStyle, emphasisStyle,\n        normalModel, emphasisModel,\n        opt,\n        normalSpecified, emphasisSpecified\n    ) {\n        opt = opt || EMPTY_OBJ;\n        var labelFetcher = opt.labelFetcher;\n        var labelDataIndex = opt.labelDataIndex;\n        var labelDimIndex = opt.labelDimIndex;\n\n        // This scenario, `label.normal.show = true; label.emphasis.show = false`,\n        // is not supported util someone requests.\n\n        var showNormal = normalModel.getShallow('show');\n        var showEmphasis = emphasisModel.getShallow('show');\n\n        // Consider performance, only fetch label when necessary.\n        // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,\n        // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.\n        var baseText = (showNormal || showEmphasis)\n            ? zrUtil.retrieve2(\n                labelFetcher\n                    ? labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex)\n                    : null,\n                opt.defaultText\n            )\n            : null;\n        var normalStyleText = showNormal ? baseText : null;\n        var emphasisStyleText = showEmphasis\n            ? zrUtil.retrieve2(\n                labelFetcher\n                    ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex)\n                    : null,\n                baseText\n            )\n            : null;\n\n        // Optimize: If style.text is null, text will not be drawn.\n        if (normalStyleText != null || emphasisStyleText != null) {\n            // Always set `textStyle` even if `normalStyle.text` is null, because default\n            // values have to be set on `normalStyle`.\n            // If we set default values on `emphasisStyle`, consider case:\n            // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`\n            // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`\n            // Then the 'red' will not work on emphasis.\n            setTextStyle(normalStyle, normalModel, normalSpecified, opt);\n            setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);\n        }\n\n        normalStyle.text = normalStyleText;\n        emphasisStyle.text = emphasisStyleText;\n    };\n\n    /**\n     * Set basic textStyle properties.\n     * @param {Object|module:zrender/graphic/Style} textStyle\n     * @param {module:echarts/model/Model} model\n     * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.\n     * @param {Object} [opt] See `opt` of `setTextStyleCommon`.\n     * @param {boolean} [isEmphasis]\n     */\n    var setTextStyle = graphic.setTextStyle = function (\n        textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis\n    ) {\n        setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);\n        specifiedTextStyle && zrUtil.extend(textStyle, specifiedTextStyle);\n        textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);\n\n        return textStyle;\n    };\n\n    /**\n     * Set text option in the style.\n     * @deprecated\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string|boolean} defaultColor Default text color.\n     *        If set as false, it will be processed as a emphasis style.\n     */\n    graphic.setText = function (textStyle, labelModel, defaultColor) {\n        var opt = {isRectText: true};\n        var isEmphasis;\n\n        if (defaultColor === false) {\n            isEmphasis = true;\n        }\n        else {\n            // Support setting color as 'auto' to get visual color.\n            opt.autoColor = defaultColor;\n        }\n        setTextStyleCommon(textStyle, labelModel, opt, isEmphasis);\n        textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);\n    };\n\n    /**\n     * {\n     *      disableBox: boolean, Whether diable drawing box of block (outer most).\n     *      isRectText: boolean,\n     *      autoColor: string, specify a color when color is 'auto',\n     *              for textFill, textStroke, textBackgroundColor, and textBorderColor.\n     *              If autoColor specified, it is used as default textFill.\n     *      useInsideStyle:\n     *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)\n     *                  if `textFill` is not specified.\n     *              `false`: Do not use inside style.\n     *              `null/undefined`: use inside style if `isRectText` is true and\n     *                  `textFill` is not specified and textPosition contains `'inside'`.\n     *      forceRich: boolean\n     * }\n     */\n    function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {\n        // Consider there will be abnormal when merge hover style to normal style if given default value.\n        opt = opt || EMPTY_OBJ;\n\n        if (opt.isRectText) {\n            var textPosition = textStyleModel.getShallow('position')\n                || (isEmphasis ? null : 'inside');\n            // 'outside' is not a valid zr textPostion value, but used\n            // in bar series, and magric type should be considered.\n            textPosition === 'outside' && (textPosition = 'top');\n            textStyle.textPosition = textPosition;\n            textStyle.textOffset = textStyleModel.getShallow('offset');\n            var labelRotate = textStyleModel.getShallow('rotate');\n            labelRotate != null && (labelRotate *= Math.PI / 180);\n            textStyle.textRotation = labelRotate;\n            textStyle.textDistance = zrUtil.retrieve2(\n                textStyleModel.getShallow('distance'), isEmphasis ? null : 5\n            );\n        }\n\n        var ecModel = textStyleModel.ecModel;\n        var globalTextStyle = ecModel && ecModel.option.textStyle;\n\n        // Consider case:\n        // {\n        //     data: [{\n        //         value: 12,\n        //         label: {\n        //             normal: {\n        //                 rich: {\n        //                     // no 'a' here but using parent 'a'.\n        //                 }\n        //             }\n        //         }\n        //     }],\n        //     rich: {\n        //         a: { ... }\n        //     }\n        // }\n        var richItemNames = getRichItemNames(textStyleModel);\n        var richResult;\n        if (richItemNames) {\n            richResult = {};\n            for (var name in richItemNames) {\n                if (richItemNames.hasOwnProperty(name)) {\n                    // Cascade is supported in rich.\n                    var richTextStyle = textStyleModel.getModel(['rich', name]);\n                    // In rich, never `disableBox`.\n                    setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);\n                }\n            }\n        }\n        textStyle.rich = richResult;\n\n        setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);\n\n        if (opt.forceRich && !opt.textStyle) {\n            opt.textStyle = {};\n        }\n\n        return textStyle;\n    }\n\n    // Consider case:\n    // {\n    //     data: [{\n    //         value: 12,\n    //         label: {\n    //             normal: {\n    //                 rich: {\n    //                     // no 'a' here but using parent 'a'.\n    //                 }\n    //             }\n    //         }\n    //     }],\n    //     rich: {\n    //         a: { ... }\n    //     }\n    // }\n    function getRichItemNames(textStyleModel) {\n        // Use object to remove duplicated names.\n        var richItemNameMap;\n        while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {\n            var rich = (textStyleModel.option || EMPTY_OBJ).rich;\n            if (rich) {\n                richItemNameMap = richItemNameMap || {};\n                for (var name in rich) {\n                    if (rich.hasOwnProperty(name)) {\n                        richItemNameMap[name] = 1;\n                    }\n                }\n            }\n            textStyleModel = textStyleModel.parentModel;\n        }\n        return richItemNameMap;\n    }\n\n    function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {\n        // In merge mode, default value should not be given.\n        globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;\n\n        textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt)\n            || globalTextStyle.color;\n        textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt)\n            || globalTextStyle.textBorderColor;\n        textStyle.textStrokeWidth = zrUtil.retrieve2(\n            textStyleModel.getShallow('textBorderWidth'),\n            globalTextStyle.textBorderWidth\n        );\n\n        if (!isEmphasis) {\n            if (isBlock) {\n                // Always set `insideRollback`, for clearing previous.\n                var originalTextPosition = textStyle.textPosition;\n                textStyle.insideRollback = applyInsideStyle(textStyle, originalTextPosition, opt);\n                // Save original textPosition, because style.textPosition will be repalced by\n                // real location (like [10, 30]) in zrender.\n                textStyle.insideOriginalTextPosition = originalTextPosition;\n                textStyle.insideRollbackOpt = opt;\n            }\n\n            // Set default finally.\n            if (textStyle.textFill == null) {\n                textStyle.textFill = opt.autoColor;\n            }\n        }\n\n        // Do not use `getFont` here, because merge should be supported, where\n        // part of these properties may be changed in emphasis style, and the\n        // others should remain their original value got from normal style.\n        textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;\n        textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;\n        textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;\n        textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;\n\n        textStyle.textAlign = textStyleModel.getShallow('align');\n        textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign')\n            || textStyleModel.getShallow('baseline');\n\n        textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');\n        textStyle.textWidth = textStyleModel.getShallow('width');\n        textStyle.textHeight = textStyleModel.getShallow('height');\n        textStyle.textTag = textStyleModel.getShallow('tag');\n\n        if (!isBlock || !opt.disableBox) {\n            textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);\n            textStyle.textPadding = textStyleModel.getShallow('padding');\n            textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);\n            textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');\n            textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');\n\n            textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');\n            textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');\n            textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');\n            textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');\n        }\n\n        textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor')\n            || globalTextStyle.textShadowColor;\n        textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur')\n            || globalTextStyle.textShadowBlur;\n        textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX')\n            || globalTextStyle.textShadowOffsetX;\n        textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY')\n            || globalTextStyle.textShadowOffsetY;\n    }\n\n    function getAutoColor(color, opt) {\n        return color !== 'auto' ? color : (opt && opt.autoColor) ? opt.autoColor : null;\n    }\n\n    function applyInsideStyle(textStyle, textPosition, opt) {\n        var useInsideStyle = opt.useInsideStyle;\n        var insideRollback;\n\n        if (textStyle.textFill == null\n            && useInsideStyle !== false\n            && (useInsideStyle === true\n                || (opt.isRectText\n                    && textPosition\n                    // textPosition can be [10, 30]\n                    && typeof textPosition === 'string'\n                    && textPosition.indexOf('inside') >= 0\n                )\n            )\n        ) {\n            insideRollback = {\n                textFill: null,\n                textStroke: textStyle.textStroke,\n                textStrokeWidth: textStyle.textStrokeWidth\n            };\n            textStyle.textFill = '#fff';\n            // Consider text with #fff overflow its container.\n            if (textStyle.textStroke == null) {\n                textStyle.textStroke = opt.autoColor;\n                textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);\n            }\n        }\n\n        return insideRollback;\n    }\n\n    function rollbackInsideStyle(style) {\n        var insideRollback = style.insideRollback;\n        if (insideRollback) {\n            style.textFill = insideRollback.textFill;\n            style.textStroke = insideRollback.textStroke;\n            style.textStrokeWidth = insideRollback.textStrokeWidth;\n        }\n    }\n\n    graphic.getFont = function (opt, ecModel) {\n        // ecModel or default text style model.\n        var gTextStyleModel = ecModel || ecModel.getModel('textStyle');\n        return [\n            // FIXME in node-canvas fontWeight is before fontStyle\n            opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '',\n            opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '',\n            (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px',\n            opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'\n        ].join(' ');\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb)\n                : (el.stopAnimation(), el.attr(props), cb && cb());\n        }\n        else {\n            el.stopAnimation();\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} target [x, y]\n     * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:\n     *      + Transform matrix: like [1, 0, 0, 1, 0, 0]\n     *      + {position, rotation, scale}, the same as `zrender/Transformable`.\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (target, transform, invert) {\n        if (transform && !zrUtil.isArrayLike(transform)) {\n            transform = Transformable.getLocalTransform(transform);\n        }\n\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], target, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2.\n     * If no animatableModel, no animation.\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    /**\n     * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]\n     * @param {Object} rect {x, y, width, height}\n     * @return {Array.<Array.<number>>} A new clipped points.\n     */\n    graphic.clipPointsByRect = function (points, rect) {\n        return zrUtil.map(points, function (point) {\n            var x = point[0];\n            x = mathMax(x, rect.x);\n            x = mathMin(x, rect.x + rect.width);\n            var y = point[1];\n            y = mathMax(y, rect.y);\n            y = mathMin(y, rect.y + rect.height);\n            return [x, y];\n        });\n    };\n\n    /**\n     * @param {Object} targetRect {x, y, width, height}\n     * @param {Object} rect {x, y, width, height}\n     * @return {Object} A new clipped rect. If rect size are negative, return undefined.\n     */\n    graphic.clipRectByRect = function (targetRect, rect) {\n        var x = mathMax(targetRect.x, rect.x);\n        var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);\n        var y = mathMax(targetRect.y, rect.y);\n        var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);\n\n        if (x2 >= x && y2 >= y) {\n            return {\n                x: x,\n                y: y,\n                width: x2 - x,\n                height: y2 - y\n            };\n        }\n    };\n\n    /**\n     * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.\n     * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.\n     * @param {Object} [rect] {x, y, width, height}\n     * @return {module:zrender/Element} Icon path or image element.\n     */\n    graphic.createIcon = function (iconStr, opt, rect) {\n        opt = zrUtil.extend({rectHover: true}, opt);\n        var style = opt.style = {strokeNoScale: true};\n        rect = rect || {x: -1, y: -1, width: 2, height: 2};\n\n        if (iconStr) {\n            return iconStr.indexOf('image://') === 0\n                ? (\n                    style.image = iconStr.slice(8),\n                    zrUtil.defaults(style, rect),\n                    new graphic.Image(opt)\n                )\n                : (\n                    graphic.makePath(\n                        iconStr.replace('path://', ''),\n                        opt,\n                        rect,\n                        'center'\n                    )\n                );\n        }\n\n    };\n\n    module.exports = graphic;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/graphic.js\n// module id = 971\n// module chunks = 0 1 2","/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * (1) Fix rounding error of float numbers.\n     * (2) Support return string to avoid scientific notation like '3.5e-7'.\n     *\n     * @param {number} x\n     * @param {number} [precision]\n     * @param {boolean} [returnStr]\n     * @return {number|string}\n     */\n    number.round = function (x, precision, returnStr) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        x = (+x).toFixed(precision);\n        return returnStr ? x : +x;\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    /**\n     * @param {string|number} val\n     * @return {number}\n     */\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n\n        // Consider scientific notation: '3.4e-12' '3.4e+12'\n        var eIndex = str.indexOf('e');\n        if (eIndex > 0) {\n            var precision = +str.slice(eIndex + 1);\n            return precision < 0 ? -precision : 0;\n        }\n        else {\n            var dotIndex = str.indexOf('.');\n            return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n        }\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     *\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    /**\n     * Get a data of given precision, assuring the sum of percentages\n     * in valueList is 1.\n     * The largest remainer method is used.\n     * https://en.wikipedia.org/wiki/Largest_remainder_method\n     *\n     * @param {Array.<number>} valueList a list of all data\n     * @param {number} idx index of the data to be processed in valueList\n     * @param {number} precision integer number showing digits of precision\n     * @return {number} percent ranging from 0 to 100\n     */\n    number.getPercentWithPrecision = function (valueList, idx, precision) {\n        if (!valueList[idx]) {\n            return 0;\n        }\n\n        var sum = zrUtil.reduce(valueList, function (acc, val) {\n            return acc + (isNaN(val) ? 0 : val);\n        }, 0);\n        if (sum === 0) {\n            return 0;\n        }\n\n        var digits = Math.pow(10, precision);\n        var votesPerQuota = zrUtil.map(valueList, function (val) {\n            return (isNaN(val) ? 0 : val) / sum * digits * 100;\n        });\n        var targetSeats = digits * 100;\n\n        var seats = zrUtil.map(votesPerQuota, function (votes) {\n            // Assign automatic seats.\n            return Math.floor(votes);\n        });\n        var currentSum = zrUtil.reduce(seats, function (acc, val) {\n            return acc + val;\n        }, 0);\n\n        var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n            return votes - seats[idx];\n        });\n\n        // Has remainding votes.\n        while (currentSum < targetSeats) {\n            // Find next largest remainder.\n            var max = Number.NEGATIVE_INFINITY;\n            var maxId = null;\n            for (var i = 0, len = remainder.length; i < len; ++i) {\n                if (remainder[i] > max) {\n                    max = remainder[i];\n                    maxId = i;\n                }\n            }\n\n            // Add a vote to max remainder.\n            ++seats[maxId];\n            remainder[maxId] = 0;\n            ++currentSum;\n        }\n\n        return seats[idx] / digits;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    var TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n    /**\n     * Consider DST, it is incorrect to provide a method `getTimezoneOffset`\n     * without time specified. So this method is removed.\n     *\n     * @return {number} in minutes\n     */\n    // number.getTimezoneOffset = function () {\n    //     return (new Date()).getTimezoneOffset();\n    // };\n\n    /**\n     * @param {string|Date|number} value These values can be accepted:\n     *   + An instance of Date, represent a time in its own time zone.\n     *   + Or string in a subset of ISO 8601, only including:\n     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n     *     all of which will be treated as local time if time zone is not specified\n     *     (see <https://momentjs.com/>).\n     *   + Or other string format, including (all of which will be treated as loacal time):\n     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n     *   + a timestamp, which represent a time in UTC.\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Different browsers parse date in different way, so we parse it manually.\n            // Some other issues:\n            // new Date('1970-01-01') is UTC,\n            // new Date('1970/01/01') and new Date('1970-1-01') is local.\n            // See issue #3623\n            var match = TIME_REG.exec(value);\n\n            if (!match) {\n                // return Invalid Date.\n                return new Date(NaN);\n            }\n\n            // Use local time when no timezone offset specifed.\n            if (!match[8]) {\n                // match[n] can only be string or undefined.\n                // But take care of '12' + 1 => '121'.\n                return new Date(\n                    +match[1],\n                    +(match[2] || 1) - 1,\n                    +match[3] || 1,\n                    +match[4] || 0,\n                    +(match[5] || 0),\n                    +match[6] || 0,\n                    +match[7] || 0\n                );\n            }\n            // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n            // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n            // For example, system timezone is set as \"Time Zone: America/Toronto\",\n            // then these code will get different result:\n            // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n            // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n            // So we should not use `new Date`, but use `Date.UTC`.\n            else {\n                var hour = +match[4] || 0;\n                if (match[8].toUpperCase() !== 'Z') {\n                    hour -= match[8].slice(0, 3);\n                }\n                return new Date(Date.UTC(\n                    +match[1],\n                    +(match[2] || 1) - 1,\n                    +match[3] || 1,\n                    hour,\n                    +(match[5] || 0),\n                    +match[6] || 0,\n                    +match[7] || 0\n                ));\n            }\n        }\n        else if (value == null) {\n            return new Date(NaN);\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     *\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, quantityExponent(val));\n    };\n\n    function quantityExponent(val) {\n        return Math.floor(Math.log(val) / Math.LN10);\n    }\n\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true,\n     * take ceiling if round = false. The primary observation is that the “nicest”\n     * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     *\n     * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n     *\n     * @param  {number} val Non-negative value.\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exponent = quantityExponent(val);\n        var exp10 = Math.pow(10, exponent);\n        var f = val / exp10; // 1 <= f < 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        val = nf * exp10;\n\n        // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n        // 20 is the uppper bound of toFixed.\n        return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     *\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/number.js\n// module id = 972\n// module chunks = 0 1 2","\n\n    var formatUtil = require('./format');\n    var nubmerUtil = require('./number');\n    var Model = require('../model/Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             fontSize: 18\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            for (var i = 0, len = subOpts.length; i < len; i++) {\n                var subOptName = subOpts[i];\n                if (!emphasisOpt.hasOwnProperty(subOptName)\n                    && normalOpt.hasOwnProperty(subOptName)\n                ) {\n                    emphasisOpt[subOptName] = normalOpt[subOptName];\n                }\n            }\n        }\n    };\n\n    modelUtil.TEXT_STYLE_OPTIONS = [\n        'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n        'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth',\n        'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline',\n        'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY',\n        'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY',\n        'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding'\n    ];\n\n    // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n    //     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n    //     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n    //     // FIXME: deprecated, check and remove it.\n    //     'textStyle'\n    // ]);\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time'\n            // spead up when using timestamp\n            && typeof value !== 'number'\n            && value != null\n            && value !== '-'\n        ) {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n            var color = data.getItemVisual(dataIndex, 'color');\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: this.seriesIndex,\n                seriesId: this.id,\n                seriesName: this.name,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: color,\n                marker: formatUtil.getTooltipMarker(color),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @param {string} [labelProp='label']\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get([labelProp || 'label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = zrUtil.createHashMap();\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && idMap.set(existCpt.id, item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && idMap.set(opt.id, item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-'; // name may be displayed on screen, so use '-'.\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap.get(keyInfo.id));\n            }\n\n            idMap.set(keyInfo.id, item);\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * Enable property storage to any host object.\n     * Notice: Serialization is not supported.\n     *\n     * For example:\n     * var get = modelUitl.makeGetter();\n     *\n     * function some(hostObj) {\n     *      get(hostObj)._someProperty = 1212;\n     *      ...\n     * }\n     *\n     * @return {Function}\n     */\n    modelUtil.makeGetter = (function () {\n        var index = 0;\n        return function () {\n            var key = '\\0__ec_prop_getter_' + index++;\n            return function (hostObj) {\n                return hostObj[key] || (hostObj[key] = {});\n            };\n        };\n    })();\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, geoName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n     *        If nothing or null/undefined specified, return nothing.\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @param {Array.<string>} [opt.includeMainTypes]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = (parsedKey[2] || '').toLowerCase();\n\n            if (!mainType\n                || !queryType\n                || value == null\n                || (queryType === 'index' && value === 'none')\n                || (opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0)\n            ) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            if (queryType !== 'index' || value !== 'all') {\n                queryParam[queryType] = value;\n            }\n\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string|number} dataDim\n     * @return {string}\n     */\n    modelUtil.dataDimToCoordDim = function (data, dataDim) {\n        var dimensions = data.dimensions;\n        dataDim = data.getDimension(dataDim);\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimItem = data.getDimensionInfo(dimensions[i]);\n            if (dimItem.name === dataDim) {\n                return dimItem.coordDim;\n            }\n        }\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} coordDim\n     * @return {Array.<string>} data dimensions on the coordDim.\n     */\n    modelUtil.coordDimToDataDim = function (data, coordDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            if (dimItem.coordDim === coordDim) {\n                dataDim[dimItem.coordDimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} otherDim Can be `otherDims`\n     *                        like 'label' or 'tooltip'.\n     * @return {Array.<string>} data dimensions on the otherDim.\n     */\n    modelUtil.otherDimToDataDim = function (data, otherDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            var otherDims = dimItem.otherDims;\n            var dimIndex = otherDims[otherDim];\n            if (dimIndex != null && dimIndex !== false) {\n                dataDim[dimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/model.js\n// module id = 973\n// module chunks = 0 1 2","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/vector.js\n// module id = 974\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('./number');\n    var textContain = require('zrender/lib/contain/text');\n\n    var formatUtil = {};\n\n    /**\n     * 每三位默认加,格式化\n     * @param {string|number} x\n     * @return {string}\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    formatUtil.normalizeCssArray = zrUtil.normalizeCssArray;\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n    /**\n     * simple Template formatter\n     *\n     * @param {string} tpl\n     * @param {Object} param\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTplSimple = function (tpl, param, encode) {\n        zrUtil.each(param, function (value, key) {\n            tpl = tpl.replace(\n                '{' + key + '}',\n                encode ? encodeHTML(value) : value\n            );\n        });\n        return tpl;\n    };\n\n    /**\n     * @param {string} color\n     * @param {string} [extraCssText]\n     * @return {string}\n     */\n    formatUtil.getTooltipMarker = function (color, extraCssText) {\n        return color\n            ? '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:'\n                + formatUtil.encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>'\n            : '';\n    };\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @param {boolean} [isUTC=false] Default in local time.\n     *           see `module:echarts/scale/Time`\n     *           and `module:echarts/util/number#parseDate`.\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value, isUTC) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var utc = isUTC ? 'UTC' : '';\n        var y = date['get' + utc + 'FullYear']();\n        var M = date['get' + utc + 'Month']() + 1;\n        var d = date['get' + utc + 'Date']();\n        var h = date['get' + utc + 'Hours']();\n        var m = date['get' + utc + 'Minutes']();\n        var s = date['get' + utc + 'Seconds']();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .replace('M', M)\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    formatUtil.getTextRect = textContain.getBoundingRect;\n\n    module.exports = formatUtil;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/format.js\n// module id = 975\n// module chunks = 0 1 2","/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/env.js\n// module id = 976\n// module chunks = 0 1 2","/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazzUtil = require('../util/clazz');\n    var env = require('zrender/lib/core/env');\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} [path]\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    // `path` can be null/undefined\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, require('./mixin/lineStyle'));\n    mixin(Model, require('./mixin/areaStyle'));\n    mixin(Model, require('./mixin/textStyle'));\n    mixin(Model, require('./mixin/itemStyle'));\n\n    module.exports = Model;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/Model.js\n// module id = 977\n// module chunks = 0 1 2","/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var PathProxy = require('../core/PathProxy');\n    var pathContain = require('../contain/path');\n\n    var Pattern = require('./Pattern');\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/graphic/Path.js\n// module id = 978\n// module chunks = 0 1 2","'use strict';\n// Layout helpers for each component positioning\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n    var numberUtil = require('./number');\n    var formatUtil = require('./format');\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    /**\n     * @public\n     */\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    /**\n     * @public\n     */\n    var HV_NAMES = layout.HV_NAMES = [\n        ['width', 'left', 'right'],\n        ['height', 'top', 'bottom']\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                // FIXME compare before adding gap?\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    // FIXME: consider rect.y is not `0`?\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect {width, height}\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        if (aspect != null) {\n            // If width and height are not given\n            // 1. Graph should not exceeds the container\n            // 2. Aspect must be keeped\n            // 3. Graph should take the space as more as possible\n            // FIXME\n            // Margin is not considered, because there is no case that both\n            // using margin and aspect so far.\n            if (isNaN(width) && isNaN(height)) {\n                if (aspect > containerWidth / containerHeight) {\n                    width = containerWidth * 0.8;\n                }\n                else {\n                    height = containerHeight * 0.8;\n                }\n            }\n\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - horizontalMargin - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - verticalMargin - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'\n     * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        // The real width and height can not be specified but calculated by the given el.\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * @param {Object} option Contains some of the properties in HV_NAMES.\n     * @param {number} hvIdx 0: horizontal; 1: vertical.\n     */\n    layout.sizeCalculable = function (option, hvIdx) {\n        return option[HV_NAMES[hvIdx][0]] != null\n            || (option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components\n     *  that width (or height) should not be calculated by left and right (or top and bottom).\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n\n        var ignoreSize = opt.ignoreSize;\n        !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n\n        var hResult = merge(HV_NAMES[0], 0);\n        var vResult = merge(HV_NAMES[1], 1);\n\n        copy(HV_NAMES[0], targetOption, hResult);\n        copy(HV_NAMES[1], targetOption, vResult);\n\n        function merge(names, hvIdx) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            if (ignoreSize[hvIdx]) {\n                // Only one of left/right is premitted to exist.\n                if (hasValue(newOption, names[1])) {\n                    merged[names[2]] = null;\n                }\n                else if (hasValue(newOption, names[2])) {\n                    merged[names[1]] = null;\n                }\n                return merged;\n            }\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/layout.js\n// module id = 979\n// module chunks = 0 1 2","'use strict';\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = require('./vector');\n    var matrix = require('./matrix');\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/BoundingRect.js\n// module id = 980\n// module chunks = 0 1 2","/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = require('./Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var arrayPush = Array.prototype.push;\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var layout = require('../util/layout');\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, require('./mixin/boxLayout'));\n\n    module.exports = ComponentModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/Component.js\n// module id = 981\n// module chunks = 0 1 2","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * Notice, parseClassType('') should returns {main: '', sub: ''}\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/clazz.js\n// module id = 982\n// module chunks = 0 1 2","\n\n    var util = require('../core/util');\n    var BoundingRect = require('../core/BoundingRect');\n    var imageHelper = require('../graphic/helper/image');\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n\n    var TEXT_CACHE_MAX = 5000;\n    var STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\n    var DEFAULT_FONT = '12px sans-serif';\n\n    var retrieve2 = util.retrieve2;\n    var retrieve3 = util.retrieve3;\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @return {number} width\n     */\n    function getTextWidth(text, font) {\n        font = font || DEFAULT_FONT;\n        var key = text + ':' + font;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // textContain.measureText may be overrided in SVG or VML\n            width = Math.max(textContain.measureText(textLines[i], font).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @param {string} [textAlign='left']\n     * @param {string} [textVerticalAlign='top']\n     * @param {Array.<number>} [textPadding]\n     * @param {Object} [rich]\n     * @param {Object} [truncate]\n     * @return {Object} {x, y, width, height, lineHeight}\n     */\n    function getTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {\n        return rich\n            ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate)\n            : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate);\n    }\n\n    function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate) {\n        var contentBlock = parsePlainText(text, font, textPadding, truncate);\n        var outerWidth = getTextWidth(text, font);\n        if (textPadding) {\n            outerWidth += textPadding[1] + textPadding[3];\n        }\n        var outerHeight = contentBlock.outerHeight;\n\n        var x = adjustTextX(0, outerWidth, textAlign);\n        var y = adjustTextY(0, outerHeight, textVerticalAlign);\n\n        var rect = new BoundingRect(x, y, outerWidth, outerHeight);\n        rect.lineHeight = contentBlock.lineHeight;\n\n        return rect;\n    }\n\n    function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {\n        var contentBlock = parseRichText(text, {\n            rich: rich,\n            truncate: truncate,\n            font: font,\n            textAlign: textAlign,\n            textPadding: textPadding\n        });\n        var outerWidth = contentBlock.outerWidth;\n        var outerHeight = contentBlock.outerHeight;\n\n        var x = adjustTextX(0, outerWidth, textAlign);\n        var y = adjustTextY(0, outerHeight, textVerticalAlign);\n\n        return new BoundingRect(x, y, outerWidth, outerHeight);\n    }\n\n    /**\n     * @public\n     * @param {number} x\n     * @param {number} width\n     * @param {string} [textAlign='left']\n     * @return {number} Adjusted x.\n     */\n    function adjustTextX(x, width, textAlign) {\n        // FIXME Right to left language\n        if (textAlign === 'right') {\n            x -= width;\n        }\n        else if (textAlign === 'center') {\n            x -= width / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @public\n     * @param {number} y\n     * @param {number} height\n     * @param {string} [textVerticalAlign='top']\n     * @return {number} Adjusted y.\n     */\n    function adjustTextY(y, height, textVerticalAlign) {\n        if (textVerticalAlign === 'middle') {\n            y -= height / 2;\n        }\n        else if (textVerticalAlign === 'bottom') {\n            y -= height;\n        }\n        return y;\n    }\n\n    /**\n     * @public\n     * @param {stirng} textPosition\n     * @param {Object} rect {x, y, width, height}\n     * @param {number} distance\n     * @return {Object} {x, y, textAlign, textVerticalAlign}\n     */\n    function adjustTextPositionOnRect(textPosition, rect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n        var halfHeight = height / 2;\n\n        var textAlign = 'left';\n        var textVerticalAlign = 'top';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                textVerticalAlign = 'middle';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textVerticalAlign = 'middle';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance;\n                textAlign = 'center';\n                textVerticalAlign = 'bottom';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                textVerticalAlign = 'middle';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - distance;\n                textAlign = 'center';\n                textVerticalAlign = 'bottom';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance;\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - distance;\n                textVerticalAlign = 'bottom';\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - distance;\n                textAlign = 'right';\n                textVerticalAlign = 'bottom';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @public\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} font\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, font, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        var textLines = (text + '').split('\\n');\n        options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n\n        // FIXME\n        // It is not appropriate that every line has '...' when truncate multiple lines.\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            textLines[i] = truncateSingleLine(textLines[i], options);\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n        options = util.extend({}, options);\n\n        options.font = font;\n        var ellipsis = retrieve2(ellipsis, '...');\n        options.maxIterations = retrieve2(options.maxIterations, 2);\n        var minChar = options.minChar = retrieve2(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        options.cnCharWidth = getTextWidth('国', font);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = options.ascCharWidth = getTextWidth('a', font);\n        options.placeholder = retrieve2(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        options.ellipsis = ellipsis;\n        options.ellipsisWidth = ellipsisWidth;\n        options.contentWidth = contentWidth;\n        options.containerWidth = containerWidth;\n\n        return options;\n    }\n\n    function truncateSingleLine(textLine, options) {\n        var containerWidth = options.containerWidth;\n        var font = options.font;\n        var contentWidth = options.contentWidth;\n\n        if (!containerWidth) {\n            return '';\n        }\n\n        var lineWidth = getTextWidth(textLine, font);\n\n        if (lineWidth <= containerWidth) {\n            return textLine;\n        }\n\n        for (var j = 0;; j++) {\n            if (lineWidth <= contentWidth || j >= options.maxIterations) {\n                textLine += options.ellipsis;\n                break;\n            }\n\n            var subLength = j === 0\n                ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth)\n                : lineWidth > 0\n                ? Math.floor(textLine.length * contentWidth / lineWidth)\n                : 0;\n\n            textLine = textLine.substr(0, subLength);\n            lineWidth = getTextWidth(textLine, font);\n        }\n\n        if (textLine === '') {\n            textLine = options.placeholder;\n        }\n\n        return textLine;\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    /**\n     * @public\n     * @param {string} font\n     * @return {number} line height\n     */\n    function getLineHeight(font) {\n        // FIXME A rough approach.\n        return getTextWidth('国', font);\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @return {Object} width\n     */\n    function measureText(text, font) {\n        var ctx = util.getContext();\n        ctx.font = font || DEFAULT_FONT;\n        return ctx.measureText(text);\n    }\n\n    /**\n     * @public\n     * @param {string} text\n     * @param {string} font\n     * @param {Object} [truncate]\n     * @return {Object} block: {lineHeight, lines, height, outerHeight}\n     *  Notice: for performance, do not calculate outerWidth util needed.\n     */\n    function parsePlainText(text, font, padding, truncate) {\n        text != null && (text += '');\n\n        var lineHeight = getLineHeight(font);\n        var lines = text ? text.split('\\n') : [];\n        var height = lines.length * lineHeight;\n        var outerHeight = height;\n\n        if (padding) {\n            outerHeight += padding[0] + padding[2];\n        }\n\n        if (text && truncate) {\n            var truncOuterHeight = truncate.outerHeight;\n            var truncOuterWidth = truncate.outerWidth;\n            if (truncOuterHeight != null && outerHeight > truncOuterHeight) {\n                text = '';\n                lines = [];\n            }\n            else if (truncOuterWidth != null) {\n                var options = prepareTruncateOptions(\n                    truncOuterWidth - (padding ? padding[1] + padding[3] : 0),\n                    font,\n                    truncate.ellipsis,\n                    {minChar: truncate.minChar, placeholder: truncate.placeholder}\n                );\n\n                // FIXME\n                // It is not appropriate that every line has '...' when truncate multiple lines.\n                for (var i = 0, len = lines.length; i < len; i++) {\n                    lines[i] = truncateSingleLine(lines[i], options);\n                }\n            }\n        }\n\n        return {\n            lines: lines,\n            height: height,\n            outerHeight: outerHeight,\n            lineHeight: lineHeight\n        };\n    }\n\n    /**\n     * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'\n     * Also consider 'bbbb{a|xxx\\nzzz}xxxx\\naaaa'.\n     *\n     * @public\n     * @param {string} text\n     * @param {Object} style\n     * @return {Object} block\n     * {\n     *      width,\n     *      height,\n     *      lines: [{\n     *          lineHeight,\n     *          width,\n     *          tokens: [[{\n     *              styleName,\n     *              text,\n     *              width,      // include textPadding\n     *              height,     // include textPadding\n     *              textWidth, // pure text width\n     *              textHeight, // pure text height\n     *              lineHeihgt,\n     *              font,\n     *              textAlign,\n     *              textVerticalAlign\n     *          }], [...], ...]\n     *      }, ...]\n     * }\n     * If styleName is undefined, it is plain text.\n     */\n    function parseRichText(text, style) {\n        var contentBlock = {lines: [], width: 0, height: 0};\n\n        text != null && (text += '');\n        if (!text) {\n            return contentBlock;\n        }\n\n        var lastIndex = STYLE_REG.lastIndex = 0;\n        var result;\n        while ((result = STYLE_REG.exec(text)) != null)  {\n            var matchedIndex = result.index;\n            if (matchedIndex > lastIndex) {\n                pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));\n            }\n            pushTokens(contentBlock, result[2], result[1]);\n            lastIndex = STYLE_REG.lastIndex;\n        }\n\n        if (lastIndex < text.length) {\n            pushTokens(contentBlock, text.substring(lastIndex, text.length));\n        }\n\n        var lines = contentBlock.lines;\n        var contentHeight = 0;\n        var contentWidth = 0;\n        // For `textWidth: 100%`\n        var pendingList = [];\n\n        var stlPadding = style.textPadding;\n\n        var truncate = style.truncate;\n        var truncateWidth = truncate && truncate.outerWidth;\n        var truncateHeight = truncate && truncate.outerHeight;\n        if (stlPadding) {\n            truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);\n            truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);\n        }\n\n        // Calculate layout info of tokens.\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var lineHeight = 0;\n            var lineWidth = 0;\n\n            for (var j = 0; j < line.tokens.length; j++) {\n                var token = line.tokens[j];\n                var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n                // textPadding should not inherit from style.\n                var textPadding = token.textPadding = tokenStyle.textPadding;\n\n                // textFont has been asigned to font by `normalizeStyle`.\n                var font = token.font = tokenStyle.font || style.font;\n\n                // textHeight can be used when textVerticalAlign is specified in token.\n                var tokenHeight = token.textHeight = retrieve2(\n                    // textHeight should not be inherited, consider it can be specified\n                    // as box height of the block.\n                    tokenStyle.textHeight, textContain.getLineHeight(font)\n                );\n                textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n                token.height = tokenHeight;\n                token.lineHeight = retrieve3(\n                    tokenStyle.textLineHeight, style.textLineHeight, tokenHeight\n                );\n\n                token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;\n                token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';\n\n                if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {\n                    return {lines: [], width: 0, height: 0};\n                }\n\n                token.textWidth = textContain.getWidth(token.text, font);\n                var tokenWidth = tokenStyle.textWidth;\n                var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto';\n\n                // Percent width, can be `100%`, can be used in drawing separate\n                // line when box width is needed to be auto.\n                if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {\n                    token.percentWidth = tokenWidth;\n                    pendingList.push(token);\n                    tokenWidth = 0;\n                    // Do not truncate in this case, because there is no user case\n                    // and it is too complicated.\n                }\n                else {\n                    if (tokenWidthNotSpecified) {\n                        tokenWidth = token.textWidth;\n\n                        // FIXME: If image is not loaded and textWidth is not specified, calling\n                        // `getBoundingRect()` will not get correct result.\n                        var textBackgroundColor = tokenStyle.textBackgroundColor;\n                        var bgImg = textBackgroundColor && textBackgroundColor.image;\n\n                        // Use cases:\n                        // (1) If image is not loaded, it will be loaded at render phase and call\n                        // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded\n                        // image, and then the right size will be calculated here at the next tick.\n                        // See `graphic/helper/text.js`.\n                        // (2) If image loaded, and `textBackgroundColor.image` is image src string,\n                        // use `imageHelper.findExistImage` to find cached image.\n                        // `imageHelper.findExistImage` will always be called here before\n                        // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`\n                        // which ensures that image will not be rendered before correct size calcualted.\n                        if (bgImg) {\n                            bgImg = imageHelper.findExistImage(bgImg);\n                            if (imageHelper.isImageReady(bgImg)) {\n                                tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);\n                            }\n                        }\n                    }\n\n                    var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;\n                    tokenWidth += paddingW;\n\n                    var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;\n\n                    if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {\n                        if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {\n                            token.text = '';\n                            token.textWidth = tokenWidth = 0;\n                        }\n                        else {\n                            token.text = truncateText(\n                                token.text, remianTruncWidth - paddingW, font, truncate.ellipsis,\n                                {minChar: truncate.minChar}\n                            );\n                            token.textWidth = textContain.getWidth(token.text, font);\n                            tokenWidth = token.textWidth + paddingW;\n                        }\n                    }\n                }\n\n                lineWidth += (token.width = tokenWidth);\n                tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n            }\n\n            line.width = lineWidth;\n            line.lineHeight = lineHeight;\n            contentHeight += lineHeight;\n            contentWidth = Math.max(contentWidth, lineWidth);\n        }\n\n        contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);\n        contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);\n\n        if (stlPadding) {\n            contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n            contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n        }\n\n        for (var i = 0; i < pendingList.length; i++) {\n            var token = pendingList[i];\n            var percentWidth = token.percentWidth;\n            // Should not base on outerWidth, because token can not be placed out of padding.\n            token.width = parseInt(percentWidth, 10) / 100 * contentWidth;\n        }\n\n        return contentBlock;\n    }\n\n    function pushTokens(block, str, styleName) {\n        var isEmptyStr = str === '';\n        var strs = str.split('\\n');\n        var lines = block.lines;\n\n        for (var i = 0; i < strs.length; i++) {\n            var text = strs[i];\n            var token = {\n                styleName: styleName,\n                text: text,\n                isLineHolder: !text && !isEmptyStr\n            };\n\n            // The first token should be appended to the last line.\n            if (!i) {\n                var tokens = (lines[lines.length - 1] || (lines[0] = {tokens: []})).tokens;\n\n                // Consider cases:\n                // (1) ''.split('\\n') => ['', '\\n', ''], the '' at the first item\n                // (which is a placeholder) should be replaced by new token.\n                // (2) A image backage, where token likes {a|}.\n                // (3) A redundant '' will affect textAlign in line.\n                // (4) tokens with the same tplName should not be merged, because\n                // they should be displayed in different box (with border and padding).\n                var tokensLen = tokens.length;\n                (tokensLen === 1 && tokens[0].isLineHolder)\n                    ? (tokens[0] = token)\n                    // Consider text is '', only insert when it is the \"lineHolder\" or\n                    // \"emptyStr\". Otherwise a redundant '' will affect textAlign in line.\n                    : ((text || !tokensLen || isEmptyStr) && tokens.push(token));\n            }\n            // Other tokens always start a new line.\n            else {\n                // If there is '', insert it as a placeholder.\n                lines.push({tokens: [token]});\n            }\n        }\n    }\n\n    function makeFont(style) {\n        // FIXME in node-canvas fontWeight is before fontStyle\n        // Use `fontSize` `fontFamily` to check whether font properties are defined.\n        return (style.fontSize || style.fontFamily) && [\n            style.fontStyle,\n            style.fontWeight,\n            (style.fontSize || 12) + 'px',\n            // If font properties are defined, `fontFamily` should not be ignored.\n            style.fontFamily || 'sans-serif'\n        ].join(' ') || style.textFont || style.font;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: measureText,\n\n        getLineHeight: getLineHeight,\n\n        parsePlainText: parsePlainText,\n\n        parseRichText: parseRichText,\n\n        adjustTextX: adjustTextX,\n\n        adjustTextY: adjustTextY,\n\n        makeFont: makeFont,\n\n        DEFAULT_FONT: DEFAULT_FONT\n    };\n\n    module.exports = textContain;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/contain/text.js\n// module id = 983\n// module chunks = 0 1 2","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/matrix.js\n// module id = 984\n// module chunks = 0 1 2","/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = require('../model/Model');\n    var DataDiffer = require('./DataDiffer');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    function transferProperties(a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    }\n\n    function DefaultDataProvider(dataArray) {\n        this._array = dataArray || [];\n    }\n\n    DefaultDataProvider.prototype.pure = false;\n\n    DefaultDataProvider.prototype.count = function () {\n        return this._array.length;\n    };\n    DefaultDataProvider.prototype.getItem = function (idx) {\n        return this._array[idx];\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string|Object>} dimensions\n     *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n     *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    coordDim: dimensionName,\n                    coordDimIndex: 0,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n                if (!dimensionInfo.coordDim) {\n                    dimensionInfo.coordDim = dimensionName;\n                    dimensionInfo.coordDimIndex = 0;\n                }\n            }\n            dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        var isDataArray = zrUtil.isArray(data);\n        if (isDataArray) {\n            data = new DefaultDataProvider(data);\n        }\n        if (__DEV__) {\n            if (!isDataArray && (typeof data.getItem != 'function' || typeof data.count != 'function')) {\n                throw new Error('Inavlid data provider.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var size = data.count();\n\n        var idList = [];\n        var nameRepeatCount = {};\n        var nameDimIdx;\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            dimInfo.otherDims.itemName === 0 && (nameDimIdx = i);\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var i = 0; i < size; i++) {\n            // NOTICE: Try not to write things into dataItem\n            var dataItem = data.getItem(i);\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[i] = dimValueGetter(dataItem, dim, i, k);\n            }\n\n            indices.push(i);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < size; i++) {\n            var dataItem = data.getItem(i);\n            if (!nameList[i] && dataItem) {\n                if (dataItem.name != null) {\n                    nameList[i] = dataItem.name;\n                }\n                else if (nameDimIdx != null) {\n                    nameList[i] = storage[dimensions[nameDimIdx]][i];\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = dataItem && dataItem.id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null || !storage[dim]) {\n            return NaN;\n        }\n\n        var value = storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {Array.<number>} Considere multiple points has the same value.\n     */\n    listProto.indicesOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var nearestIndices = [];\n\n        if (!dimData) {\n            return nearestIndices;\n        }\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n        for (var i = 0, len = this.count(); i < len; i++) {\n            var diff = value - this.get(dim, i, stack);\n            var dist = Math.abs(diff);\n            if (diff <= maxDistance && dist <= minDist) {\n                // For the case of two data are same on xAxis, which has sequence data.\n                // Show the nearest index\n                // https://github.com/ecomfe/echarts/issues/2869\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    nearestIndices.length = 0;\n                }\n                nearestIndices.push(i);\n            }\n        }\n        return nearestIndices;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData.getItem(this.getRawIndex(idx));\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (!dimSize) {\n                keep = cb.call(context, i);\n            }\n            else if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData.getItem(idx), hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string|Object} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} [ignoreParent=false]\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/data/List.js\n// module id = 985\n// module chunks = 0 1 2","\n\n    var OrdinalScale = require('../scale/Ordinal');\n    var IntervalScale = require('../scale/Interval');\n    require('../scale/Time');\n    require('../scale/Log');\n    var Scale = require('../scale/Scale');\n\n    var numberUtil = require('../util/number');\n    var zrUtil = require('zrender/lib/core/util');\n    var textContain = require('zrender/lib/contain/text');\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (scale, model) {\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            if (typeof boundaryGap[0] === 'boolean') {\n                if (__DEV__) {\n                    console.warn('Boolean type for boundaryGap is only '\n                        + 'allowed for ordinal axis. Please use string in '\n                        + 'percentage instead, e.g., \"20%\". Currently, '\n                        + 'boundaryGap is set to be 0.');\n                }\n                boundaryGap = [0, 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = (originalExtent[1] - originalExtent[0])\n                || Math.abs(originalExtent[0]);\n        }\n\n        // Notice: When min/max is not set (that is, when there are null/undefined,\n        // which is the most common case), these cases should be ensured:\n        // (1) For 'ordinal', show all axis.data.\n        // (2) For others:\n        //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n        //      disabled).\n        //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n        //      be the result that originalExtent enlarged by boundaryGap.\n        // (3) If no data, it should be ensured that `scale.setBlank` is set.\n\n        // FIXME\n        // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?\n        // (2) When `needCrossZero` and all data is positive/negative, should it be ensured\n        // that the results processed by boundaryGap are positive/negative?\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        else if (typeof min === 'function') {\n            min = min({\n                min: originalExtent[0],\n                max: originalExtent[1]\n            });\n        }\n\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n        else if (typeof max === 'function') {\n            max = max({\n                min: originalExtent[0],\n                max: originalExtent[1]\n            });\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (scale, model) {\n        var extent = axisHelper.getScaleExtent(scale, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        var scaleType = scale.type;\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent({\n            splitNumber: splitNumber,\n            fixMin: fixMin,\n            fixMax: fixMax,\n            minInterval: (scaleType === 'interval' || scaleType === 'time')\n                ? model.get('minInterval') : null,\n            maxInterval: (scaleType === 'interval' || scaleType === 'time')\n                ? model.get('maxInterval') : null\n        });\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axisHelper.getAxisRawValue(axis, tick),\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    axisHelper.getAxisRawValue = function (axis, value) {\n        // In category axis with data zoom, tick is not the original\n        // index of axis.data. So tick should not be exposed to user\n        // in category axis.\n        return axis.type === 'category' ? axis.scale.getLabel(value) : value;\n    };\n\n    module.exports = axisHelper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/coord/axisHelper.js\n// module id = 986\n// module chunks = 0 1 2","'use strict';\n\n\n    var features = {};\n\n    module.exports = {\n        register: function (name, ctor) {\n            features[name] = ctor;\n        },\n\n        get: function (name) {\n            return features[name];\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/component/toolbox/featureManager.js\n// module id = 987\n// module chunks = 0 1 2","'use strict';\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = require('../mixin/Eventful');\n    var env = require('./env');\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;\n        // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js\n        // If e.which has been defined, if may be readonly,\n        // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\n        var button = e.button;\n        if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {\n            e.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    function notLeftMouse(e) {\n        // If e.which is undefined, considered as left mouse event.\n        return e.which > 1;\n    }\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n        notLeftMouse: notLeftMouse,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/event.js\n// module id = 988\n// module chunks = 0 1 2","'use strict';\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/curve.js\n// module id = 989\n// module chunks = 0 1 2","/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/mixin/Eventful.js\n// module id = 990\n// module chunks = 0 1 2","/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = require('../core/LRU');\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerpNumber(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than lerp methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastLerp(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function lerp(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastLerp: fastLerp,\n        fastMapToColor: fastLerp, // Deprecated\n        lerp: lerp,\n        mapToColor: lerp, // Deprecated\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/tool/color.js\n// module id = 991\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../util/format');\n    var classUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var colorPaletteMixin = require('./mixin/colorPalette');\n    var env = require('zrender/lib/core/env');\n    var layout = require('../util/layout');\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            var data = this.getInitialData(option, ecModel);\n            if (__DEV__) {\n                zrUtil.assert(data, 'getInitialData returned invalid data.');\n            }\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', data);\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            // Backward compat: using subType on theme.\n            // But if name duplicate between series subType\n            // (for example: parallel) add component mainType,\n            // add suffix 'Series'.\n            var themeSubType = this.subType;\n            if (ComponentModel.hasClass(themeSubType)) {\n                themeSubType += 'Series';\n            }\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `show`\n            modelUtil.defaultEmphasis(option.label, ['show']);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                var props = ['show'];\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, props);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n                    var dimItem = data.getDimensionInfo(idx);\n                    return vertially |= dimItem && dimItem.tooltip !== false && dimItem.tooltipName != null;\n                }, 0);\n\n                var result = [];\n                var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n\n                tooltipDims.length\n                    ? zrUtil.each(tooltipDims, function (dimIdx) {\n                        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n                    })\n                    // By default, all dims is used on tooltip.\n                    : zrUtil.each(value, setEachItem);\n\n                function setEachItem(val, dimIdx) {\n                    var dimInfo = data.getDimensionInfo(dimIdx);\n                    // If `dimInfo.tooltip` is not set, show tooltip.\n                    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n                        return;\n                    }\n                    var dimType = dimInfo.type;\n                    var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '')\n                        + (dimType === 'ordinal'\n                            ? val + ''\n                            : dimType === 'time'\n                            ? (multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val))\n                            : addCommas(val)\n                        );\n                    valStr && result.push(encodeHTML(valStr));\n                }\n\n                return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = zrUtil.isArray(value)\n                ? formatArrayValue(value) : encodeHTML(addCommas(value));\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = formatUtil.getTooltipMarker(color);\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            seriesName = seriesName\n                ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ')\n                : '';\n            return !multipleSeries\n                ? seriesName + colorEl\n                    + (name\n                        ? encodeHTML(name) + ': ' + formattedValue\n                        : formattedValue\n                    )\n                : colorEl + seriesName + formattedValue;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Object} {dataIndices, nestestValue}.\n         */\n        getAxisTooltipData: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/model/Series.js\n// module id = 992\n// module chunks = 0 1 2","/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var each = zrUtil.each;\n    var isString = zrUtil.isString;\n    var defaults = zrUtil.defaults;\n    var normalizeToArray = modelUtil.normalizeToArray;\n\n    var OTHER_DIMS = {tooltip: 1, label: 1, itemName: 1};\n\n    /**\n     * Complete the dimensions array, by user defined `dimension` and `encode`,\n     * and guessing from the data structure.\n     * If no 'value' dimension specified, the first no-named dimension will be\n     * named as 'value'.\n     *\n     * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n     *      provides not only dim template, but also default order.\n     *      `name` of each item provides default coord name.\n     *      [{dimsDef: []}, ...] can be specified to give names.\n     * @param {Array} data Data list. [[1, 2, 3], [2, 3, 4]].\n     * @param {Object} [opt]\n     * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n     *      For example: ['asdf', {name, type}, ...].\n     * @param {Object} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n     * @param {string} [opt.extraPrefix] Prefix of name when filling the left dimensions.\n     * @param {string} [opt.extraFromZero] If specified, extra dim names will be:\n     *                      extraPrefix + 0, extraPrefix + extraBaseIndex + 1 ...\n     *                      If not specified, extra dim names will be:\n     *                      extraPrefix, extraPrefix + 0, extraPrefix + 1 ...\n     * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n     * @return {Array.<Object>} [{\n     *      name: string mandatory,\n     *      coordDim: string mandatory,\n     *      coordDimIndex: number mandatory,\n     *      type: string optional,\n     *      tooltipName: string optional,\n     *      otherDims: {\n     *          tooltip: number optional,\n     *          label: number optional\n     *      },\n     *      isExtraCoord: boolean true or undefined.\n     *      other props ...\n     * }]\n     */\n    function completeDimensions(sysDims, data, opt) {\n        data = data || [];\n        opt = opt || {};\n        sysDims = (sysDims || []).slice();\n        var dimsDef = (opt.dimsDef || []).slice();\n        var encodeDef = zrUtil.createHashMap(opt.encodeDef);\n        var dataDimNameMap = zrUtil.createHashMap();\n        var coordDimNameMap = zrUtil.createHashMap();\n        // var valueCandidate;\n        var result = [];\n\n        var dimCount = opt.dimCount;\n        if (dimCount == null) {\n            var value0 = retrieveValue(data[0]);\n            dimCount = Math.max(\n                zrUtil.isArray(value0) && value0.length || 1,\n                sysDims.length,\n                dimsDef.length\n            );\n            each(sysDims, function (sysDimItem) {\n                var sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n            });\n        }\n\n        // Apply user defined dims (`name` and `type`) and init result.\n        for (var i = 0; i < dimCount; i++) {\n            var dimDefItem = isString(dimsDef[i]) ? {name: dimsDef[i]} : (dimsDef[i] || {});\n            var userDimName = dimDefItem.name;\n            var resultItem = result[i] = {otherDims: {}};\n            // Name will be applied later for avoiding duplication.\n            if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n                // Only if `series.dimensions` is defined in option, tooltipName\n                // will be set, and dimension will be diplayed vertically in\n                // tooltip by default.\n                resultItem.name = resultItem.tooltipName = userDimName;\n                dataDimNameMap.set(userDimName, i);\n            }\n            dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n        }\n\n        // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n        encodeDef.each(function (dataDims, coordDim) {\n            dataDims = encodeDef.set(coordDim, normalizeToArray(dataDims).slice());\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                // The input resultDimIdx can be dim name or index.\n                isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n                if (resultDimIdx != null && resultDimIdx < dimCount) {\n                    dataDims[coordDimIndex] = resultDimIdx;\n                    applyDim(result[resultDimIdx], coordDim, coordDimIndex);\n                }\n            });\n        });\n\n        // Apply templetes and default order from `sysDims`.\n        var availDimIdx = 0;\n        each(sysDims, function (sysDimItem, sysDimIndex) {\n            var coordDim;\n            var sysDimItem;\n            var sysDimItemDimsDef;\n            var sysDimItemOtherDims;\n            if (isString(sysDimItem)) {\n                coordDim = sysDimItem;\n                sysDimItem = {};\n            }\n            else {\n                coordDim = sysDimItem.name;\n                sysDimItem = zrUtil.clone(sysDimItem);\n                // `coordDimIndex` should not be set directly.\n                sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemOtherDims = sysDimItem.otherDims;\n                sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex\n                    = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n            }\n\n            var dataDims = normalizeToArray(encodeDef.get(coordDim));\n            // dimensions provides default dim sequences.\n            if (!dataDims.length) {\n                for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n                    while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n                        availDimIdx++;\n                    }\n                    availDimIdx < result.length && dataDims.push(availDimIdx++);\n                }\n            }\n            // Apply templates.\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                var resultItem = result[resultDimIdx];\n                applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n                if (resultItem.name == null && sysDimItemDimsDef) {\n                    resultItem.name = resultItem.tooltipName = sysDimItemDimsDef[coordDimIndex];\n                }\n                sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n            });\n        });\n\n        // Make sure the first extra dim is 'value'.\n        var extra = opt.extraPrefix || 'value';\n\n        // Set dim `name` and other `coordDim` and other props.\n        for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n            var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n            var coordDim = resultItem.coordDim;\n\n            coordDim == null && (\n                resultItem.coordDim = genName(extra, coordDimNameMap, opt.extraFromZero),\n                resultItem.coordDimIndex = 0,\n                resultItem.isExtraCoord = true\n            );\n\n            resultItem.name == null && (resultItem.name = genName(\n                resultItem.coordDim,\n                dataDimNameMap\n            ));\n\n            resultItem.type == null && guessOrdinal(data, resultDimIdx)\n                && (resultItem.type = 'ordinal');\n        }\n\n        return result;\n\n        function applyDim(resultItem, coordDim, coordDimIndex) {\n            if (OTHER_DIMS[coordDim]) {\n                resultItem.otherDims[coordDim] = coordDimIndex;\n            }\n            else {\n                resultItem.coordDim = coordDim;\n                resultItem.coordDimIndex = coordDimIndex;\n                coordDimNameMap.set(coordDim, true);\n            }\n        }\n\n        function genName(name, map, fromZero) {\n            if (fromZero || map.get(name) != null) {\n                var i = 0;\n                while (map.get(name + i) != null) {\n                    i++;\n                }\n                name += i;\n            }\n            map.set(name, true);\n            return name;\n        }\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            // Consider usage convenience, '1', '2' will be treated as \"number\".\n            // `isFinit('')` get `true`.\n            if (value != null && isFinite(value) && value !== '') {\n                return false;\n            }\n            else if (isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/data/helper/completeDimensions.js\n// module id = 993\n// module chunks = 0 1 2","'use strict';\n// Symbol factory\n\n\n    var graphic = require('./graphic');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            // TODO Support image object, DynamicImage.\n\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/util/symbol.js\n// module id = 994\n// module chunks = 0 1 2","\n\n    module.exports = {\n        toolbox: {\n            brush: {\n                title: {\n                    rect: '矩形选择',\n                    polygon: '圈选',\n                    lineX: '横向选择',\n                    lineY: '纵向选择',\n                    keep: '保持选择',\n                    clear: '清除选择'\n                }\n            },\n            dataView: {\n                title: '数据视图',\n                lang: ['数据视图', '关闭', '刷新']\n            },\n            dataZoom: {\n                title: {\n                    zoom: '区域缩放',\n                    back: '区域缩放还原'\n                }\n            },\n            magicType: {\n                title: {\n                    line: '切换为折线图',\n                    bar: '切换为柱状图',\n                    stack: '切换为堆叠',\n                    tiled: '切换为平铺'\n                }\n            },\n            restore: {\n                title: '还原'\n            },\n            saveAsImage: {\n                title: '保存为图片',\n                lang: ['右键另存为图片']\n            }\n        }\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/lang.js\n// module id = 995\n// module chunks = 0 1 2","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/echarts/lib/CoordinateSystem.js\n// module id = 996\n// module chunks = 0 1 2","'use strict';\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = require('./curve');\n    var vec2 = require('./vector');\n    var bbox = require('./bbox');\n    var BoundingRect = require('./BoundingRect');\n    var dpr = require('../config').devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/core/PathProxy.js\n// module id = 997\n// module chunks = 0 1 2","\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/config.js\n// module id = 998\n// module chunks = 0 1 2","/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = require('../core/util');\n    var Element = require('../Element');\n    var BoundingRect = require('../core/BoundingRect');\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/zrender/lib/container/Group.js\n// module id = 999\n// module chunks = 0 1 2"],"sourceRoot":""}